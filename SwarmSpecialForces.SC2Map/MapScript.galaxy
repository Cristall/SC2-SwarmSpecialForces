//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Swarm Special Forces
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_maxAmountDifficulties = 6;
const int gv_maxAmountPlayers = 6;
const int gv_maxAmountParts = 2;
const int gv_gameTimeMax = 32768;
const fixed gv_version = 1.06;
const string gv_encryptKey = "gehkaggen11";
const int gv_hashSecurityLevel = 4;
const int gv_acvReq_PointsStages = 4;
const int gv_acvReq_WinsTStages = 6;
const int gv_acvReq_WinsPStages = 6;
const int gv_acvReq_KillsStages = 6;
const int gv_acvReq_ScientistsStages = 4;
const int gv_acvReq_DifficultyStages = 3;
const int gv_acvReq_EssencesStages = 5;
const int gv_acvReq_PsiOrbsStages = 5;
const int gv_acvReq_ScoresStages = 7;
const int gv_maxHeroList = 5;
const int gv_maxCustomDiffSettings = 17;
const int gv_leaderboard_MaxAmountRanks = 10;
const int gv_options_ControlGroup_Amount = 4;
const int gv_basePlayer = 7;
const int gv_enemyPlayer = 14;
const int gv_observer_AmountWaypoints = 11;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Difficulty {
    int lv_points;
    fixed lv_expMult;
    fixed lv_biomassMult;
    fixed lv_spawnMult;
    int lv_scientistsAmount;
    int lv_essenceAmount;
    bool lv_psiOrbSpawns;
    fixed lv_upgradeCountFactor;
};

struct gs_AcvUnlockRequirements {
    int[gv_acvReq_PointsStages + 1] lv_pointsReq;
    int[gv_acvReq_WinsTStages + 1] lv_winsTReq;
    int[gv_acvReq_WinsPStages + 1] lv_winsPReq;
    int[gv_acvReq_KillsStages + 1] lv_killsReq;
    int[gv_acvReq_ScientistsStages + 1] lv_scientistsReq;
    int[gv_maxAmountDifficulties + 1][gv_acvReq_DifficultyStages + 1][gv_maxAmountParts + 1] lv_diffTimes;
    int[gv_maxAmountDifficulties + 1][gv_acvReq_DifficultyStages + 1][gv_maxAmountParts + 1] lv_diffSoloTimes;
    int[gv_acvReq_EssencesStages + 1] lv_essencesReq;
    int[gv_acvReq_PsiOrbsStages + 1] lv_psiOrbsReq;
    int[gv_acvReq_ScoresStages + 1] lv_scoreReq;
};

struct gs_HeroSelect_HeroInfo {
    string lv_icon;
    text lv_unlockTooltip;
    text lv_longDescription;
    text lv_name;
    string lv_hero;
};

struct gs_HeroSelection {
    int lv_mainFrame;
    int[gv_maxAmountPlayers + 1] lv_playerShowcase;
    int[gv_maxAmountPlayers + 1] lv_player_Hero_Selected;
    int[gv_maxAmountPlayers + 1] lv_player_Difficulty_Selected;
    bool[gv_maxAmountPlayers + 1] lv_player_IsReady;
    gs_HeroSelect_HeroInfo[gv_maxHeroList + 1] lv_hero_Info;
    int[gv_maxHeroList + 1] lv_hero_Button;
    int[gv_maxAmountDifficulties + 1] lv_difficulty_Button;
    int lv_difficulty_Button_Any;
    int lv_difficulty_TotalVotes;
    int lv_timer_Label;
    int lv_timer;
    int lv_ready_Button;
    int lv_ready_Counter;
    int lv_autoSelection_Button;
    int[gv_maxCustomDiffSettings + 1] lv_customDiffEditboxes;
    int[gv_maxCustomDiffSettings + 1] lv_customDiffLabels;
    bool[gv_maxCustomDiffSettings + 1] lv_customDiffValidInput;
    int lv_customDiffHost;
    playergroup lv_customDiffNotHostPlayerGroup;
    int[gv_maxAmountDifficulties + 1] lv_customDiffPresetButtons;
    int lv_customDiffCustomPresetInputEditBox;
    int lv_customDiffCustomPresetInputCreateButton;
    int lv_customDiffCustomPresetInputCopyClipboardButton;
    int lv_customDiffCustomPresetInputLoadButton;
};

struct gs_HeroSelect_CustomDiff_DiffPreset {
    fixed[gv_maxCustomDiffSettings + 1] lv_values;
};

struct gs_CustomDefeatDialog {
    int lv_dialog;
    int lv_spectateButton;
    int lv_leaveButton;
    int lv_text;
};

struct gs_Tutorial {
    int lv_smallinfo;
    int lv_closeButton;
    int lv_timerLabel;
    int lv_startTutorialButton;
    int lv_dialog;
    int lv_stage;
    int lv_textLabel;
    int lv_player;
    timer lv_moneyskiptimer;
    bool lv_firstdeath;
    bool lv_tpbacktohive;
    bool lv_active;
    unit lv_larva;
    unit lv_scientist;
    revealer lv_revealer;
    point lv_camerabefore;
};

struct gs_Objectives {
    int lv_bosses;
    int lv_scientists;
    int lv_essences;
    int lv_psiOrbs;
    int lv_observer;
};

struct gs_Leaderboard {
    int lv_leaderboard;
    int[gv_maxAmountPlayers + 1] lv_playerRow;
    int[gv_maxAmountPlayers + 1] lv_playerRank;
    text[gv_leaderboard_MaxAmountRanks + 1] lv_rankNames;
};

struct gs_SSF_CustomUI {
    int lv_mainFrame;
};

struct gs_Menu {
    int lv_votekick_Button;
};

struct gs_StatsInterface {
    int[gv_maxAmountPlayers + 1] lv_stats;
};

struct gs_AcvInterface {
    int lv_mainFrame;
};

struct gs_Speedruns {
    int lv_mainFrame;
};

struct gs_Votekick {
    int lv_mainFrame;
    int[gv_maxAmountPlayers + 1] lv_kickButtons;
    bool[gv_maxAmountPlayers + 1][gv_maxAmountPlayers + 1] lv_votes;
    bool[gv_maxAmountPlayers + 1] lv_firstTimeInitialized;
    int[gv_maxAmountPlayers + 1] lv_votesCombined;
    int lv_votesRequired;
};

struct gs_Options {
    int lv_dialog;
    int lv_closeButton;
    bool[gv_maxAmountPlayers + 1] lv_heroSelection_Flag;
    int[gv_maxAmountPlayers + 1] lv_heroSelection_Hero;
    int lv_heroSelection_Checkbox;
    int lv_heroSelection_Pulldown;
    int[gv_maxAmountPlayers + 1][gv_maxHeroList + 1] lv_heroSelection_HeroListIndex;
    int[gv_options_ControlGroup_Amount + 1] lv_controlGroup_Label;
    int[gv_options_ControlGroup_Amount + 1] lv_controlGroup_Checkbox;
    int[gv_options_ControlGroup_Amount + 1] lv_controlGroup_Pulldown;
    bool[gv_options_ControlGroup_Amount + 1][gv_maxAmountPlayers + 1] lv_controlGroup_Flag;
    int[gv_options_ControlGroup_Amount + 1][gv_maxAmountPlayers + 1] lv_controlGroup_Group;
    int lv_showPlayerHandle_Button;
    bool[gv_maxAmountPlayers + 1] lv_saveFlag;
};

struct gs_HiveAuraStats {
    fixed lv_dmgp2;
    fixed lv_armorp2;
    fixed lv_energyregp2;
    fixed lv_atkspdp2;
    fixed lv_liferegp2;
    fixed lv_timescalep2;
};

struct gs_PlayerStats {
    bool lv_active;
    bool lv_spectating;
    bank lv_bankfile;
    int lv_points;
    int lv_winsTerran;
    int lv_kills;
    int lv_scientists;
    int[gv_maxAmountDifficulties + 1][gv_maxAmountParts + 1] lv_difficultyTime;
    int[gv_maxAmountDifficulties + 1][gv_maxAmountParts + 1] lv_difficultyTimeSolo;
    int lv_essences;
    bool[gv_maxAmountDifficulties + 1] lv_bossTFlamerKills;
    bool[gv_maxAmountDifficulties + 1] lv_bossTFortressKills;
    bool[gv_maxAmountDifficulties + 1] lv_bossTHammerKills;
    bool[gv_maxAmountDifficulties + 1] lv_flawlessTerran;
    bool lv_tutorialCompleted;
    int lv_winsProtoss;
    int lv_psiOrbs;
    bool[gv_maxAmountDifficulties + 1] lv_bossPMadness;
    bool[gv_maxAmountDifficulties + 1] lv_bossPTagTeamLightning;
    bool[gv_maxAmountDifficulties + 1] lv_bossPTagTeamThunder;
    bool[gv_maxAmountDifficulties + 1] lv_bossPAtlantis;
    bool[gv_maxAmountDifficulties + 1] lv_flawlessProtoss;
    int lv_lifes;
    int lv_pointsLevel;
    int lv_winsLevelTerran;
    int lv_winsLevelProtoss;
    int lv_psiOrbsLevel;
    int lv_killsLevel;
    int lv_scientistsLevel;
    int lv_essencesLevels;
    int[gv_maxAmountDifficulties + 1][gv_maxAmountParts + 1] lv_difficultyTimeLevel;
    int[gv_maxAmountDifficulties + 1][gv_maxAmountParts + 1] lv_difficultyTimeSoloLevel;
    fixed lv_expBonusAdd;
    fixed lv_expBonusMult;
    fixed lv_biomassBonusAdd;
    fixed lv_biomassBonusMult;
    fixed lv_startEXP;
    fixed lv_startEXPp2;
    fixed lv_startBiomassP2;
    fixed lv_spellPowerPercent;
    int lv_upgrade_Dmg;
    int lv_upgrade_Armor;
    int lv_upgrade_Splash;
    int lv_upgrade_Atkspd;
    int lv_upgrade_Regen;
    int lv_acvScore;
    int lv_acvScoreLevel;
    bool lv_acvScore_Custom;
    text lv_acvScoreRank;
    bool lv_acvScoreRank_Custom;
    bool lv_allowDanceCommand;
};

struct gs_Observer {
    unit lv_unit;
    point[gv_observer_AmountWaypoints + 1] lv_waypoints;
    int lv_currentWaypoint;
    bool lv_alive;
};

struct gs_ActivePart {
    int lv_activePart;
    region lv_region;
    region lv_bounds;
    region lv_base;
    revealer[gv_maxAmountPlayers + 1] lv_baseRevealer;
    point lv_attackPoint;
    point lv_attackWaypoint;
    region lv_attackWaypointRemoverRegion;
    point[gv_maxAmountPlayers + 1] lv_playerSpawnPoints;
    int lv_objectiveCount;
    int lv_obejctiveDefeatedCount;
};

struct gs_PartTerran {
    bool lv_junker_First;
    unitgroup lv_junker_First_Spawner;
    bool lv_junker_Second;
    unitgroup lv_junker_Second_Spawner;
    bool lv_junker_Third;
    unitgroup lv_junker_Third_Spawner;
    bool lv_blackOps_First;
    unitgroup lv_blackOps_First_Spawner;
    bool lv_blackOps_Second;
    unitgroup lv_blackOps_Second_Spawner;
    bool lv_blackOps_Third;
    unitgroup lv_blackOps_Third_Spawner;
    bool lv_mix_First;
    unitgroup lv_mix_First_Spawner;
    unit lv_hellbat;
    unit lv_fortress;
    unit lv_thor;
    fixed lv_junker_Biomass_Mult;
    fixed lv_junker_Exp_Mult;
    fixed lv_blackOps_Biomass_Mult;
    fixed lv_blackOps_Exp_Mult;
    gs_Observer lv_observer;
    bool lv_changePartFlag;
};

struct gs_Madness {
    unitgroup[4] lv_spawners;
    unitgroup lv_healers;
    unitgroup lv_cannons;
    unitgroup lv_voidContainments;
    int lv_activeSet;
    int lv_phase;
    int lv_timer;
    string[4] lv_minibosses;
};

struct gs_PartProtoss {
    bool lv_mech_First;
    unitgroup lv_mech_First_Spawner;
    bool lv_mech_Second;
    unitgroup lv_mech_Second_Spawner;
    bool lv_psi_First;
    unitgroup lv_psi_First_Spawner;
    bool lv_psi_Second;
    unitgroup lv_psi_Second_Spawner;
    bool lv_psi_Third;
    unitgroup lv_psi_Third_Spawner;
    bool lv_mix_First;
    int lv_mix_First_OpenerCount;
    unitgroup lv_mix_First_Spawner;
    unit lv_madness;
    unit lv_tagTeamThunder;
    unit lv_tagTeamLightning;
    unit lv_atlantis;
    unit lv_pylonColossus;
    fixed lv_mech_Biomass_Mult;
    fixed lv_mech_Exp_Mult;
    fixed lv_psi_Biomass_Mult;
    fixed lv_psi_Exp_Mult;
    gs_Madness lv_madnessVars;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_gameStarted;
string gv_gameMode;
gs_Difficulty gv_difficultyVariables;
string gv_bankStorageString;
bool gv_bankStorageErrorCheck;
timer gv_saveTimer;
gs_AcvUnlockRequirements gv_acvReq;
gs_HeroSelection gv_heroSelection;
gs_CustomDefeatDialog gv_customDefeatDialogVariables;
gs_Tutorial gv_tutorial;
gs_Objectives gv_objectives;
gs_Leaderboard gv_leaderboard;
gs_SSF_CustomUI gv_sSF_CustomUI;
gs_Menu gv_menu;
gs_StatsInterface gv_statsInterface;
gs_AcvInterface gv_acvInterface;
gs_Speedruns gv_speedruns;
gs_Votekick gv_votekick;
gs_Options gv_options;
unit[gv_maxAmountPlayers + 1] gv_baseOverlord;
unit gv_baseHive;
int gv_baseHiveStatus;
gs_HiveAuraStats gv_hiveAuraStats;
unitgroup gv_heroUnitGroup;
unit[gv_maxAmountPlayers + 1] gv_heroUnits;
playergroup gv_playerGroup;
playergroup gv_startingPlayerGroup;
playergroup gv_spectatingPlayerGroup;
int gv_playerAmount;
int gv_playerAmountStart;
fixed gv_upgradeCountDecimal;
int gv_upgradeCountRounded;
playergroup gv_newPlayers;
gs_PlayerStats[gv_maxAmountPlayers + 1] gv_playerStats;
int gv_collectiblePlayerEnemyAllied;
int gv_collectiblePlayerEnemyNeutral;
int gv_essences_Found;
int gv_scientists_Found;
int gv_difficulty;
int gv_partActive;
int gv_spawnAmount;
int gv_spawnLimit;
bool gv_flawlessFlag;
gs_ActivePart gv_enemy_ActivePart;
timer gv_idleTimer;
timer gv_spawnTimer;
gs_PartTerran gv_partTerran;
gs_PartProtoss gv_partProtoss;

void InitGlobals () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_i2;

    gv_gameMode = "";
    gv_difficultyVariables.lv_points = 1;
    gv_difficultyVariables.lv_expMult = 1.0;
    gv_difficultyVariables.lv_biomassMult = 1.0;
    gv_difficultyVariables.lv_spawnMult = 1.0;
    gv_difficultyVariables.lv_scientistsAmount = 1;
    gv_difficultyVariables.lv_upgradeCountFactor = 0.5;
    gv_bankStorageString = "";
    gv_saveTimer = TimerCreate();
    gv_heroSelection.lv_mainFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_heroSelection.lv_playerShowcase[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_heroSelection.lv_player_Difficulty_Selected[init_i1] = -1;
    }
    for (init_i1 = 0; init_i1 <= gv_maxHeroList; init_i1 += 1) {
        gv_heroSelection.lv_hero_Button[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_maxAmountDifficulties; init_i1 += 1) {
        gv_heroSelection.lv_difficulty_Button[init_i1] = c_invalidDialogControlId;
    }
    gv_heroSelection.lv_difficulty_Button_Any = c_invalidDialogControlId;
    gv_heroSelection.lv_timer_Label = c_invalidDialogControlId;
    gv_heroSelection.lv_timer = 60;
    gv_heroSelection.lv_ready_Button = c_invalidDialogControlId;
    gv_heroSelection.lv_autoSelection_Button = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_maxCustomDiffSettings; init_i1 += 1) {
        gv_heroSelection.lv_customDiffEditboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_maxCustomDiffSettings; init_i1 += 1) {
        gv_heroSelection.lv_customDiffLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_maxCustomDiffSettings; init_i1 += 1) {
        gv_heroSelection.lv_customDiffValidInput[init_i1] = true;
    }
    gv_heroSelection.lv_customDiffNotHostPlayerGroup = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= gv_maxAmountDifficulties; init_i1 += 1) {
        gv_heroSelection.lv_customDiffPresetButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_heroSelection.lv_customDiffCustomPresetInputEditBox = c_invalidDialogControlId;
    gv_heroSelection.lv_customDiffCustomPresetInputCreateButton = c_invalidDialogControlId;
    gv_heroSelection.lv_customDiffCustomPresetInputCopyClipboardButton = c_invalidDialogControlId;
    gv_heroSelection.lv_customDiffCustomPresetInputLoadButton = c_invalidDialogControlId;
    gv_customDefeatDialogVariables.lv_dialog = c_invalidDialogId;
    gv_customDefeatDialogVariables.lv_spectateButton = c_invalidDialogControlId;
    gv_customDefeatDialogVariables.lv_leaveButton = c_invalidDialogControlId;
    gv_customDefeatDialogVariables.lv_text = c_invalidDialogControlId;
    gv_tutorial.lv_smallinfo = c_invalidDialogId;
    gv_tutorial.lv_closeButton = c_invalidDialogControlId;
    gv_tutorial.lv_timerLabel = c_invalidDialogControlId;
    gv_tutorial.lv_startTutorialButton = c_invalidDialogControlId;
    gv_tutorial.lv_dialog = c_invalidDialogId;
    gv_tutorial.lv_textLabel = c_invalidDialogControlId;
    gv_tutorial.lv_moneyskiptimer = TimerCreate();
    gv_tutorial.lv_firstdeath = true;
    gv_objectives.lv_bosses = c_invalidObjectiveId;
    gv_objectives.lv_scientists = c_invalidObjectiveId;
    gv_objectives.lv_essences = c_invalidObjectiveId;
    gv_objectives.lv_psiOrbs = c_invalidObjectiveId;
    gv_objectives.lv_observer = c_invalidObjectiveId;
    gv_leaderboard.lv_leaderboard = c_boardNone;
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_leaderboard.lv_playerRow[init_i1] = 1;
    }
    gv_sSF_CustomUI.lv_mainFrame = c_invalidDialogControlId;
    gv_menu.lv_votekick_Button = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_statsInterface.lv_stats[init_i1] = c_invalidDialogControlId;
    }
    gv_acvInterface.lv_mainFrame = c_invalidDialogControlId;
    gv_speedruns.lv_mainFrame = c_invalidDialogControlId;
    gv_votekick.lv_mainFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_votekick.lv_kickButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_votekick.lv_votesRequired = 4;
    gv_options.lv_dialog = c_invalidDialogId;
    gv_options.lv_closeButton = c_invalidDialogControlId;
    gv_options.lv_heroSelection_Checkbox = c_invalidDialogControlId;
    gv_options.lv_heroSelection_Pulldown = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_options_ControlGroup_Amount; init_i1 += 1) {
        gv_options.lv_controlGroup_Label[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_options_ControlGroup_Amount; init_i1 += 1) {
        gv_options.lv_controlGroup_Checkbox[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_options_ControlGroup_Amount; init_i1 += 1) {
        gv_options.lv_controlGroup_Pulldown[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= gv_options_ControlGroup_Amount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= gv_maxAmountPlayers; init_j1 += 1) {
            gv_options.lv_controlGroup_Flag[init_i1][init_j1] = true;
        }
    }
    for (init_i1 = 0; init_i1 <= gv_options_ControlGroup_Amount; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= gv_maxAmountPlayers; init_j1 += 1) {
            gv_options.lv_controlGroup_Group[init_i1][init_j1] = 1;
        }
    }
    gv_options.lv_showPlayerHandle_Button = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= gv_maxAmountPlayers; init_i1 += 1) {
        gv_options.lv_saveFlag[init_i1] = true;
    }
    gv_baseHiveStatus = 1;
    gv_heroUnitGroup = UnitGroupEmpty();
    gv_playerGroup = PlayerGroupEmpty();
    gv_startingPlayerGroup = PlayerGroupEmpty();
    gv_spectatingPlayerGroup = PlayerGroupEmpty();
    gv_newPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_maxAmountPlayers; init_i += 1) {
        gv_playerStats[init_i].lv_expBonusMult = 1.0;
        gv_playerStats[init_i].lv_biomassBonusMult = 1.0;
        gv_playerStats[init_i].lv_acvScoreRank = StringExternal("Trig/Leaderboard/Rank0");
    }
    gv_collectiblePlayerEnemyAllied = 13;
    gv_collectiblePlayerEnemyNeutral = 12;
    gv_partActive = 1;
    gv_spawnLimit = 600;
    gv_flawlessFlag = true;
    gv_idleTimer = TimerCreate();
    gv_spawnTimer = TimerCreate();
    gv_partTerran.lv_junker_First = true;
    gv_partTerran.lv_junker_First_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_junker_Second_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_junker_Third_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_blackOps_First = true;
    gv_partTerran.lv_blackOps_First_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_blackOps_Second_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_blackOps_Third_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_mix_First = true;
    gv_partTerran.lv_mix_First_Spawner = UnitGroupEmpty();
    gv_partTerran.lv_junker_Biomass_Mult = 1.0;
    gv_partTerran.lv_junker_Exp_Mult = 1.0;
    gv_partTerran.lv_blackOps_Biomass_Mult = 1.0;
    gv_partTerran.lv_blackOps_Exp_Mult = 1.0;
    gv_partTerran.lv_observer.lv_alive = true;
    gv_partProtoss.lv_mech_First = true;
    gv_partProtoss.lv_mech_First_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_mech_Second_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_psi_First = true;
    gv_partProtoss.lv_psi_First_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_psi_Second_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_psi_Third_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_mix_First_Spawner = UnitGroupEmpty();
    gv_partProtoss.lv_mech_Biomass_Mult = 1.0;
    gv_partProtoss.lv_mech_Exp_Mult = 1.0;
    gv_partProtoss.lv_psi_Biomass_Mult = 1.0;
    gv_partProtoss.lv_psi_Exp_Mult = 1.0;
    for (init_i2 = 0; init_i2 <= 3; init_i2 += 1) {
        gv_partProtoss.lv_madnessVars.lv_spawners[init_i2] = UnitGroupEmpty();
    }
    gv_partProtoss.lv_madnessVars.lv_healers = UnitGroupEmpty();
    gv_partProtoss.lv_madnessVars.lv_cannons = UnitGroupEmpty();
    gv_partProtoss.lv_madnessVars.lv_voidContainments = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Init_activePlayers ();
void gf_InitNotTutorial ();
void gf_Init_TradeMenu ();
void gf_Set_Difficulty_Variables ();
void gf_BankStorageReset ();
void gf_BankStorageSet (string lp_string);
void gf_BankStorageAddInt (int lp_value);
void gf_BankStorageAddBool (bool lp_value);
int gf_BankStorageRetrieveInt ();
bool gf_BankStorageRetrieveBool ();
string gf_BankStorageGetString ();
bool gf_BankStorageCheckError ();
bool gf_LoadSuccessful_Switch (int lp_playerID);
bool gf_Load_v04 (int lp_playerID);
bool gf_Load_v08 (int lp_playerID);
bool gf_Load_v09 (int lp_playerID);
bool gf_Load_v015 (int lp_playerID);
bool gf_Load_v018 (int lp_playerID);
bool gf_Load_v038 (int lp_playerID);
bool gf_Load_v041 (int lp_playerID);
bool gf_Load_v100 (int lp_playerID);
bool gf_Load_v106 (int lp_playerID);
void gf_Init_Bankfile ();
bool gf_Load_Test (int lp_playerID);
void gf_Save (int lp_playerID);
void gf_Save_Options (int lp_playerID);
void gf_ResetStats (int lp_playerID);
text gf_UI_IntToRomanNumberText (int lp_number);
text gf_UI_IntToSpeedyText (int lp_number);
text gf_UI_AcvScore (fixed lp_amount);
text gf_UI_Dmg (fixed lp_amount);
text gf_UI_Spellpower (fixed lp_amount);
text gf_UI_AttackSpeed (fixed lp_amountInPercent);
text gf_UI_SplashRange (fixed lp_amount);
text gf_UI_Armor (fixed lp_amount);
text gf_UI_Life (fixed lp_amount);
text gf_UI_LifeRegen (fixed lp_amountInPercent);
text gf_UI_Energy (fixed lp_amount);
text gf_UI_EnergyRegen (fixed lp_amountInPercent);
text gf_UI_Speed (fixed lp_amount);
text gf_UI_OverlordSpeed (fixed lp_amount);
text gf_UI_SpeedOnCreep (fixed lp_amount);
text gf_UI_VisionRange (fixed lp_amount);
text gf_UI_BiomassPerKill (fixed lp_amount);
text gf_UI_ExpPerKill (fixed lp_amount);
text gf_UI_StartExp (fixed lp_amount);
text gf_UI_StartExpp2 (fixed lp_amount);
text gf_UI_StartBiomass (fixed lp_amount);
text gf_UI_StartBiomassp2 (fixed lp_amount);
text gf_UI_TimeFormat (int lp_time);
text gf_UI_Newline ();
text gf_UI_HeroUnlock (int lp_heroID);
text gf_UI_MaxStage ();
text gf_UI_Diff_Team_Unlock0 (text lp_namewithcolor);
text gf_UI_Diff_Team_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy);
text gf_UI_Diff_Solo_Unlock0 (text lp_namewithcolor);
text gf_UI_Diff_Solo_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy);
text gf_UI_Diff_Duo_Unlock0 (text lp_namewithcolor);
text gf_UI_Diff_Duo_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy);
text gf_UI_Diff_Trio_Unlock0 (text lp_namewithcolor);
text gf_UI_Diff_Trio_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy);
text gf_UI_AbilUnlock (text lp_ability, text lp_hero);
text gf_UI_IntToDiffShort (int lp_diff);
void gf_Reward_Armor (int lp_playerID, fixed lp_amount);
void gf_Reward_AcvScore (int lp_playerID, int lp_amount);
void gf_Reward_Dmg (int lp_playerID, fixed lp_amount);
void gf_Reward_Spellpower (int lp_playerID, fixed lp_amountInPercent);
void gf_Reward_Spellpower_UpdateEffects (int lp_playerID);
void gf_Reward_AttackSpeed (int lp_playerID, fixed lp_amountInPercent);
void gf_Reward_SplashRange (int lp_playerID, fixed lp_amount);
void gf_Reward_Life (int lp_playerID, fixed lp_amount);
void gf_Reward_LifeRegen (int lp_playerID, fixed lp_amountInPercent);
void gf_Reward_Energy (int lp_playerID, fixed lp_amount);
void gf_Reward_EnergyRegen (int lp_playerID, fixed lp_amountInPercent);
void gf_Reward_Speed (int lp_playerID, fixed lp_amount);
void gf_Reward_SpeedOnCreep (int lp_playerID, fixed lp_amount);
void gf_Reward_VisionRange (int lp_playerID, fixed lp_amount);
void gf_Reward_BiomassPerKill (int lp_playerID, fixed lp_amount);
void gf_Reward_ExpPerKill (int lp_playerID, fixed lp_amount);
void gf_Reward_StartExp (int lp_playerID, fixed lp_amount);
void gf_Reward_StartExpp2 (int lp_playerID, fixed lp_amount);
void gf_Reward_StartBiomass (int lp_playerID, fixed lp_amount);
void gf_Reward_StartBiomassp2 (int lp_playerID, fixed lp_amount);
void gf_Reward_OverlordSpeed (int lp_playerID, fixed lp_amount);
void gf_Reward_CyberneticsLevel (int lp_playerID);
void gf_Reward_CyberneticsDmg (int lp_playerID, fixed lp_amount);
void gf_Reward_CyberneticsLife (int lp_playerID, fixed lp_amount);
void gf_Reward_HiveArmor (fixed lp_amount);
void gf_Reward_AuraArmor (fixed lp_amount);
void gf_Reward_AuraLifeRegen (fixed lp_amount);
void gf_Reward_AuraEnergyRegen (fixed lp_amount);
void gf_Reward_AuraDmg (fixed lp_amount);
void gf_Reward_AuraAttackSpeed (fixed lp_amountInPercent);
void gf_Reward_AuraTimeScale (fixed lp_amountInPercent);
void gf_Reward_AuraDebuffAtkspd (fixed lp_amountInPercent);
void gf_Reward_AuraEnemyDmg (fixed lp_amount);
void gf_Init_AcvRequirements ();
void gf_AcvCheckAll (int lp_playerID);
void gf_AcvUpdateUIOfPlayer (int lp_playerID);
void gf_AcvReq_Points ();
void gf_AcvPoints_UnlockCheck (int lp_playerID);
void gf_AcvPoints_Rewards (int lp_playerID);
void gf_AcvPoints_UI (int lp_playerID);
void gf_AcvReq_Win_T ();
void gf_Acv_Win_T_UnlockCheck (int lp_playerID);
void gf_Acv_Win_T_Rewards (int lp_playerID);
void gf_Acv_Win_T_UI (int lp_playerID);
void gf_AcvReq_Win_P ();
void gf_Acv_Win_P_UnlockCheck (int lp_playerID);
void gf_Acv_Win_P_Rewards (int lp_playerID);
void gf_Acv_Win_P_UI (int lp_playerID);
void gf_AcvReq_Kills ();
void gf_Acv_Kills_UnlockCheck (int lp_playerID);
void gf_Acv_Kills_Rewards (int lp_playerID);
void gf_Acv_Kills_UI (int lp_playerID);
void gf_KillCounterIncrement (int lp_playerID);
void gf_AcvReq_DiffTimes ();
void gf_AcvReq_DiffSoloDuoTimes ();
void gf_Acv_Diff_Terran_Easy_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Easy_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Easy_UI (int lp_playerID);
void gf_Acv_Diff_Terran_Normal_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Normal_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Normal_UI (int lp_playerID);
void gf_Acv_Diff_Terran_Hard_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Hard_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Hard_UI (int lp_playerID);
void gf_Acv_Diff_Terran_Brutal_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Brutal_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Brutal_UI (int lp_playerID);
void gf_Acv_Diff_Terran_Insane_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Insane_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Insane_UI (int lp_playerID);
void gf_Acv_Diff_Terran_Hardcore_Check (int lp_playerID);
void gf_Acv_Diff_Terran_Hardcore_Rewards (int lp_playerID);
void gf_Acv_Diff_Terran_Hardcore_UI (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Easy_Check (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Easy_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Easy_UI (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Normal_Check (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Normal_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Normal_UI (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hard_Check (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hard_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hard_UI (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Brutal_Check (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Brutal_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Brutal_UI (int lp_playerID);
void gf_Acv_DiffDuo_Terran_Insane_Check (int lp_playerID);
void gf_Acv_DiffDuo_Terran_Insane_Rewards (int lp_playerID);
void gf_Acv_DiffDuo_Terran_Insane_UI (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hardcore_Check (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hardcore_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Terran_Hardcore_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Easy_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Easy_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Easy_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Normal_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Normal_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Normal_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Hard_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Hard_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Hard_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Brutal_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Brutal_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Brutal_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Insane_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Insane_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Insane_UI (int lp_playerID);
void gf_Acv_Diff_Protoss_Hardcore_Check (int lp_playerID);
void gf_Acv_Diff_Protoss_Hardcore_Rewards (int lp_playerID);
void gf_Acv_Diff_Protoss_Hardcore_UI (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Easy_Check (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Easy_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Easy_UI (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Normal_Check (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Normal_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Normal_UI (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hard_Check (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hard_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hard_UI (int lp_playerID);
void gf_Acv_DiffDuo_Protoss_Brutal_Check (int lp_playerID);
void gf_Acv_DiffDuo_Protoss_Brutal_Rewards (int lp_playerID);
void gf_Acv_DiffDuo_Protoss_Brutal_UI (int lp_playerID);
void gf_Acv_DiffTrio_Protoss_Insane_Check (int lp_playerID);
void gf_Acv_DiffTrio_Protoss_Insane_Rewards (int lp_playerID);
void gf_Acv_DiffTrio_Protoss_Insane_UI (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hardcore_Check (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hardcore_Rewards (int lp_playerID);
void gf_Acv_DiffSolo_Protoss_Hardcore_UI (int lp_playerID);
void gf_AcvReq_Scientists ();
void gf_AcvScientists_UnlockCheck (int lp_playerID);
void gf_AcvScientists_Rewards (int lp_playerID);
void gf_AcvScientists_UI (int lp_playerID);
void gf_AcvReq_Essences ();
void gf_AcvEssences_UnlockCheck (int lp_playerID);
void gf_AcvEssences_Rewards (int lp_playerID);
void gf_AcvEssences_UI (int lp_playerID);
void gf_AcvReq_PsiOrbs ();
void gf_AcvPsiOrbs_UnlockCheck (int lp_playerID);
void gf_AcvPsiOrbs_Rewards (int lp_playerID);
void gf_AcvPsiOrbs_UI (int lp_playerID);
void gf_AcvBossKills_Flamer_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_Flamer_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_Flamer_UI (int lp_playerID);
void gf_AcvBossKills_Fortress_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_Fortress_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_Fortress_UI (int lp_playerID);
void gf_AcvBossKills_Hammer_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_Hammer_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_Hammer_UI (int lp_playerID);
void gf_AcvBossKills_Madness_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_Madness_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_Madness_UI (int lp_playerID);
void gf_AcvBossKills_TTThunder_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_TTThunder_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_TTThunder_UI (int lp_playerID);
void gf_AcvBossKills_TTLightning_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_TTLightning_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_TTLightning_UI (int lp_playerID);
void gf_AcvBossKills_Atlantis_UnlockCheck (int lp_playerID);
void gf_AcvBossKills_Atlantis_Rewards (int lp_playerID, int lp_diff);
void gf_AcvBossKills_Atlantis_UI (int lp_playerID);
void gf_Acv_Flawless_T_UnlockCheck (int lp_playerID);
void gf_Acv_Flawless_T_Rewards (int lp_playerID, int lp_diff);
void gf_Acv_Flawless_T_UI (int lp_playerID);
void gf_Acv_Flawless_P_UnlockCheck (int lp_playerID);
void gf_Acv_Flawless_P_Rewards (int lp_playerID, int lp_diff);
void gf_Acv_Flawless_P_UI (int lp_playerID);
void gf_AcvReq_Score ();
void gf_AcvScore_UnlockCheck (int lp_playerID);
void gf_AcvScore_UI (int lp_playerID);
void gf_AcvTutorial_UnlockCheck (int lp_playerID);
void gf_AcvTutorial_UI (int lp_playerID);
void gf_HeroSelect_Finish ();
void gf_HeroSelect_Finish_Triggers_Deactivate ();
void gf_HeroSelect_Finish_Triggers_Activate ();
void gf_HeroSelect_Showcase_SetDiff (int lp_playerID, text lp_diff);
void gf_HeroSelect_Showcase_SetRank (int lp_playerID);
void gf_Init_HeroList ();
void gf_AddHeroInfo (int lp_iD, string lp_icon, text lp_unlockTooltip, text lp_longDescription, text lp_name, string lp_unit);
void gf_Init_HeroSelection ();
int gf_HeroSelect_GetHeroButtonID (int lp_dialogItem);
void gf_HeroSelect_SelectHero (int lp_playerID, int lp_heroID);
int gf_HeroSelect_GetDiffButtonID (int lp_dialogItem);
void gf_UnlockHero (int lp_playerID, int lp_heroID);
void gf_UnlockDiff (int lp_playerID, int lp_diff);
bool gf_isNumber (string lp_string);
int gf_HeroSelect_CustomDiff_GetEditboxID (int lp_dialogItem);
bool gf_HeroSelect_CustomDiff_AllInputsValid ();
int gf_HeroSelect_CustomDiff_GetDiffPresetID (int lp_dialogItem);
void gf_HeroSelect_CustomDiff_DiffPresetSet (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_preset);
int gf_HeroSelect_CustomDiff_DirectRewardDiff ();
void gf_HeroSelect_CustomDiff_HighlightRewardDiff (int lp_diff);
void gf_HeroSelect_CustomDiff_DiffPresetReturn (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_return, int lp_diff);
void gf_HeroSelect_CustomDiff_SetOptions ();
void gf_HeroSelect_CustomDiff_NewHostAfterLeave (int lp_newhost);
void gf_HeroSelect_CustomDiff_CustomPreset_CreateInput (int lp_player);
bool gf_HeroSelect_CustomDiff_CustomPreset_LoadInputandCheck (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_preset);
void gf_Init_CustomDefeatDialog ();
void gf_Init_Tutorialminiintroduction ();
void gf_InitAskTutorial ();
void gf_InitTutorial ();
void gf_TutorialInitDialog ();
void gf_TutorialPause (bool lp_state);
void gf_TutorialShow ();
void gf_TutorialInitCollectibles ();
void gf_TutorialWelcomeMsg ();
void gf_TutorialHero ();
void gf_TutorialOverlord ();
void gf_TutorialHive ();
void gf_TutorialIssueExplore ();
void gf_TutorialFirstAttackWave (unit lp_attackingunit);
void gf_TutorialMoneySkip ();
void gf_TutorialFirstPush ();
void gf_TutorialFirstSpawner (unit lp_spawner);
void gf_TutorialSurvivedWidowMinesUseMutations (unit lp_unit);
void gf_TutorialLarva (unit lp_unit);
void gf_TutorialEssencecollected (unit lp_unit);
void gf_TutorialScientist (unit lp_unit);
void gf_TutorialScientistcaptured (unit lp_unit);
void gf_TutorialBridgeController (unit lp_unit);
void gf_TutorialFortress (unit lp_unit);
void gf_TutorialFinish (unit lp_unit);
void gf_TutorialHeroDies ();
void gf_Init_Objectives ();
void gf_Objectives_Protoss ();
void gf_Init_LeaderbordRanks ();
void gf_Init_Leaderbord ();
void gf_Leaderboard_SetCustomRank (int lp_playerID, text lp_rank);
void gf_Init_SSF_CustomUI ();
void gf_StatsInterface_Update ();
void gf_AcvInterface_SendNotification (int lp_playerID, int lp_page, string lp_acvName);
void gf_Speedruns_UpdateTimeAllForAllPlayers ();
void gf_Speedruns_UpdateTimeTeam (int lp_part, int lp_diff, int lp_player, int lp_timeTeam, bool lp_notification);
void gf_Speedruns_UpdateTimeSolo (int lp_part, int lp_diff, int lp_player, int lp_timeSolo, bool lp_notification);
void gf_Speedruns_Notification (int lp_part, int lp_diff, int lp_player);
int gf_Votekick_GetKickDialogID (int lp_dialogItem);
void gf_Votekick_Reset ();
void gf_OptionsInterface_SetOptions (int lp_playerID);
int gf_OptionsInterface_ControlGroups_GetCheckboxID (int lp_dialogItem);
int gf_OptionsInterface_ControlGroups_GetPulldownID (int lp_dialogItem);
void gf_Init_BuggedModels ();
void gf_HiveUpgrade ();
void gf_GainPoints ();
void gf_TerranWinCheckAcv ();
void gf_ProtossWinCheckAcv ();
void gf_WinEndGame ();
void gf_RemoveActivePlayer (int lp_playerID);
void gf_IncreaseUpgradeCount (fixed lp_increasebase);
void gf_AddExp (unit lp_unit, fixed lp_amount);
void gf_Terran_Exp_KillIncome (string lp_killedUnitType, int lp_enemyType);
fixed gf_Terran_Exp_BaseExpList (string lp_unitType);
void gf_Protoss_Exp_KillIncome (string lp_killedUnitType, int lp_enemyType);
fixed gf_Protoss_Exp_BaseExpList (string lp_unitType);
void gf_Terran_Biomass_KillIncome (string lp_killedUnitType, point lp_positionKilledUnit, int lp_enemyType);
fixed gf_Terran_Biomass_BaseIncomeList (string lp_unitType);
void gf_Protoss_Biomass_KillIncome (string lp_killedUnitType, point lp_positionKilledUnit, int lp_enemyType);
fixed gf_Protoss_Biomass_BaseExpList (string lp_unitType);
void gf_Init_Essences_LarvaSpawns ();
void gf_Init_Essences_LarvaSpawns_Protoss ();
void gf_Init_Scientists ();
void gf_PsiOrbs_Spawn ();
void gf_Init_PartVariables ();
void gf_FillBunkers ();
int gf_Terran_GetEnemyType (string lp_unitType);
void gf_Terran_SpawnerDied (unit lp_dyingBuilding, unit lp_killingUnit);
void gf_Terran_PartTransition ();
void gf_Init_Observer ();
void gf_ObserverHintHandler ();
void gf_ObserverHintShow (unit lp_hintunit, int lp_hint);
string gf_Terran_SpawnsList_UnitType (string lp_spawner);
fixed gf_Terran_SpawnsList_Amount (string lp_spawner);
void gf_Junker_Secend_Open ();
void gf_Junker_Third_Open ();
void gf_BlackOps_Second_Open ();
void gf_BlackOps_Third_Open ();
void gf_Junker_Upgrade_Life (fixed lp_multiplier);
void gf_Junker_Upgrade_Armor (fixed lp_multiplier);
void gf_Junker_Upgrade_Dmg (fixed lp_multiplier);
void gf_BlackOps_Upgrade_Life (fixed lp_multiplier);
void gf_BlackOps_Upgrade_Armor (fixed lp_multiplier);
void gf_BlackOps_Upgrade_Dmg (fixed lp_multiplier);
int gf_Protoss_GetEnemyType (string lp_unitType);
void gf_Protoss_SpawnerDied (unit lp_dyingBuilding, unit lp_killingUnit);
string gf_Protoss_SpawnsList_UnitType (string lp_spawner);
fixed gf_Protoss_SpawnsList_Amount (string lp_spawner);
void gf_Mech_Secend_Open ();
void gf_Psi_Second_Open ();
void gf_Psi_Third_Open ();
void gf_Mix_First_Opener_Check ();
void gf_Mix_First_Open ();
void gf_Mech_Upgrade_LifeShieldArmor (fixed lp_multiplier);
void gf_Mech_Upgrade_Dmg (fixed lp_multiplier);
void gf_Psi_Upgrade_LifeShieldArmor (fixed lp_multiplier);
void gf_Psi_Upgrade_Dmg (fixed lp_multiplier);
void gf_UpgradeVoidMine (fixed lp_multiplier);
void gf_PartProtoss_BossSpawner_Madness_InitVars ();
void gf_MadnessPhaseTransition ();
void gf_MadnessActivateSet (int lp_setID);
void gf_MadnessClearArena ();
int gf_MadnessReturnNotLastSetID ();
void gf_CopyVitals (unit lp_source, unit lp_target);
bool gf_DevPlayer (int lp_playerid);
bool gf_DevCristall (int lp_playerid);
bool gf_DevScythe (int lp_playerid);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInitialization;
trigger gt_BankPeriodicSave;
trigger gt_ManualSave;
trigger gt_HeroSelect_HeroButtonHandler;
trigger gt_HeroSelect_ReadyButtonHandler;
trigger gt_HeroSelect_DiffButtonHandler;
trigger gt_HeroSelect_AutoSelection_ButtonHandler;
trigger gt_HeroSelect_Timer;
trigger gt_HeroSelect_CustomDiff_EditboxEdits;
trigger gt_HeroSelect_CustomDiff_DiffPresetHandler;
trigger gt_HeroSelect_CustomDiff_CustomPreset_CreateButton;
trigger gt_HeroSelect_CustomDiff_CustomPreset_InputChanged;
trigger gt_HeroSelect_CustomDiff_CustomPreset_LoadButton;
trigger gt_CustomDefeatDialog_SpectateButton;
trigger gt_CustomDefeatDialog_LeaveButton;
trigger gt_Tutorial_CloseButtonHandlerminiintoduction;
trigger gt_TutorialAskingYesButton;
trigger gt_TutorialAskingNoButton;
trigger gt_TutorialClose;
trigger gt_Terran_SpawnsTutorialVersion;
trigger gt_TutorialFirstAttackWaveComes;
trigger gt_TutorialAfter2ndAttackWave;
trigger gt_TutorialMoveOut;
trigger gt_TutorialFirstSpawnerNearDead;
trigger gt_TutorialWidowMinesKilled;
trigger gt_TutorialLarvaNear;
trigger gt_Essences_PickupTutorialVersion;
trigger gt_TutorialScientistNear;
trigger gt_Scientists_OverlordCaptureTutorialVersion;
trigger gt_TutorialKilledBrdgeController;
trigger gt_TutorialEntersArena;
trigger gt_TutorialFortressDead;
trigger gt_TutorialHeroDiesIntercept;
trigger gt_PeriodicStatsInterfaceUpdate;
trigger gt_Votekick_KickButtonHandler;
trigger gt_OptionsInterface_HeroSelection_CheckboxHandler;
trigger gt_OptionsInterface_HeroSelection_PulldownHandler;
trigger gt_OptionsInterface_ControlGroups_CheckboxHandler;
trigger gt_OptionsInterface_ControlGroups_PulldownHandler;
trigger gt_HiveDies;
trigger gt_HiveKillsAnything;
trigger gt_KickCheater;
trigger gt_HeroDies;
trigger gt_Leave;
trigger gt_RavagerTaunt;
trigger gt_OverlordCyberneticTrain;
trigger gt_OverlordFlyBackHome;
trigger gt_RavagerDecoy;
trigger gt_UpgradeResearch;
trigger gt_Essences_Pickup;
trigger gt_Scientists_OverlordCapture;
trigger gt_PsiOrbs_Pickup;
trigger gt_Enemy_IdleReset;
trigger gt_Terran_KillTriggerBase;
trigger gt_Terran_PartTransition;
trigger gt_Observer_Stationary;
trigger gt_ObserverDeath;
trigger gt_Terran_Spawns;
trigger gt_Junker_Second_DepotKill;
trigger gt_Junker_Third_DepotKill;
trigger gt_BlackOps_Second_DepotKill;
trigger gt_BlackOps_Third_DepotKill;
trigger gt_PartTerran_Bridge_Flamer;
trigger gt_PartTerran_Bridge_Fortress;
trigger gt_PartTerran_Bridge_Hammer;
trigger gt_PartTerran_BossReturn_Flamer;
trigger gt_PartTerran_BossReturn_Hammer;
trigger gt_PartTerran_BossSpawner_Flamer;
trigger gt_PartTerran_BossDies_Flamer;
trigger gt_PartTerran_BossSpawner_Hammer;
trigger gt_PartTerran_BossDies_Hammer;
trigger gt_PartTerran_BossSpawner_Fortress;
trigger gt_PartTerran_BossDies_Fortress;
trigger gt_Protoss_KillTriggerBase;
trigger gt_Protoss_Spawns;
trigger gt_Protoss_WaypointRemover;
trigger gt_Mech_Second_ObeliskKill;
trigger gt_Psi_Second_ObeliskKill;
trigger gt_Psi_Third_ObeliskKill;
trigger gt_PartProtoss_BossSpawner_Madness;
trigger gt_PartProtoss_BossDies_Madness;
trigger gt_MadnessVitalsMonitor;
trigger gt_MadnessTimer;
trigger gt_PartProtoss_BossSpawner_TagTeam;
trigger gt_PartProtoss_BossDies_TagTeamThunder;
trigger gt_PartProtoss_BossDies_TagTeamLightning;
trigger gt_PartProtoss_BossSpawner_Atlantis;
trigger gt_PartProtoss_BossDies_Atlantis;
trigger gt_AtlantisCoreIllusions;
trigger gt_dancebaby;

//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.5 ===================
//===========================================================
//  by s3rius & TheUltragon
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    out=STARCODE_cut(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    out=STARCODE_cut(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}
void StarcodeStartCode() {
    STARCODE_CurrentCode="0";
}
void StarcodeStoreIntegerValue(int lp_value, int lp_maximumValue) {
    if(lp_value < (lp_maximumValue+1)){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }
    else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}
void StarcodeSetCode (string lp_code) {
    STARCODE_CurrentCode=lp_code;
}
void StarcodeSetEncryptionAlphabet (string lp_string) {
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}
string StarcodeGetCode () {
    return STARCODE_CurrentCode;
}
int StarcodeGetIntegerValue (int lp_maximumValue) {
    int i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return i;
}
string StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}
string StarcodeCompressString (string lp_toCompress) {
    if (StringLength(lp_toCompress)) {
        return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
    }
    else {
        return  lp_toCompress;
    }
}
string StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}
string StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}
bool StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}
string StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}
string StarcodeDecompressString (string lp_toDecompress) {
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Init_activePlayers () {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    const int autoAA288192_ae = 6;
    const int autoAA288192_ai = 1;
    int auto61E7A53A_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_basePlayer, gv_enemyPlayer, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_enemyPlayer, gv_collectiblePlayerEnemyAllied, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_enemyPlayer, gv_collectiblePlayerEnemyNeutral, libNtve_ge_AllianceSetting_Neutral);
    lv_tmpInt = 1;
    for ( ; ( (autoAA288192_ai >= 0 && lv_tmpInt <= autoAA288192_ae) || (autoAA288192_ai < 0 && lv_tmpInt >= autoAA288192_ae) ) ; lv_tmpInt += autoAA288192_ai ) {
        if ((PlayerStatus(lv_tmpInt) == c_playerStatusActive)) {
            libNtve_gf_SetAlliance(lv_tmpInt, gv_collectiblePlayerEnemyAllied, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(lv_tmpInt, gv_collectiblePlayerEnemyNeutral, libNtve_ge_AllianceSetting_Neutral);
            gv_playerStats[lv_tmpInt].lv_active = true;
            PlayerGroupAdd(gv_playerGroup, lv_tmpInt);
            PlayerGroupAdd(gv_startingPlayerGroup, lv_tmpInt);
            libNtve_gf_SetAlliance(lv_tmpInt, gv_enemyPlayer, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(lv_tmpInt, gv_basePlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }

    }
    gv_playerAmount = PlayerGroupCount(gv_playerGroup);
    gv_playerAmountStart = gv_playerAmount;
    PlayerSetColorIndex(gv_enemyPlayer, 13, true);
    PlayerSetColorIndex(gv_collectiblePlayerEnemyNeutral, 15, true);
    libNtve_gf_SetPlayerGroupAlliance(gv_startingPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    auto61E7A53A_val = gv_playerAmount;
    if (auto61E7A53A_val == 1) {
        gv_votekick.lv_votesRequired = 1;
    }
    else if (auto61E7A53A_val == 2) {
        gv_votekick.lv_votesRequired = 2;
    }
    else if (auto61E7A53A_val == 3) {
        gv_votekick.lv_votesRequired = 2;
    }
    else if (auto61E7A53A_val == 4) {
        gv_votekick.lv_votesRequired = 3;
    }
    else if (auto61E7A53A_val == 5) {
        gv_votekick.lv_votesRequired = 3;
    }
    else if (auto61E7A53A_val == 6) {
        gv_votekick.lv_votesRequired = 4;
    }
    else {
        gv_votekick.lv_votesRequired = 4;
    }
}

void gf_InitNotTutorial () {
    // Variable Declarations
    text lv_tmpText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(gv_heroSelection.lv_mainFrame, PlayerGroupAll(), true);
    if ((PlayerGroupCount(gv_newPlayers) != 0)) {
        DialogControlSetVisible(gv_heroSelection.lv_mainFrame, gv_newPlayers, false);
        gf_Init_Tutorialminiintroduction();
    }

}

void gf_Init_TradeMenu () {
    // Automatic Variable Declarations
    // Implementation
    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 1000);
    UISetResourceTradingMinorStep(c_resourceTypeMinerals, 100);
    UISetResourceTradingMajorStep(c_resourceTypeVespene, 2);
    UISetResourceTradingMinorStep(c_resourceTypeVespene, 1);
}

void gf_Set_Difficulty_Variables () {
    // Variable Declarations
    int lv_tmpDiff;

    // Automatic Variable Declarations
    int autoAC945EE3_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(gv_enemyPlayer, "BossAbilityDifficultyRequirement", gv_difficulty);
    autoAC945EE3_val = gv_difficulty;
    if (autoAC945EE3_val == 0) {
        gv_difficultyVariables.lv_points = 1;
        gv_difficultyVariables.lv_spawnMult = 0.5;
        gv_difficultyVariables.lv_expMult = 2.0;
        gv_difficultyVariables.lv_biomassMult = 2.0;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 0;
        gv_difficultyVariables.lv_upgradeCountFactor = 0.5;
        gv_difficultyVariables.lv_psiOrbSpawns = false;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyEasy", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyEasy", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyEasy", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyEasy", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else if (autoAC945EE3_val == 1) {
        gv_difficultyVariables.lv_points = 1;
        gv_difficultyVariables.lv_spawnMult = 0.75;
        gv_difficultyVariables.lv_expMult = 1.75;
        gv_difficultyVariables.lv_biomassMult = 1.5;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 1;
        gv_difficultyVariables.lv_upgradeCountFactor = 0.6;
        gv_difficultyVariables.lv_psiOrbSpawns = false;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyNormal", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyNormal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyNormal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyNormal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else if (autoAC945EE3_val == 2) {
        gv_difficultyVariables.lv_points = 2;
        gv_difficultyVariables.lv_spawnMult = 1.0;
        gv_difficultyVariables.lv_expMult = 1.5;
        gv_difficultyVariables.lv_biomassMult = 1.3;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 1;
        gv_difficultyVariables.lv_upgradeCountFactor = 0.7;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHard", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHard", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHard", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHard", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else if (autoAC945EE3_val == 3) {
        gv_difficultyVariables.lv_points = 3;
        gv_difficultyVariables.lv_spawnMult = 1.25;
        gv_difficultyVariables.lv_expMult = 1.25;
        gv_difficultyVariables.lv_biomassMult = 1.2;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 2;
        gv_difficultyVariables.lv_upgradeCountFactor = 0.8;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyBrutal", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyBrutal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyBrutal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyBrutal", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else if (autoAC945EE3_val == 4) {
        gv_difficultyVariables.lv_points = 5;
        gv_difficultyVariables.lv_spawnMult = 1.5;
        gv_difficultyVariables.lv_expMult = 1.1;
        gv_difficultyVariables.lv_biomassMult = 1.1;
        gv_difficultyVariables.lv_scientistsAmount = 2;
        gv_difficultyVariables.lv_essenceAmount = 3;
        gv_difficultyVariables.lv_upgradeCountFactor = 0.9;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyInsane", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyInsane", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyInsane", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyInsane", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else if (autoAC945EE3_val == 5) {
        gv_difficultyVariables.lv_points = 8;
        gv_difficultyVariables.lv_spawnMult = 1.6;
        gv_difficultyVariables.lv_expMult = 1.0;
        gv_difficultyVariables.lv_biomassMult = 1.0;
        gv_difficultyVariables.lv_scientistsAmount = 2;
        gv_difficultyVariables.lv_essenceAmount = 5;
        gv_difficultyVariables.lv_upgradeCountFactor = 1.0;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
        CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHardcore", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHardcore", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHardcore", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyHardcore", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    }
    else {
    }
}

void gf_BankStorageReset () {
    // Automatic Variable Declarations
    // Implementation
    gv_bankStorageString = "";
    gv_bankStorageErrorCheck = false;
}

void gf_BankStorageSet (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    gv_bankStorageString = lp_string;
    gv_bankStorageErrorCheck = false;
}

void gf_BankStorageAddInt (int lp_value) {
    // Variable Declarations
    string lv_value_string;
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value_string = IntToString(lp_value);
    lv_length = StringLength(lv_value_string);

    // Implementation
    if ((lp_value >= 0)) {
        if ((lv_length > 10)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Value too big."));
            gv_bankStorageErrorCheck = true;
            gv_bankStorageString = (gv_bankStorageString + "9" + "999999999");
        }
        else {
            gv_bankStorageString = (gv_bankStorageString + IntToString(lv_length) + lv_value_string);
        }
    }
    else {
        gv_bankStorageErrorCheck = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Value invalid."));
    }
}

void gf_BankStorageAddBool (bool lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == true)) {
        gv_bankStorageString = (gv_bankStorageString + "1");
    }
    else {
        gv_bankStorageString = (gv_bankStorageString + "0");
    }
}

int gf_BankStorageRetrieveInt () {
    // Variable Declarations
    string lv_tmpString;
    int lv_length;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tmpString = "";

    // Implementation
    if ((gv_bankStorageString != "")) {
        lv_tmpString = StringSub(gv_bankStorageString, 1, 1);
        lv_length = StringToInt(lv_tmpString);
        if ((lv_length == 0)) {
            gv_bankStorageErrorCheck = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Wrong Length (too small)."));
            return 0;
        }
        else {
            if (((lv_length + 1) > StringLength(gv_bankStorageString))) {
                gv_bankStorageErrorCheck = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Wrong Length (too long)."));
                return 0;
            }

            lv_tmpString = StringSub(gv_bankStorageString, 2, (1 + lv_length));
            gv_bankStorageString = StringSub(gv_bankStorageString, (2 + lv_length), StringLength(gv_bankStorageString));
            return StringToInt(lv_tmpString);
        }
    }
    else {
        gv_bankStorageErrorCheck = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Empty."));
        return 0;
    }
}

bool gf_BankStorageRetrieveBool () {
    // Variable Declarations
    string lv_tmpString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tmpString = "";

    // Implementation
    if ((gv_bankStorageString != "")) {
        lv_tmpString = StringSub(gv_bankStorageString, 1, 1);
        gv_bankStorageString = StringSub(gv_bankStorageString, 2, StringLength(gv_bankStorageString));
        if ((lv_tmpString == "0")) {
            return false;
        }
        else {
            if ((lv_tmpString == "1")) {
                return true;
            }
            else {
                gv_bankStorageErrorCheck = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Expected Bool."));
                return false;
            }
        }
    }
    else {
        gv_bankStorageErrorCheck = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringToText("Bank Storage Error! Empty."));
        return false;
    }
}

string gf_BankStorageGetString () {
    // Automatic Variable Declarations
    // Implementation
    return gv_bankStorageString;
}

bool gf_BankStorageCheckError () {
    // Automatic Variable Declarations
    // Implementation
    return gv_bankStorageErrorCheck;
}

bool gf_LoadSuccessful_Switch (int lp_playerID) {
    // Automatic Variable Declarations
    fixed autoE8D8A15B_val;

    // Implementation
    autoE8D8A15B_val = BankValueGetAsFixed(gv_playerStats[lp_playerID].lv_bankfile, "stats", "version");
    if (autoE8D8A15B_val == 0.1) {
        return gf_Load_v04(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.3) {
        return gf_Load_v04(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.4) {
        return gf_Load_v04(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.8) {
        return gf_Load_v08(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.9) {
        return gf_Load_v09(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.15) {
        return gf_Load_v015(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.18) {
        return gf_Load_v018(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.38) {
        return gf_Load_v038(lp_playerID);
    }
    else if (autoE8D8A15B_val == 0.41) {
        return gf_Load_v041(lp_playerID);
    }
    else if (autoE8D8A15B_val == 1.0) {
        return gf_Load_v100(lp_playerID);
    }
    else if (autoE8D8A15B_val == 1.06) {
        return gf_Load_v106(lp_playerID);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Test Version Loading"));
        return gf_Load_Test(lp_playerID);
    }
}

bool gf_Load_v04 (int lp_playerID) {
    // Variable Declarations
    string lv_tempString;
    int lv_tmpInt;
    const int lv_updateMaxAmountAcv = 27;
    int[lv_updateMaxAmountAcv + 1] lv_updateAcvUnlocks;

    // Automatic Variable Declarations
    const int auto65C7B755_ae = 0;
    const int auto65C7B755_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_tempString = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    if ((StarcodeValidateString(lv_tempString, gv_hashSecurityLevel) == true)) {
        lv_tempString = StarcodeRemoveHashfromString(lv_tempString, gv_hashSecurityLevel);
        lv_tempString = StarcodeDecryptString(lv_tempString, gv_encryptKey);
        lv_tempString = StarcodeDecompressString(lv_tempString);
        StarcodeSetCode(lv_tempString);
        lv_tmpInt = (lv_updateMaxAmountAcv - 1);
        for ( ; ( (auto65C7B755_ai >= 0 && lv_tmpInt <= auto65C7B755_ae) || (auto65C7B755_ai < 0 && lv_tmpInt >= auto65C7B755_ae) ) ; lv_tmpInt += auto65C7B755_ai ) {
            lv_updateAcvUnlocks[lv_tmpInt] = StarcodeGetIntegerValue(50);
        }
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v08 (int lp_playerID) {
    // Variable Declarations
    string lv_tempString;
    int lv_tmpInt;

    // Automatic Variable Declarations
    const int autoC5B87528_ae = 0;
    const int autoC5B87528_ai = -1;
    const int autoC7DCF357_ae = 0;
    const int autoC7DCF357_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_tempString = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_tempString = StarcodeDecryptString(lv_tempString, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_tempString, gv_hashSecurityLevel) == true)) {
        lv_tempString = StarcodeRemoveHashfromString(lv_tempString, gv_hashSecurityLevel);
        lv_tempString = StarcodeDecompressString(lv_tempString);
        StarcodeSetCode(lv_tempString);
        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (autoC5B87528_ai >= 0 && lv_tmpInt <= autoC5B87528_ae) || (autoC5B87528_ai < 0 && lv_tmpInt >= autoC5B87528_ae) ) ; lv_tmpInt += autoC5B87528_ai ) {
            gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
        }
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (autoC7DCF357_ai >= 0 && lv_tmpInt <= autoC7DCF357_ae) || (autoC7DCF357_ai < 0 && lv_tmpInt >= autoC7DCF357_ae) ) ; lv_tmpInt += autoC7DCF357_ai ) {
            gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
        }
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        gv_playerStats[lp_playerID].lv_difficultyTime[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[5][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[5][0] = 0;
        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v09 (int lp_playerID) {
    // Variable Declarations
    string lv_tempString;
    int lv_tmpInt;
    bool lv_tmpbool;

    // Automatic Variable Declarations
    const int auto6EB43FD2_ae = 0;
    const int auto6EB43FD2_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_tempString = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_tempString = StarcodeDecryptString(lv_tempString, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_tempString, gv_hashSecurityLevel) == true)) {
        lv_tempString = StarcodeRemoveHashfromString(lv_tempString, gv_hashSecurityLevel);
        lv_tempString = StarcodeDecompressString(lv_tempString);
        StarcodeSetCode(lv_tempString);
        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (auto6EB43FD2_ai >= 0 && lv_tmpInt <= auto6EB43FD2_ae) || (auto6EB43FD2_ai < 0 && lv_tmpInt >= auto6EB43FD2_ae) ) ; lv_tmpInt += auto6EB43FD2_ai ) {
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
            gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
        }
        lv_tmpInt = StarcodeGetIntegerValue(123456789);
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        gv_playerStats[lp_playerID].lv_difficultyTime[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[5][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[5][0] = 0;
        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v015 (int lp_playerID) {
    // Variable Declarations
    string lv_tempString;
    int lv_tmpInt;
    bool lv_tmpbool;

    // Automatic Variable Declarations
    const int autoF85D4B77_ae = 0;
    const int autoF85D4B77_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_tempString = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_tempString = StarcodeDecryptString(lv_tempString, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_tempString, gv_hashSecurityLevel) == true)) {
        lv_tempString = StarcodeRemoveHashfromString(lv_tempString, gv_hashSecurityLevel);
        lv_tempString = StarcodeDecompressString(lv_tempString);
        StarcodeSetCode(lv_tempString);
        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (autoF85D4B77_ai >= 0 && lv_tmpInt <= autoF85D4B77_ae) || (autoF85D4B77_ai < 0 && lv_tmpInt >= autoF85D4B77_ae) ) ; lv_tmpInt += autoF85D4B77_ai ) {
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
            gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
        }
        lv_tmpInt = StarcodeGetIntegerValue(123456789);
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        lv_tmpbool = (StarcodeGetIntegerValue(5) == 1);
        lv_tmpInt = StarcodeGetIntegerValue(100);
        if ((lv_tmpbool == true)) {
            gf_HeroSelect_SelectHero(lp_playerID, lv_tmpInt);
        }

        gv_playerStats[lp_playerID].lv_difficultyTime[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTime[5][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[0][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[1][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[2][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[3][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[4][0] = 0;
        gv_playerStats[lp_playerID].lv_difficultyTimeSolo[5][0] = 0;
        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v018 (int lp_playerID) {
    // Variable Declarations
    string lv_tempString;
    int lv_tmpInt;
    bool lv_tmpbool;

    // Automatic Variable Declarations
    const int autoC4828DED_ae = 0;
    const int autoC4828DED_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_tempString = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_tempString = StarcodeDecryptString(lv_tempString, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_tempString, gv_hashSecurityLevel) == true)) {
        lv_tempString = StarcodeRemoveHashfromString(lv_tempString, gv_hashSecurityLevel);
        lv_tempString = StarcodeDecompressString(lv_tempString);
        StarcodeSetCode(lv_tempString);
        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (autoC4828DED_ai >= 0 && lv_tmpInt <= autoC4828DED_ae) || (autoC4828DED_ai < 0 && lv_tmpInt >= autoC4828DED_ae) ) ; lv_tmpInt += autoC4828DED_ai ) {
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
            gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][0] = StarcodeGetIntegerValue(gv_gameTimeMax);
        }
        lv_tmpInt = StarcodeGetIntegerValue(123456789);
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        lv_tmpbool = (StarcodeGetIntegerValue(5) == 1);
        lv_tmpInt = StarcodeGetIntegerValue(100);
        if ((lv_tmpbool == true)) {
            gf_HeroSelect_SelectHero(lp_playerID, lv_tmpInt);
        }

        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v038 (int lp_playerID) {
    // Variable Declarations
    string lv_stats;
    string lv_options;
    int lv_tmpInt;
    int lv_tmpInt2;
    bool lv_tmpbool;
    const fixed lv_version = 0.38;

    // Automatic Variable Declarations
    const int auto081DBAA4_ae = 0;
    const int auto081DBAA4_ai = -1;
    const int auto9ECFFCA5_ae = 0;
    const int auto9ECFFCA5_ai = -1;
    const int auto578D1EAF_ae = 0;
    const int auto578D1EAF_ai = -1;

    // Variable Initialization
    lv_stats = "";
    lv_options = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_stats = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_stats = StarcodeDecryptString(lv_stats, (PlayerHandle(lp_playerID) + gv_encryptKey));
    lv_options = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "options", "data");
    lv_options = StarcodeDecryptString(lv_options, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_stats, gv_hashSecurityLevel) == true) && (StarcodeValidateString(lv_options, gv_hashSecurityLevel) == true)) {
        lv_stats = StarcodeRemoveHashfromString(lv_stats, gv_hashSecurityLevel);
        lv_stats = StarcodeDecompressString(lv_stats);
        StarcodeSetCode(lv_stats);
        lv_tmpInt = StarcodeGetIntegerValue(100000);
        if ((lv_tmpInt != CeilingI((lv_version * 1000.0)))) {
            return false;
        }

        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_maxAmountDifficulties - 1);
        for ( ; ( (auto081DBAA4_ai >= 0 && lv_tmpInt <= auto081DBAA4_ae) || (auto081DBAA4_ai < 0 && lv_tmpInt >= auto081DBAA4_ae) ) ; lv_tmpInt += auto081DBAA4_ai ) {
            gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = (StarcodeGetIntegerValue(5) == 1);
            lv_tmpInt2 = 1;
            for ( ; ( (auto9ECFFCA5_ai >= 0 && lv_tmpInt2 <= auto9ECFFCA5_ae) || (auto9ECFFCA5_ai < 0 && lv_tmpInt2 >= auto9ECFFCA5_ae) ) ; lv_tmpInt2 += auto9ECFFCA5_ai ) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = StarcodeGetIntegerValue(gv_gameTimeMax);
                gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = StarcodeGetIntegerValue(gv_gameTimeMax);
            }
        }
        gv_playerStats[lp_playerID].lv_winsProtoss = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_psiOrbs = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_essences = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_scientists = StarcodeGetIntegerValue(123456);
        gv_playerStats[lp_playerID].lv_winsTerran = StarcodeGetIntegerValue(12345);
        gv_playerStats[lp_playerID].lv_points = StarcodeGetIntegerValue(1234567);
        gv_playerStats[lp_playerID].lv_kills = StarcodeGetIntegerValue(100000000);
        lv_options = StarcodeRemoveHashfromString(lv_options, gv_hashSecurityLevel);
        lv_options = StarcodeDecompressString(lv_options);
        StarcodeSetCode(lv_options);
        lv_tmpInt = StarcodeGetIntegerValue(500);
        lv_tmpInt = (gv_options_ControlGroup_Amount - 1);
        for ( ; ( (auto578D1EAF_ai >= 0 && lv_tmpInt <= auto578D1EAF_ae) || (auto578D1EAF_ai < 0 && lv_tmpInt >= auto578D1EAF_ae) ) ; lv_tmpInt += auto578D1EAF_ai ) {
            gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = StarcodeGetIntegerValue(10);
            gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = (StarcodeGetIntegerValue(5) == 1);
        }
        gv_options.lv_heroSelection_Flag[lp_playerID] = (StarcodeGetIntegerValue(5) == 1);
        gv_options.lv_heroSelection_Hero[lp_playerID] = StarcodeGetIntegerValue(100);
        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v041 (int lp_playerID) {
    // Variable Declarations
    string lv_stats;
    string lv_options;
    int lv_tmpInt;
    int lv_tmpInt2;
    bool lv_tmpbool;
    const fixed lv_version = 0.41;

    // Automatic Variable Declarations
    int auto103B1E35_ae;
    const int auto103B1E35_ai = 1;
    int auto0EE97FD6_ae;
    const int auto0EE97FD6_ai = 1;
    int auto1C90727B_ae;
    const int auto1C90727B_ai = 1;

    // Variable Initialization
    lv_stats = "";
    lv_options = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_stats = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_stats = StarcodeDecryptString(lv_stats, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_stats, gv_hashSecurityLevel) == true)) {
        lv_stats = StarcodeRemoveHashfromString(lv_stats, gv_hashSecurityLevel);
        lv_stats = StarcodeDecompressString(lv_stats);
        gf_BankStorageSet(lv_stats);
        gv_playerStats[lp_playerID].lv_kills = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_points = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsTerran = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_scientists = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_essences = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_psiOrbs = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsProtoss = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_tutorialCompleted = gf_BankStorageRetrieveBool();
        auto103B1E35_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto103B1E35_ai >= 0 && lv_tmpInt <= auto103B1E35_ae) || (auto103B1E35_ai < 0 && lv_tmpInt >= auto103B1E35_ae) ) ; lv_tmpInt += auto103B1E35_ai ) {
            auto0EE97FD6_ae = (gv_maxAmountParts - 1);
            lv_tmpInt2 = 0;
            for ( ; ( (auto0EE97FD6_ai >= 0 && lv_tmpInt2 <= auto0EE97FD6_ae) || (auto0EE97FD6_ai < 0 && lv_tmpInt2 >= auto0EE97FD6_ae) ) ; lv_tmpInt2 += auto0EE97FD6_ai ) {
                gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
                gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
            }
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = gf_BankStorageRetrieveBool();
        }
        lv_tmpInt = gf_BankStorageRetrieveInt();
        lv_tmpInt = gf_BankStorageRetrieveInt();
        if ((gf_BankStorageCheckError() || (lv_tmpInt != CeilingI((lv_version * 1000.0))))) {
            return false;
        }

        lv_options = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "options");
        gf_BankStorageSet(lv_options);
        gv_options.lv_heroSelection_Flag[lp_playerID] = gf_BankStorageRetrieveBool();
        gv_options.lv_heroSelection_Hero[lp_playerID] = gf_BankStorageRetrieveInt();
        auto1C90727B_ae = (gv_options_ControlGroup_Amount - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto1C90727B_ai >= 0 && lv_tmpInt <= auto1C90727B_ae) || (auto1C90727B_ai < 0 && lv_tmpInt >= auto1C90727B_ae) ) ; lv_tmpInt += auto1C90727B_ai ) {
            gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveBool();
            gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveInt();
        }
        if (gf_BankStorageCheckError()) {
            return false;
        }

        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v100 (int lp_playerID) {
    // Variable Declarations
    string lv_stats;
    string lv_options;
    int lv_tmpInt;
    int lv_tmpInt2;
    bool lv_tmpbool;
    const fixed lv_version = 1.0;

    // Automatic Variable Declarations
    int autoADD3D2C3_ae;
    const int autoADD3D2C3_ai = 1;
    int auto509DBBBF_ae;
    const int auto509DBBBF_ai = 1;
    int autoF67F481E_ae;
    const int autoF67F481E_ai = 1;

    // Variable Initialization
    lv_stats = "";
    lv_options = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_stats = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_stats = StarcodeDecryptString(lv_stats, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_stats, gv_hashSecurityLevel) == true)) {
        lv_stats = StarcodeRemoveHashfromString(lv_stats, gv_hashSecurityLevel);
        lv_stats = StarcodeDecompressString(lv_stats);
        gf_BankStorageSet(lv_stats);
        gv_playerStats[lp_playerID].lv_kills = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_points = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsTerran = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_scientists = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_essences = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_psiOrbs = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsProtoss = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_tutorialCompleted = gf_BankStorageRetrieveBool();
        autoADD3D2C3_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (autoADD3D2C3_ai >= 0 && lv_tmpInt <= autoADD3D2C3_ae) || (autoADD3D2C3_ai < 0 && lv_tmpInt >= autoADD3D2C3_ae) ) ; lv_tmpInt += autoADD3D2C3_ai ) {
            auto509DBBBF_ae = (gv_maxAmountParts - 1);
            lv_tmpInt2 = 0;
            for ( ; ( (auto509DBBBF_ai >= 0 && lv_tmpInt2 <= auto509DBBBF_ae) || (auto509DBBBF_ai < 0 && lv_tmpInt2 >= auto509DBBBF_ae) ) ; lv_tmpInt2 += auto509DBBBF_ai ) {
                gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
                gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
            }
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = gf_BankStorageRetrieveBool();
        }
        lv_tmpInt = gf_BankStorageRetrieveInt();
        lv_tmpInt = gf_BankStorageRetrieveInt();
        if ((gf_BankStorageCheckError() || (lv_tmpInt != CeilingI((lv_version * 1000.0))))) {
            return false;
        }

        lv_options = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "options");
        gf_BankStorageSet(lv_options);
        gv_options.lv_heroSelection_Flag[lp_playerID] = gf_BankStorageRetrieveBool();
        gv_options.lv_heroSelection_Hero[lp_playerID] = gf_BankStorageRetrieveInt();
        autoF67F481E_ae = (gv_options_ControlGroup_Amount - 1);
        lv_tmpInt = 0;
        for ( ; ( (autoF67F481E_ai >= 0 && lv_tmpInt <= autoF67F481E_ae) || (autoF67F481E_ai < 0 && lv_tmpInt >= autoF67F481E_ae) ) ; lv_tmpInt += autoF67F481E_ai ) {
            gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveBool();
            gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveInt();
        }
        if (gf_BankStorageCheckError()) {
            return false;
        }

        return true;
    }
    else {
        return false;
    }
}

bool gf_Load_v106 (int lp_playerID) {
    // Variable Declarations
    string lv_stats;
    string lv_options;
    int lv_tmpInt;
    int lv_tmpInt2;
    bool lv_tmpbool;
    const fixed lv_version = 1.06;

    // Automatic Variable Declarations
    int auto110038EC_ae;
    const int auto110038EC_ai = 1;
    int autoD32AC75C_ae;
    const int autoD32AC75C_ai = 1;
    int auto1E4F002D_ae;
    const int auto1E4F002D_ai = 1;

    // Variable Initialization
    lv_stats = "";
    lv_options = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_stats = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_stats = StarcodeDecryptString(lv_stats, (PlayerHandle(lp_playerID) + gv_encryptKey));
    if ((StarcodeValidateString(lv_stats, gv_hashSecurityLevel) == true)) {
        lv_stats = StarcodeRemoveHashfromString(lv_stats, gv_hashSecurityLevel);
        lv_stats = StarcodeDecompressString(lv_stats);
        gf_BankStorageSet(lv_stats);
        gv_playerStats[lp_playerID].lv_kills = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_points = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsTerran = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_scientists = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_essences = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_psiOrbs = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsProtoss = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_tutorialCompleted = gf_BankStorageRetrieveBool();
        auto110038EC_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto110038EC_ai >= 0 && lv_tmpInt <= auto110038EC_ae) || (auto110038EC_ai < 0 && lv_tmpInt >= auto110038EC_ae) ) ; lv_tmpInt += auto110038EC_ai ) {
            autoD32AC75C_ae = (gv_maxAmountParts - 1);
            lv_tmpInt2 = 0;
            for ( ; ( (autoD32AC75C_ai >= 0 && lv_tmpInt2 <= autoD32AC75C_ae) || (autoD32AC75C_ai < 0 && lv_tmpInt2 >= autoD32AC75C_ae) ) ; lv_tmpInt2 += autoD32AC75C_ai ) {
                gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
                gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
            }
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = gf_BankStorageRetrieveBool();
        }
        lv_tmpInt = gf_BankStorageRetrieveInt();
        lv_tmpInt = gf_BankStorageRetrieveInt();
        if ((gf_BankStorageCheckError() || (lv_tmpInt != CeilingI((lv_version * 1000.0))))) {
            return false;
        }

        lv_options = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "options");
        gf_BankStorageSet(lv_options);
        gv_options.lv_heroSelection_Flag[lp_playerID] = gf_BankStorageRetrieveBool();
        gv_options.lv_heroSelection_Hero[lp_playerID] = gf_BankStorageRetrieveInt();
        auto1E4F002D_ae = (gv_options_ControlGroup_Amount - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto1E4F002D_ai >= 0 && lv_tmpInt <= auto1E4F002D_ae) || (auto1E4F002D_ai < 0 && lv_tmpInt >= auto1E4F002D_ae) ) ; lv_tmpInt += auto1E4F002D_ai ) {
            gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveBool();
            gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveInt();
        }
        if (gf_BankStorageCheckError()) {
            return false;
        }

        return true;
    }
    else {
        return false;
    }
}

void gf_Init_Bankfile () {
    // Variable Declarations
    int lv_tmpPlayer;
    bool lv_load_successful;
    fixed lv_version_load;

    // Automatic Variable Declarations
    playergroup auto73341369_g;

    // Variable Initialization

    // Implementation

    auto73341369_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(auto73341369_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        if ((BankExists("SwarmSpecialForces", lv_tmpPlayer) == true)) {
            BankLoad("SwarmSpecialForces", lv_tmpPlayer);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
            if (gf_LoadSuccessful_Switch(lv_tmpPlayer)) {
                if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                    BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                }

                UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/MainSuccess"));
                BankLoad("SwarmSpecialForcesBackup", lv_tmpPlayer);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                    BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                }

                gf_Save(lv_tmpPlayer);
                gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
            }
            else {
                if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                    BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                }

                UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/MainFail"));
                BankLoad("SwarmSpecialForcesBackup", lv_tmpPlayer);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                if (gf_LoadSuccessful_Switch(lv_tmpPlayer)) {
                    if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                        BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                    }

                    BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                    gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                    UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/BackupSuccess"));
                    gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                    gf_Save(lv_tmpPlayer);
                }
                else {
                    if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                        BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                    }

                    BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                    gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                    UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/BackupFail"));
                    gf_ResetStats(lv_tmpPlayer);
                }
            }
        }
        else {
            if ((BankExists("SwarmSpecialForcesBackup", lv_tmpPlayer) == true)) {
                UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaSubtitle, StringExternal("Trig/Bank/NoMainButBackup"));
                BankLoad("SwarmSpecialForcesBackup", lv_tmpPlayer);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                if (gf_LoadSuccessful_Switch(lv_tmpPlayer)) {
                    if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                        BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                    }

                    BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                    gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                    UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/NoMainButBackupSuccess"));
                    gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                    gf_Save(lv_tmpPlayer);
                }
                else {
                    if ((BankSectionExists(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options") == true)) {
                        BankSectionRemove(gv_playerStats[lv_tmpPlayer].lv_bankfile, "options");
                    }

                    BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                    gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                    UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, StringExternal("Trig/Bank/BackupFail"));
                    gf_ResetStats(lv_tmpPlayer);
                }
            }
            else {
                if ((gv_gameMode != "Tutorial")) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bank/NewPlayer"));
                }

                PlayerGroupAdd(gv_newPlayers, lv_tmpPlayer);
                BankLoad("SwarmSpecialForcesBackup", lv_tmpPlayer);
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                gf_Save(lv_tmpPlayer);
                BankLoad("SwarmSpecialForces", lv_tmpPlayer);
                gv_playerStats[lv_tmpPlayer].lv_bankfile = BankLastCreated();
                BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                gv_options.lv_saveFlag[lv_tmpPlayer] = true;
                gf_Save(lv_tmpPlayer);
            }
        }
        gf_UnlockHero(lv_tmpPlayer, 0);
        gf_AcvCheckAll(lv_tmpPlayer);
        gf_OptionsInterface_SetOptions(lv_tmpPlayer);
        if ((gv_options.lv_heroSelection_Flag[lv_tmpPlayer] == true)) {
            gf_HeroSelect_SelectHero(lv_tmpPlayer, gv_options.lv_heroSelection_Hero[lv_tmpPlayer]);
        }

    }
    gf_Speedruns_UpdateTimeAllForAllPlayers();
}

bool gf_Load_Test (int lp_playerID) {
    // Variable Declarations
    string lv_stats;
    string lv_options;
    int lv_tmpInt;
    int lv_tmpInt2;
    bool lv_tmpbool;
    const fixed lv_version = 1.0;

    // Automatic Variable Declarations
    int auto65F64D93_ae;
    const int auto65F64D93_ai = 1;
    int auto9BAB3FDF_ae;
    const int auto9BAB3FDF_ai = 1;
    int auto3A707CE1_ae;
    const int auto3A707CE1_ai = 1;

    // Variable Initialization
    lv_stats = "";
    lv_options = "";

    // Implementation
    if ((BankVerify(gv_playerStats[lp_playerID].lv_bankfile) == false)) {
        return false;
    }

    lv_stats = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data");
    lv_stats = StarcodeDecryptString(lv_stats, (PlayerHandle(lp_playerID) + gv_encryptKey));
    lv_options = BankValueGetAsString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "options");
    if ((StarcodeValidateString(lv_stats, gv_hashSecurityLevel) == true)) {
        lv_stats = StarcodeRemoveHashfromString(lv_stats, gv_hashSecurityLevel);
        lv_stats = StarcodeDecompressString(lv_stats);
        gf_BankStorageSet(lv_stats);
        gv_playerStats[lp_playerID].lv_kills = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_points = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsTerran = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_scientists = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_essences = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_psiOrbs = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_winsProtoss = gf_BankStorageRetrieveInt();
        gv_playerStats[lp_playerID].lv_tutorialCompleted = gf_BankStorageRetrieveBool();
        auto65F64D93_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto65F64D93_ai >= 0 && lv_tmpInt <= auto65F64D93_ae) || (auto65F64D93_ai < 0 && lv_tmpInt >= auto65F64D93_ae) ) ; lv_tmpInt += auto65F64D93_ai ) {
            auto9BAB3FDF_ae = (gv_maxAmountParts - 1);
            lv_tmpInt2 = 0;
            for ( ; ( (auto9BAB3FDF_ai >= 0 && lv_tmpInt2 <= auto9BAB3FDF_ae) || (auto9BAB3FDF_ai < 0 && lv_tmpInt2 >= auto9BAB3FDF_ae) ) ; lv_tmpInt2 += auto9BAB3FDF_ai ) {
                gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
                gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = gf_BankStorageRetrieveInt();
            }
            gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = gf_BankStorageRetrieveBool();
            gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = gf_BankStorageRetrieveBool();
        }
        lv_tmpInt = gf_BankStorageRetrieveInt();
        lv_tmpInt = gf_BankStorageRetrieveInt();
        if ((gf_BankStorageCheckError() || (lv_tmpInt != CeilingI((lv_version * 1000.0))))) {
            return false;
        }

        gf_BankStorageSet(lv_options);
        gv_options.lv_heroSelection_Flag[lp_playerID] = gf_BankStorageRetrieveBool();
        gv_options.lv_heroSelection_Hero[lp_playerID] = gf_BankStorageRetrieveInt();
        auto3A707CE1_ae = (gv_options_ControlGroup_Amount - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto3A707CE1_ai >= 0 && lv_tmpInt <= auto3A707CE1_ae) || (auto3A707CE1_ai < 0 && lv_tmpInt >= auto3A707CE1_ae) ) ; lv_tmpInt += auto3A707CE1_ai ) {
            gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveBool();
            gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = gf_BankStorageRetrieveInt();
        }
        if (gf_BankStorageCheckError()) {
            return false;
        }

        return true;
    }
    else {
        return false;
    }
}

void gf_Save (int lp_playerID) {
    // Variable Declarations
    int lv_tmpInt;
    int lv_tmpInt2;
    int lv_versionInt;

    // Automatic Variable Declarations
    int auto478BEF85_ae;
    const int auto478BEF85_ai = 1;
    int auto5FD69651_ae;
    const int auto5FD69651_ai = 1;

    // Variable Initialization
    lv_versionInt = CeilingI((gv_version * 1000.0));

    // Implementation
    BankValueSetFromFixed(gv_playerStats[lp_playerID].lv_bankfile, "stats", "version", gv_version);
    gf_BankStorageReset();
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_kills);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_points);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_winsTerran);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_scientists);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_essences);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_psiOrbs);
    gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_winsProtoss);
    gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_tutorialCompleted);
    auto478BEF85_ae = (gv_maxAmountDifficulties - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto478BEF85_ai >= 0 && lv_tmpInt <= auto478BEF85_ae) || (auto478BEF85_ai < 0 && lv_tmpInt >= auto478BEF85_ae) ) ; lv_tmpInt += auto478BEF85_ai ) {
        auto5FD69651_ae = (gv_maxAmountParts - 1);
        lv_tmpInt2 = 0;
        for ( ; ( (auto5FD69651_ai >= 0 && lv_tmpInt2 <= auto5FD69651_ae) || (auto5FD69651_ai < 0 && lv_tmpInt2 >= auto5FD69651_ae) ) ; lv_tmpInt2 += auto5FD69651_ai ) {
            gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2]);
            gf_BankStorageAddInt(gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2]);
        }
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]);
        gf_BankStorageAddBool(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]);
    }
    gf_BankStorageAddInt(RandomInt(0, 500));
    gf_BankStorageAddInt(lv_versionInt);
    if (gf_BankStorageCheckError()) {
        return ;
    }

    BankValueSetFromString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "data", StarcodeEncryptString(StarcodeHashString(StarcodeCompressString(gf_BankStorageGetString()), gv_hashSecurityLevel), (PlayerHandle(lp_playerID) + gv_encryptKey)));
    BankSave(gv_playerStats[lp_playerID].lv_bankfile);
    if ((gv_options.lv_saveFlag[lp_playerID] == true)) {
        gv_options.lv_saveFlag[lp_playerID] = false;
        gf_Save_Options(lp_playerID);
    }

}

void gf_Save_Options (int lp_playerID) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int autoF70C95F2_ae;
    const int autoF70C95F2_ai = 1;

    // Variable Initialization

    // Implementation
    gf_BankStorageReset();
    gf_BankStorageAddBool(gv_options.lv_heroSelection_Flag[lp_playerID]);
    gf_BankStorageAddInt(gv_options.lv_heroSelection_Hero[lp_playerID]);
    autoF70C95F2_ae = (gv_options_ControlGroup_Amount - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoF70C95F2_ai >= 0 && lv_tmpInt <= autoF70C95F2_ae) || (autoF70C95F2_ai < 0 && lv_tmpInt >= autoF70C95F2_ae) ) ; lv_tmpInt += autoF70C95F2_ai ) {
        gf_BankStorageAddBool(gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID]);
        gf_BankStorageAddInt(gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID]);
    }
    BankValueSetFromString(gv_playerStats[lp_playerID].lv_bankfile, "stats", "options", gf_BankStorageGetString());
    BankSave(gv_playerStats[lp_playerID].lv_bankfile);
}

void gf_ResetStats (int lp_playerID) {
    // Variable Declarations
    int lv_tmpInt;
    int lv_tmpInt2;

    // Automatic Variable Declarations
    int auto55A309D8_ae;
    const int auto55A309D8_ai = 1;
    int auto2FAC990B_ae;
    const int auto2FAC990B_ai = 1;

    // Variable Initialization

    // Implementation
    auto55A309D8_ae = (gv_maxAmountDifficulties - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto55A309D8_ai >= 0 && lv_tmpInt <= auto55A309D8_ae) || (auto55A309D8_ai < 0 && lv_tmpInt >= auto55A309D8_ae) ) ; lv_tmpInt += auto55A309D8_ai ) {
        auto2FAC990B_ae = (gv_maxAmountParts - 1);
        lv_tmpInt2 = 0;
        for ( ; ( (auto2FAC990B_ai >= 0 && lv_tmpInt2 <= auto2FAC990B_ae) || (auto2FAC990B_ai < 0 && lv_tmpInt2 >= auto2FAC990B_ae) ) ; lv_tmpInt2 += auto2FAC990B_ai ) {
            gv_playerStats[lp_playerID].lv_difficultyTime[lv_tmpInt][lv_tmpInt2] = 0;
            gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_tmpInt][lv_tmpInt2] = 0;
        }
        gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] = false;
        gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] = false;
    }
    gv_playerStats[lp_playerID].lv_essences = 0;
    gv_playerStats[lp_playerID].lv_psiOrbs = 0;
    gv_playerStats[lp_playerID].lv_scientists = 0;
    gv_playerStats[lp_playerID].lv_winsTerran = 0;
    gv_playerStats[lp_playerID].lv_winsProtoss = 0;
    gv_playerStats[lp_playerID].lv_points = 0;
    gv_playerStats[lp_playerID].lv_kills = 0;
    gv_playerStats[lp_playerID].lv_tutorialCompleted = false;
    lv_tmpInt = 0;
    gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = true;
    gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = 1;
    lv_tmpInt += 1;
    gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = true;
    gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = 2;
    lv_tmpInt += 1;
    gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = true;
    gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = 3;
    lv_tmpInt += 1;
    gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] = true;
    gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID] = 3;
    lv_tmpInt += 1;
    gv_options.lv_heroSelection_Flag[lp_playerID] = false;
    gv_options.lv_heroSelection_Hero[lp_playerID] = 0;
    gv_options.lv_saveFlag[lp_playerID] = true;
    gf_Save(lp_playerID);
}

text gf_UI_IntToRomanNumberText (int lp_number) {
    // Automatic Variable Declarations
    int auto7A279C35_val;

    // Implementation
    auto7A279C35_val = lp_number;
    if (auto7A279C35_val == 1) {
        return StringExternal("Trig/Acv/UI/Stage1");
    }
    else if (auto7A279C35_val == 2) {
        return StringExternal("Trig/Acv/UI/Stage2");
    }
    else if (auto7A279C35_val == 3) {
        return StringExternal("Trig/Acv/UI/Stage3");
    }
    else if (auto7A279C35_val == 4) {
        return StringExternal("Trig/Acv/UI/Stage4");
    }
    else if (auto7A279C35_val == 5) {
        return StringExternal("Trig/Acv/UI/Stage5");
    }
    else if (auto7A279C35_val == 6) {
        return StringExternal("Trig/Acv/UI/Stage6");
    }
    else {
        return StringExternal("Trig/Acv/UI/Stage0");
    }
}

text gf_UI_IntToSpeedyText (int lp_number) {
    // Automatic Variable Declarations
    int auto243F6C60_val;

    // Implementation
    auto243F6C60_val = lp_number;
    if (auto243F6C60_val == 2) {
        return StringExternal("Trig/Acv/UI/Speedy1");
    }
    else if (auto243F6C60_val == 3) {
        return StringExternal("Trig/Acv/UI/Speedy2");
    }
    else {
        return StringExternal("Trig/Acv/UI/Speedy0");
    }
}

text gf_UI_AcvScore (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Score/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 100.00, 0.00)) + StringExternal("Trig/Acv/UI/Score/Post"));
}

text gf_UI_Dmg (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Dmg/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/UI/Dmg/Post"));
}

text gf_UI_Spellpower (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Spellpower/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(0.00, 100.00, 100.00)) + StringExternal("Trig/Acv/UI/Spellpower/Post"));
}

text gf_UI_AttackSpeed (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Atkspd/Pre") + TextWithColor(FixedToText(lp_amountInPercent, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/UI/Atkspd/Post"));
}

text gf_UI_SplashRange (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Splash/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/UI/Splash/Post"));
}

text gf_UI_Armor (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Armor/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/Armor/Post"));
}

text gf_UI_Life (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Life/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/UI/Life/Post"));
}

text gf_UI_LifeRegen (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/LifeRegen/Pre") + TextWithColor(FixedToText(lp_amountInPercent, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/UI/LifeRegen/Post"));
}

text gf_UI_Energy (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Energy/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(70.59, 44.71, 85.10)) + StringExternal("Trig/Acv/UI/Energy/Post"));
}

text gf_UI_EnergyRegen (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/EnergyRegen/Pre") + TextWithColor(FixedToText(lp_amountInPercent, c_fixedPrecisionAny), Color(70.59, 44.71, 85.10)) + StringExternal("Trig/Acv/UI/EnergyRegen/Post"));
}

text gf_UI_Speed (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Speed/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/UI/Speed/Post"));
}

text gf_UI_OverlordSpeed (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/OverlordSpeed/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/UI/OverlordSpeed/Post"));
}

text gf_UI_SpeedOnCreep (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringToText("") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringToText(""));
}

text gf_UI_VisionRange (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/Vision/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/Vision/Post"));
}

text gf_UI_BiomassPerKill (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/BiomassPerKill/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/BiomassPerKill/Post"));
}

text gf_UI_ExpPerKill (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/ExpPerKill/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/ExpPerKill/Post"));
}

text gf_UI_StartExp (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/StartExp/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/StartExp/Post"));
}

text gf_UI_StartExpp2 (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/StartExpP2/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/StartExpP2/Post"));
}

text gf_UI_StartBiomass (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/StartBiomass/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/StartBiomass/Post"));
}

text gf_UI_StartBiomassp2 (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/StartBiomassP2/Pre") + TextWithColor(FixedToText(lp_amount, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/UI/StartBiomassP2/Post"));
}

text gf_UI_TimeFormat (int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_time >= 3600)) {
        return TextTimeFormat(StringToText("<hour/>:<min2/>:<sec2/>"), lp_time);
    }
    else {
        if ((lp_time >= 600)) {
            return TextTimeFormat(StringToText("<min2/>:<sec2/>"), lp_time);
        }
        else {
            return TextTimeFormat(StringToText("<min/>:<sec2/>"), lp_time);
        }
    }
}

text gf_UI_Newline () {
    // Automatic Variable Declarations
    // Implementation
    return StringToText("<n/>");
}

text gf_UI_HeroUnlock (int lp_heroID) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/UI/HeroUnlock/Pre") + TextWithColor(gv_heroSelection.lv_hero_Info[lp_heroID].lv_name, Color(100.00, 100.00, 100.00)) + StringExternal("Trig/Acv/UI/HeroUnlock/Post"));
}

text gf_UI_MaxStage () {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal("Trig/Acv/UI/MaxStage");
}

text gf_UI_Diff_Team_Unlock0 (text lp_namewithcolor) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Team/Unlock0/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Team/Unlock0/Post"));
}

text gf_UI_Diff_Team_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Team/Unlock1/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Team/Unlock1/Mid1") + gf_UI_TimeFormat(lp_time) + StringExternal("Trig/Acv/Diffs/Team/Unlock1/Mid2") + gf_UI_IntToSpeedyText((lp_currentspeedy + 1)) + StringExternal("Trig/Acv/Diffs/Team/Unlock1/Post"));
}

text gf_UI_Diff_Solo_Unlock0 (text lp_namewithcolor) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Solo/Unlock0/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Solo/Unlock0/Post"));
}

text gf_UI_Diff_Solo_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Solo/Unlock1/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Solo/Unlock1/Mid1") + gf_UI_TimeFormat(lp_time) + StringExternal("Trig/Acv/Diffs/Solo/Unlock1/Mid2") + gf_UI_IntToSpeedyText((lp_currentspeedy + 1)) + StringExternal("Trig/Acv/Diffs/Solo/Unlock1/Post"));
}

text gf_UI_Diff_Duo_Unlock0 (text lp_namewithcolor) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Duo/Unlock0/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Duo/Unlock0/Post"));
}

text gf_UI_Diff_Duo_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Duo/Unlock1/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Duo/Unlock1/Mid1") + gf_UI_TimeFormat(lp_time) + StringExternal("Trig/Acv/Diffs/Duo/Unlock1/Mid2") + gf_UI_IntToSpeedyText((lp_currentspeedy + 1)) + StringExternal("Trig/Acv/Diffs/Duo/Unlock1/Post"));
}

text gf_UI_Diff_Trio_Unlock0 (text lp_namewithcolor) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Trio/Unlock0/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Trio/Unlock0/Post"));
}

text gf_UI_Diff_Trio_Unlock1 (text lp_namewithcolor, int lp_time, int lp_currentspeedy) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Trig/Acv/Diffs/Trio/Unlock1/Pre") + lp_namewithcolor + StringExternal("Trig/Acv/Diffs/Trio/Unlock1/Mid1") + gf_UI_TimeFormat(lp_time) + StringExternal("Trig/Acv/Diffs/Trio/Unlock1/Mid2") + gf_UI_IntToSpeedyText((lp_currentspeedy + 1)) + StringExternal("Trig/Acv/Diffs/Trio/Unlock1/Post"));
}

text gf_UI_AbilUnlock (text lp_ability, text lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_UI_Newline() + lp_ability + StringExternal("Trig/Acv/UI/AbilUnlock/Mid") + lp_hero);
}

text gf_UI_IntToDiffShort (int lp_diff) {
    // Automatic Variable Declarations
    int autoB95164AF_val;

    // Implementation
    autoB95164AF_val = lp_diff;
    if (autoB95164AF_val == 0) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Easy");
    }
    else if (autoB95164AF_val == 1) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Normal");
    }
    else if (autoB95164AF_val == 2) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Hard");
    }
    else if (autoB95164AF_val == 3) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Brutal");
    }
    else if (autoB95164AF_val == 4) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Insane");
    }
    else if (autoB95164AF_val == 5) {
        return StringExternal("Trig/Acv/UI/DiffsShort/Hardcore");
    }
    else {
        return StringExternal("Trig/Acv/UI/Stage0");
    }
}

void gf_Reward_Armor (int lp_playerID, fixed lp_amount) {
    // Variable Declarations
    fixed lv_mult_hydra;
    fixed lv_mult_rav;
    fixed lv_mult_queen;
    fixed lv_mult_bowler;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mult_hydra = 0.8;
    lv_mult_rav = 1.3;
    lv_mult_queen = 0.9;
    lv_mult_bowler = 0.9;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "LifeArmor", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "LifeArmor", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "LifeArmor", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "HardenedShell", "DamageResponse.ClampMaximum", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "HardenedShell", "DamageResponse.Minimum", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "LifeArmor", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "LifeArmor", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_AcvScore (int lp_playerID, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_playerID].lv_acvScore += lp_amount;
    if ((gv_gameStarted == true)) {
        gf_AcvScore_UnlockCheck(lp_playerID);
    }

}

void gf_Reward_Dmg (int lp_playerID, fixed lp_amount) {
    // Variable Declarations
    fixed lv_mult_hydra;
    fixed lv_mult_rav;
    fixed lv_mult_queen;
    fixed lv_mult_bowler;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mult_hydra = 1.2;
    lv_mult_rav = 0.8;
    lv_mult_queen = 0.9;
    lv_mult_bowler = 1.05;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogEffect, "HeroRoachRangedDmg", "Amount", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "HeroHydraRangedDmg", "Amount", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "RavagerWeaponDmg", "Amount", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "WeaponAttackDamage", "Amount", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "BanelingMissileExplodeDmg", "Amount", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_Spellpower (int lp_playerID, fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_playerID].lv_spellPowerPercent += lp_amountInPercent;
    if ((gv_gameStarted == true)) {
        gf_Reward_Spellpower_UpdateEffects(lp_playerID);
    }

}

void gf_Reward_Spellpower_UpdateEffects (int lp_playerID) {
    // Variable Declarations
    fixed lv_multiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_multiplier = (1.0 + (gv_playerStats[lp_playerID].lv_spellPowerPercent / 100.0));

    // Implementation
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "HeroSpellpowerDummy", "Amount", lp_playerID, gv_playerStats[lp_playerID].lv_spellPowerPercent, c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "GlueStream@BuffCaster", "Modification.MoveSpeedMultiplier", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "GlueStream@BuffCaster", "Modification.MoveSpeedMultiplier", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "GlueStream@Debuff", "Modification.MoveSpeedMultiplier", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "GlueStream@Debuff", "Modification.MoveSpeedMultiplier", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "GlueStream@Buff", "Modification.MoveSpeedMultiplier", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "GlueStream@Buff", "Modification.MoveSpeedMultiplier", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "GlueStream@Dmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "DefensiveRoar@Caster", "Modification.LifeArmorBonus", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DefensiveRoar@Caster", "Modification.LifeArmorBonus", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "DefensiveRoar@Other", "Modification.LifeArmorBonus", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DefensiveRoar@Other", "Modification.LifeArmorBonus", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "Tackle@FriendlyTackleCaster", "Modification.DamageDealtScaled[" + IntToString(2) + "]", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "Tackle@FriendlyTackleCaster", "Modification.DamageDealtScaled[" + IntToString(2) + "]", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "Tackle@FriendlyTackle", "Modification.DamageDealtScaled[" + IntToString(2) + "]", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "Tackle@FriendlyTackle", "Modification.DamageDealtScaled[" + IntToString(2) + "]", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "Tackle@Dmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "AcidPitDmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "HeroHydraPoisonDmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "FocusBuffStack", "Modification.AdditiveAttackSpeedFactor", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "Taunt2", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_playerID, lv_multiplier, c_upgradeOperationDivide);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "HardenedShell", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_playerID, lv_multiplier, c_upgradeOperationDivide);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "Decoy", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", lp_playerID, lv_multiplier, c_upgradeOperationDivide);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "HealSmall", "VitalArray[" + IntToString(0) + "].Change", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "HealInstant", "VitalArray[" + IntToString(0) + "].Change", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "Frienzied", "Modification.AttackSpeedMultiplier", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "Frienzied", "Modification.AttackSpeedMultiplier", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "Frienzied", "Modification.MoveSpeedMultiplier", lp_playerID, Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "Frienzied", "Modification.MoveSpeedMultiplier", c_playerAny), lv_multiplier), c_upgradeOperationSet);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "EnergyTransferCreateHealer", "RechargeVitalRate", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "JumpingBanelingDmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "BanemineExplosionDmg", "Amount", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "KillStreakBuffStack", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "KillStreakBuffStack", "Modification.DamageDealtFraction[" + IntToString(1) + "]", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "KillStreakBuffStack", "Modification.DamageDealtFraction[" + IntToString(2) + "]", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "KillStreakBuffStack", "Modification.DamageDealtFraction[" + IntToString(3) + "]", lp_playerID, lv_multiplier, c_upgradeOperationMultiply);
}

void gf_Reward_AttackSpeed (int lp_playerID, fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogWeapon, "HeroRoachRanged", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
    CatalogFieldValueModify(c_gameCatalogWeapon, "HeroHydraliskRanged", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
    CatalogFieldValueModify(c_gameCatalogWeapon, "RavagerWeapon2", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
    CatalogFieldValueModify(c_gameCatalogWeapon, "AcidSpines2", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
    CatalogFieldValueModify(c_gameCatalogWeapon, "BanelingBowling", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
    CatalogFieldValueModify(c_gameCatalogWeapon, "BowlerAntiAirWeapon", "Period", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationDivide);
}

void gf_Reward_SplashRange (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Deprecated
    CatalogFieldValueModify(c_gameCatalogEffect, "WeaponAttackDamage", "AreaArray[" + IntToString(0) + "].Radius", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_Life (int lp_playerID, fixed lp_amount) {
    // Variable Declarations
    fixed lv_mult_hydra;
    fixed lv_mult_rav;
    fixed lv_mult_queen;
    fixed lv_mult_bowler;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mult_hydra = 0.8;
    lv_mult_rav = 1.6;
    lv_mult_queen = 1.0;
    lv_mult_bowler = 1.0;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "LifeMax", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "LifeStart", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "LifeMax", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "LifeStart", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "LifeMax", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "LifeStart", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "LifeMax", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "LifeStart", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "LifeMax", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "LifeStart", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_LifeRegen (int lp_playerID, fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "LifeRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SpitterCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "LifeRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "StingerCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "LifeRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "HardskinCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "LifeRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SwarmMotherCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "LifeRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "BowlerCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
}

void gf_Reward_Energy (int lp_playerID, fixed lp_amount) {
    // Variable Declarations
    fixed lv_mult_hydra;
    fixed lv_mult_rav;
    fixed lv_mult_queen;
    fixed lv_mult_bowler;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mult_hydra = 1.0;
    lv_mult_rav = 1.0;
    lv_mult_queen = 1.0;
    lv_mult_bowler = 1.0;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "EnergyMax", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "EnergyStart", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "EnergyMax", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "EnergyStart", lp_playerID, FixedToString((lp_amount * lv_mult_hydra), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "EnergyMax", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "EnergyStart", lp_playerID, FixedToString((lp_amount * lv_mult_rav), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "EnergyMax", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "EnergyStart", lp_playerID, FixedToString((lp_amount * lv_mult_queen), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "EnergyMax", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "EnergyStart", lp_playerID, FixedToString((lp_amount * lv_mult_bowler), c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_EnergyRegen (int lp_playerID, fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "EnergyRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SpitterCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "EnergyRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "StingerCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "EnergyRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "HardskinCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "EnergyRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SwarmMotherCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "EnergyRegenRate", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "BowlerCreepBonusRegen", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", lp_playerID, FixedToString(((lp_amountInPercent / 100.0) + 1.0), c_fixedPrecisionAny), c_upgradeOperationMultiply);
}

void gf_Reward_Speed (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_SpeedOnCreep (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Deprecated
    CatalogFieldValueModify(c_gameCatalogUnit, "Runling", "SpeedBonusCreep", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_VisionRange (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroRoach", "Sight", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HeroHydralisk", "Sight", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ravager2", "Sight", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SwarmQueen2", "Sight", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bowler", "Sight", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_BiomassPerKill (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_playerID].lv_biomassBonusAdd += lp_amount;
}

void gf_Reward_ExpPerKill (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_playerID].lv_expBonusAdd += lp_amount;
}

void gf_Reward_StartExp (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameStarted == true)) {
        gf_AddExp(gv_heroUnits[lp_playerID], lp_amount);
    }
    else {
        gv_playerStats[lp_playerID].lv_startEXP += lp_amount;
    }
}

void gf_Reward_StartExpp2 (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_partActive >= 2)) {
        gf_AddExp(gv_heroUnits[lp_playerID], lp_amount);
    }
    else {
        gv_playerStats[lp_playerID].lv_startEXPp2 += lp_amount;
    }
}

void gf_Reward_StartBiomass (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyFixed(lp_playerID, c_playerPropMinerals, c_playerPropOperAdd, lp_amount);
}

void gf_Reward_StartBiomassp2 (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_partActive >= 2)) {
        PlayerModifyPropertyFixed(lp_playerID, c_playerPropMinerals, c_playerPropOperAdd, lp_amount);
    }
    else {
        gv_playerStats[lp_playerID].lv_startBiomassP2 += lp_amount;
    }
}

void gf_Reward_OverlordSpeed (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "BaseOverlord", "Speed", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_CyberneticsLevel (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_playerID, "UnlockCybernetics", 1);
}

void gf_Reward_CyberneticsDmg (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogEffect, "CyberneticLurkerWeaponDamage", "Amount", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "RunlingMeleeDmg", "Amount", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "RunlingRangedDmg", "Amount", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_CyberneticsLife (int lp_playerID, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "CyberneticLurker", "LifeMax", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "CyberneticLurker", "LifeStart", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "CyberneticLurkerBurrowed", "LifeMax", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "CyberneticLurkerBurrowed", "LifeStart", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Runling", "LifeMax", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Runling", "LifeStart", lp_playerID, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_HiveArmor (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "Hive2", "LifeArmor", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Reward_AuraArmor (fixed lp_amount) {
    // Automatic Variable Declarations
    const int autoCB59E55B_ae = 6;
    int autoCB59E55B_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.LifeArmorBonus", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    autoCB59E55B_var = 1;
    for ( ; autoCB59E55B_var <= autoCB59E55B_ae; autoCB59E55B_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.LifeArmorBonus", autoCB59E55B_var, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraLifeRegen (fixed lp_amount) {
    // Automatic Variable Declarations
    const int autoB67C9F46_ae = 6;
    int autoB67C9F46_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.VitalRegenArray[" + IntToString(0) + "]", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    autoB67C9F46_var = 1;
    for ( ; autoB67C9F46_var <= autoB67C9F46_ae; autoB67C9F46_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.VitalRegenArray[" + IntToString(0) + "]", autoB67C9F46_var, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraEnergyRegen (fixed lp_amount) {
    // Automatic Variable Declarations
    const int autoA3935401_ae = 6;
    int autoA3935401_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    autoA3935401_var = 1;
    for ( ; autoA3935401_var <= autoA3935401_ae; autoA3935401_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.VitalRegenArray[" + IntToString(2) + "]", autoA3935401_var, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraDmg (fixed lp_amount) {
    // Automatic Variable Declarations
    const int auto12E99F49_ae = 6;
    int auto12E99F49_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.DamageDealtScaled[" + IntToString(1) + "]", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.DamageDealtScaled[" + IntToString(2) + "]", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    auto12E99F49_var = 1;
    for ( ; auto12E99F49_var <= auto12E99F49_ae; auto12E99F49_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.DamageDealtScaled[" + IntToString(1) + "]", auto12E99F49_var, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.DamageDealtScaled[" + IntToString(2) + "]", auto12E99F49_var, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraAttackSpeed (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    const int auto62943C41_ae = 6;
    int auto62943C41_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.AttackSpeedMultiplier", gv_basePlayer, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationAdd);
    auto62943C41_var = 1;
    for ( ; auto62943C41_var <= auto62943C41_ae; auto62943C41_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.AttackSpeedMultiplier", auto62943C41_var, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraTimeScale (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    const int auto3A4157B5_ae = 6;
    int auto3A4157B5_var;

    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.TimeScale", gv_basePlayer, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationAdd);
    auto3A4157B5_var = 1;
    for ( ; auto3A4157B5_var <= auto3A4157B5_ae; auto3A4157B5_var += 1 ) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura", "Modification.TimeScale", auto3A4157B5_var, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationAdd);
    }
}

void gf_Reward_AuraDebuffAtkspd (fixed lp_amountInPercent) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura2", "Modification.AttackSpeedMultiplier", gv_basePlayer, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationSubtract);
    CatalogFieldValueModify(c_gameCatalogBehavior, "BaseAura2", "Modification.AttackSpeedMultiplier", gv_enemyPlayer, FixedToString((lp_amountInPercent / 100.0), c_fixedPrecisionAny), c_upgradeOperationSubtract);
}

void gf_Reward_AuraEnemyDmg (fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogEffect, "BaseAuraPassiveDmg", "Amount", gv_basePlayer, FixedToString(lp_amount, c_fixedPrecisionAny), c_upgradeOperationAdd);
}

void gf_Init_AcvRequirements () {
    // Automatic Variable Declarations
    // Implementation
    gf_AcvReq_Points();
    gf_AcvReq_Win_T();
    gf_AcvReq_Win_P();
    gf_AcvReq_Kills();
    gf_AcvReq_Scientists();
    gf_AcvReq_Essences();
    gf_AcvReq_PsiOrbs();
    gf_AcvReq_DiffTimes();
    gf_AcvReq_DiffSoloDuoTimes();
    gf_AcvReq_Score();
}

void gf_AcvCheckAll (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    gf_AcvPoints_UnlockCheck(lp_playerID);
    gf_Acv_Win_T_UnlockCheck(lp_playerID);
    gf_Acv_Win_P_UnlockCheck(lp_playerID);
    gf_Acv_Kills_UnlockCheck(lp_playerID);
    gf_AcvScientists_UnlockCheck(lp_playerID);
    gf_AcvEssences_UnlockCheck(lp_playerID);
    gf_AcvPsiOrbs_UnlockCheck(lp_playerID);
    gf_Acv_Diff_Terran_Easy_Check(lp_playerID);
    gf_Acv_Diff_Terran_Normal_Check(lp_playerID);
    gf_Acv_Diff_Terran_Hard_Check(lp_playerID);
    gf_Acv_Diff_Terran_Brutal_Check(lp_playerID);
    gf_Acv_Diff_Terran_Insane_Check(lp_playerID);
    gf_Acv_Diff_Terran_Hardcore_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Easy_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Normal_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Hard_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Brutal_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Insane_Check(lp_playerID);
    gf_Acv_Diff_Protoss_Hardcore_Check(lp_playerID);
    gf_Acv_DiffSolo_Terran_Easy_Check(lp_playerID);
    gf_Acv_DiffSolo_Terran_Normal_Check(lp_playerID);
    gf_Acv_DiffSolo_Terran_Hard_Check(lp_playerID);
    gf_Acv_DiffSolo_Terran_Brutal_Check(lp_playerID);
    gf_Acv_DiffDuo_Terran_Insane_Check(lp_playerID);
    gf_Acv_DiffSolo_Terran_Hardcore_Check(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Easy_Check(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Normal_Check(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Hard_Check(lp_playerID);
    gf_Acv_DiffDuo_Protoss_Brutal_Check(lp_playerID);
    gf_Acv_DiffTrio_Protoss_Insane_Check(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Hardcore_Check(lp_playerID);
    gf_AcvBossKills_Hammer_UnlockCheck(lp_playerID);
    gf_AcvBossKills_Fortress_UnlockCheck(lp_playerID);
    gf_AcvBossKills_Flamer_UnlockCheck(lp_playerID);
    gf_Acv_Flawless_T_UnlockCheck(lp_playerID);
    gf_Acv_Flawless_P_UnlockCheck(lp_playerID);
    gf_AcvBossKills_Atlantis_UnlockCheck(lp_playerID);
    gf_AcvBossKills_Madness_UnlockCheck(lp_playerID);
    gf_AcvBossKills_TTLightning_UnlockCheck(lp_playerID);
    gf_AcvBossKills_TTThunder_UnlockCheck(lp_playerID);
    gf_AcvTutorial_UnlockCheck(lp_playerID);
    gf_Reward_Spellpower_UpdateEffects(lp_playerID);
}

void gf_AcvUpdateUIOfPlayer (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    gf_AcvPoints_UI(lp_playerID);
    gf_Acv_Win_T_UI(lp_playerID);
    gf_Acv_Win_P_UI(lp_playerID);
    gf_Acv_Kills_UI(lp_playerID);
    gf_AcvScientists_UI(lp_playerID);
    gf_AcvEssences_UI(lp_playerID);
    gf_AcvPsiOrbs_UI(lp_playerID);
    gf_Acv_Diff_Terran_Easy_UI(lp_playerID);
    gf_Acv_Diff_Terran_Normal_UI(lp_playerID);
    gf_Acv_Diff_Terran_Hard_UI(lp_playerID);
    gf_Acv_Diff_Terran_Brutal_UI(lp_playerID);
    gf_Acv_Diff_Terran_Insane_UI(lp_playerID);
    gf_Acv_Diff_Terran_Hardcore_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Easy_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Normal_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Hard_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Brutal_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Insane_UI(lp_playerID);
    gf_Acv_Diff_Protoss_Hardcore_UI(lp_playerID);
    gf_Acv_DiffSolo_Terran_Easy_UI(lp_playerID);
    gf_Acv_DiffSolo_Terran_Normal_UI(lp_playerID);
    gf_Acv_DiffSolo_Terran_Hard_UI(lp_playerID);
    gf_Acv_DiffSolo_Terran_Brutal_UI(lp_playerID);
    gf_Acv_DiffDuo_Terran_Insane_UI(lp_playerID);
    gf_Acv_DiffSolo_Terran_Hardcore_UI(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Easy_UI(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Normal_UI(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Hard_UI(lp_playerID);
    gf_Acv_DiffDuo_Protoss_Brutal_UI(lp_playerID);
    gf_Acv_DiffTrio_Protoss_Insane_UI(lp_playerID);
    gf_Acv_DiffSolo_Protoss_Hardcore_UI(lp_playerID);
    gf_AcvBossKills_Hammer_UI(lp_playerID);
    gf_AcvBossKills_Fortress_UI(lp_playerID);
    gf_AcvBossKills_Flamer_UI(lp_playerID);
    gf_Acv_Flawless_T_UI(lp_playerID);
    gf_AcvBossKills_Atlantis_UI(lp_playerID);
    gf_AcvBossKills_Madness_UI(lp_playerID);
    gf_AcvBossKills_TTLightning_UI(lp_playerID);
    gf_AcvBossKills_TTThunder_UI(lp_playerID);
    gf_Acv_Flawless_P_UI(lp_playerID);
    gf_AcvTutorial_UI(lp_playerID);
    gf_AcvScore_UI(lp_playerID);
}

void gf_AcvReq_Points () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_pointsReq[lv_tmpStage] = 30;
    lv_tmpStage += 1;
    gv_acvReq.lv_pointsReq[lv_tmpStage] = 100;
    lv_tmpStage += 1;
    gv_acvReq.lv_pointsReq[lv_tmpStage] = 250;
    lv_tmpStage += 1;
    gv_acvReq.lv_pointsReq[lv_tmpStage] = 500;
    lv_tmpStage += 1;
}

void gf_AcvPoints_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStages;

    // Automatic Variable Declarations
    int auto524A2A7E_ae;
    const int auto524A2A7E_ai = 1;

    // Variable Initialization

    // Implementation
    auto524A2A7E_ae = (gv_acvReq_PointsStages - 1);
    lv_tmpStages = 0;
    for ( ; ( (auto524A2A7E_ai >= 0 && lv_tmpStages <= auto524A2A7E_ae) || (auto524A2A7E_ai < 0 && lv_tmpStages >= auto524A2A7E_ae) ) ; lv_tmpStages += auto524A2A7E_ai ) {
        if ((gv_playerStats[lp_playerID].lv_points >= gv_acvReq.lv_pointsReq[lv_tmpStages]) && (gv_playerStats[lp_playerID].lv_pointsLevel <= lv_tmpStages)) {
            gv_playerStats[lp_playerID].lv_pointsLevel = (lv_tmpStages + 1);
            gf_AcvPoints_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Points"));
                gf_AcvInterface_SendNotification(lp_playerID, 1, "Points");
            }

        }

    }
    gf_AcvPoints_UI(lp_playerID);
}

void gf_AcvPoints_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int autoEAE2C491_val;

    // Implementation
    autoEAE2C491_val = gv_playerStats[lp_playerID].lv_pointsLevel;
    if (autoEAE2C491_val == 1) {
        gf_UnlockHero(lp_playerID, 1);
        gf_Reward_AcvScore(lp_playerID, 2);
    }
    else if (autoEAE2C491_val == 2) {
        gf_UnlockHero(lp_playerID, 2);
        gf_Reward_AcvScore(lp_playerID, 3);
    }
    else if (autoEAE2C491_val == 3) {
        gf_UnlockHero(lp_playerID, 3);
        gf_Reward_AcvScore(lp_playerID, 4);
    }
    else if (autoEAE2C491_val == 4) {
        gf_UnlockHero(lp_playerID, 4);
        gf_Reward_AcvScore(lp_playerID, 6);
    }
    else {
    }
}

void gf_AcvPoints_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    fixed lv_expPerKill;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Points/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Points")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_pointsLevel));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_pointsLevel)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_pointsLevel >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        lv_tooltip = (lv_tooltip + gf_UI_HeroUnlock(1));
        lv_score += 2.0;
        if ((gv_playerStats[lp_playerID].lv_pointsLevel >= 2)) {
            lv_score += 3.0;
            lv_tooltip = (lv_tooltip + gf_UI_HeroUnlock(2));
            if ((gv_playerStats[lp_playerID].lv_pointsLevel >= 3)) {
                lv_score += 4.0;
                lv_tooltip = (lv_tooltip + gf_UI_HeroUnlock(3));
                if ((gv_playerStats[lp_playerID].lv_pointsLevel >= 4)) {
                    lv_score += 6.0;
                    lv_tooltip = (lv_tooltip + gf_UI_HeroUnlock(4));
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-broodqueen.dds", PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-noxious-hydralisk.dds", PlayerGroupAll());
                }
            }
            else {
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-bone-ravager.dds", PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-mutalisk-broodlord.dds", PlayerGroupAll());
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_pointsLevel == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Points/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_pointsReq[gv_playerStats[lp_playerID].lv_pointsLevel]), lv_color) + StringExternal("Trig/Acv/Points/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_pointsLevel == gv_acvReq_PointsStages)) {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/UI/MaxStage"));
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Points/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_pointsReq[gv_playerStats[lp_playerID].lv_pointsLevel]), lv_color) + StringExternal("Trig/Acv/Points/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_Win_T () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 10;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 40;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 90;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 160;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 250;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsTReq[lv_tmpStage] = 360;
    lv_tmpStage += 1;
}

void gf_Acv_Win_T_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoE14C149C_ae;
    const int autoE14C149C_ai = 1;

    // Variable Initialization

    // Implementation
    autoE14C149C_ae = (gv_acvReq_WinsTStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (autoE14C149C_ai >= 0 && lv_tmpStage <= autoE14C149C_ae) || (autoE14C149C_ai < 0 && lv_tmpStage >= autoE14C149C_ae) ) ; lv_tmpStage += autoE14C149C_ai ) {
        if ((gv_playerStats[lp_playerID].lv_winsTerran >= gv_acvReq.lv_winsTReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_winsLevelTerran <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_winsLevelTerran = (lv_tmpStage + 1);
            gf_Acv_Win_T_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Wins"));
                gf_AcvInterface_SendNotification(lp_playerID, 1, "WinsP1");
            }

        }

    }
    gf_Acv_Win_T_UI(lp_playerID);
}

void gf_Acv_Win_T_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int autoD801ABCE_val;

    // Implementation
    autoD801ABCE_val = gv_playerStats[lp_playerID].lv_winsLevelTerran;
    if (autoD801ABCE_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_StartExp(lp_playerID, 100.0);
    }
    else if (autoD801ABCE_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_StartExp(lp_playerID, 50.0);
        gf_Reward_ExpPerKill(lp_playerID, 0.5);
    }
    else if (autoD801ABCE_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_StartExp(lp_playerID, 100.0);
        gf_Reward_ExpPerKill(lp_playerID, 0.5);
    }
    else if (autoD801ABCE_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExp(lp_playerID, 150.0);
        gf_Reward_ExpPerKill(lp_playerID, 1.0);
    }
    else if (autoD801ABCE_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExp(lp_playerID, 200.0);
    }
    else if (autoD801ABCE_val == 6) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExp(lp_playerID, 250.0);
    }
    else {
    }
}

void gf_Acv_Win_T_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    fixed lv_expPerKill;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/WinsP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/WinsP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_winsLevelTerran));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_winsLevelTerran)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-zerg-towering.dds", PlayerGroupAll());
        lv_startingExp += 100;
        lv_score += 2.0;
        if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 2)) {
            lv_startingExp += 50;
            lv_expPerKill += 0.5;
            lv_score += 4.0;
            if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 3)) {
                lv_startingExp += 100;
                lv_expPerKill += 0.5;
                lv_score += 6.0;
                if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 4)) {
                    lv_startingExp += 150;
                    lv_expPerKill += 1.0;
                    lv_score += 8.0;
                    if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 5)) {
                        lv_startingExp += 200;
                        lv_score += 8.0;
                        if ((gv_playerStats[lp_playerID].lv_winsLevelTerran >= 6)) {
                            lv_startingExp += 250;
                            lv_score += 8.0;
                        }

                    }

                }

            }

            lv_tooltip = (lv_tooltip + gf_UI_StartExp(lv_startingExp) + gf_UI_ExpPerKill(lv_expPerKill));
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartExp(lv_startingExp));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_winsLevelTerran == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/WinsP1/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_winsTReq[gv_playerStats[lp_playerID].lv_winsLevelTerran]), lv_color) + StringExternal("Trig/Acv/WinsP1/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_winsLevelTerran == gv_acvReq_WinsTStages)) {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/UI/MaxStage"));
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/WinsP1/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_winsTReq[gv_playerStats[lp_playerID].lv_winsLevelTerran]), lv_color) + StringExternal("Trig/Acv/WinsP1/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_Win_P () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 10;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 40;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 90;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 160;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 250;
    lv_tmpStage += 1;
    gv_acvReq.lv_winsPReq[lv_tmpStage] = 360;
    lv_tmpStage += 1;
}

void gf_Acv_Win_P_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto38578157_ae;
    const int auto38578157_ai = 1;

    // Variable Initialization

    // Implementation
    auto38578157_ae = (gv_acvReq_WinsPStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (auto38578157_ai >= 0 && lv_tmpStage <= auto38578157_ae) || (auto38578157_ai < 0 && lv_tmpStage >= auto38578157_ae) ) ; lv_tmpStage += auto38578157_ai ) {
        if ((gv_playerStats[lp_playerID].lv_winsProtoss >= gv_acvReq.lv_winsPReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_winsLevelProtoss <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_winsLevelProtoss = (lv_tmpStage + 1);
            gf_Acv_Win_P_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Wins"));
                gf_AcvInterface_SendNotification(lp_playerID, 2, "WinsP2");
            }

        }

    }
    gf_Acv_Win_P_UI(lp_playerID);
}

void gf_Acv_Win_P_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int auto8F23F9A8_val;

    // Implementation
    auto8F23F9A8_val = gv_playerStats[lp_playerID].lv_winsLevelProtoss;
    if (auto8F23F9A8_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_StartExpp2(lp_playerID, 200.0);
    }
    else if (auto8F23F9A8_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_StartExpp2(lp_playerID, 500.0);
    }
    else if (auto8F23F9A8_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_StartExpp2(lp_playerID, 900.0);
    }
    else if (auto8F23F9A8_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExpp2(lp_playerID, 1400.0);
    }
    else if (auto8F23F9A8_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExpp2(lp_playerID, 2000.0);
    }
    else if (auto8F23F9A8_val == 6) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartExpp2(lp_playerID, 2700.0);
    }
    else {
    }
}

void gf_Acv_Win_P_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/WinsP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/WinsP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_winsLevelProtoss));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_winsLevelProtoss)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-observer-surveillance.dds", PlayerGroupAll());
        lv_score += 2.0;
        lv_startingExp += 200;
        if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 2)) {
            lv_score += 4.0;
            lv_startingExp += 500;
            if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 3)) {
                lv_score += 6.0;
                lv_startingExp += 900;
                if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 4)) {
                    lv_score += 8.0;
                    lv_startingExp += 1400;
                    if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 5)) {
                        lv_score += 8.0;
                        lv_startingExp += 2000;
                        if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss >= 6)) {
                            lv_score += 8.0;
                            lv_startingExp += 2700;
                        }

                    }

                }

            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_StartExpp2(lv_startingExp));
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/WinsP2/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_winsTReq[gv_playerStats[lp_playerID].lv_winsLevelProtoss]), lv_color) + StringExternal("Trig/Acv/WinsP2/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_winsLevelProtoss == gv_acvReq_WinsTStages)) {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/UI/MaxStage"));
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/WinsP2/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_winsPReq[gv_playerStats[lp_playerID].lv_winsLevelProtoss]), lv_color) + StringExternal("Trig/Acv/WinsP2/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_Kills () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_killsReq[lv_tmpStage] = 1000;
    lv_tmpStage += 1;
    gv_acvReq.lv_killsReq[lv_tmpStage] = 10000;
    lv_tmpStage += 1;
    gv_acvReq.lv_killsReq[lv_tmpStage] = 50000;
    lv_tmpStage += 1;
    gv_acvReq.lv_killsReq[lv_tmpStage] = 100000;
    lv_tmpStage += 1;
    gv_acvReq.lv_killsReq[lv_tmpStage] = 250000;
    lv_tmpStage += 1;
    gv_acvReq.lv_killsReq[lv_tmpStage] = 500000;
    lv_tmpStage += 1;
}

void gf_Acv_Kills_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;
    bool lv_updateUiFlag;

    // Automatic Variable Declarations
    int autoC26649B4_ae;
    const int autoC26649B4_ai = 1;

    // Variable Initialization

    // Implementation
    autoC26649B4_ae = (gv_acvReq_KillsStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (autoC26649B4_ai >= 0 && lv_tmpStage <= autoC26649B4_ae) || (autoC26649B4_ai < 0 && lv_tmpStage >= autoC26649B4_ae) ) ; lv_tmpStage += autoC26649B4_ai ) {
        if ((gv_playerStats[lp_playerID].lv_kills >= gv_acvReq.lv_killsReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_killsLevel <= lv_tmpStage)) {
            lv_updateUiFlag = true;
            gv_playerStats[lp_playerID].lv_killsLevel = (lv_tmpStage + 1);
            gf_Acv_Kills_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Kills"));
                gf_AcvInterface_SendNotification(lp_playerID, 1, "Kills");
                gf_Save(lp_playerID);
            }

        }

    }
    if (((lv_updateUiFlag == true) || (gv_gameStarted == false))) {
        gf_Acv_Kills_UI(lp_playerID);
    }

}

void gf_Acv_Kills_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int auto9FDA4DA5_val;

    // Implementation
    auto9FDA4DA5_val = gv_playerStats[lp_playerID].lv_killsLevel;
    if (auto9FDA4DA5_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_StartBiomass(lp_playerID, 100.0);
    }
    else if (auto9FDA4DA5_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_StartBiomass(lp_playerID, 200.0);
        gf_Reward_BiomassPerKill(lp_playerID, 0.5);
    }
    else if (auto9FDA4DA5_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_StartBiomass(lp_playerID, 300.0);
        gf_Reward_BiomassPerKill(lp_playerID, 0.5);
    }
    else if (auto9FDA4DA5_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_StartBiomass(lp_playerID, 400.0);
        gf_Reward_BiomassPerKill(lp_playerID, 0.5);
    }
    else if (auto9FDA4DA5_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_BiomassPerKill(lp_playerID, 0.5);
    }
    else if (auto9FDA4DA5_val == 6) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_BiomassPerKill(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Kills_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingBiomass;
    fixed lv_biomassPerKill;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 0.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Kills/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Kills")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_killsLevel));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_killsLevel)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_killsLevel >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        lv_score += 1.0;
        lv_startingBiomass += 100.0;
        if ((gv_playerStats[lp_playerID].lv_killsLevel >= 2)) {
            lv_score += 1.0;
            lv_startingBiomass += 200.0;
            lv_biomassPerKill += 0.5;
            if ((gv_playerStats[lp_playerID].lv_killsLevel >= 3)) {
                lv_score += 2.0;
                lv_startingBiomass += 300.0;
                lv_biomassPerKill += 0.5;
                if ((gv_playerStats[lp_playerID].lv_killsLevel >= 4)) {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds", PlayerGroupAll());
                    lv_score += 2.0;
                    lv_startingBiomass += 400.0;
                    lv_biomassPerKill += 0.5;
                    if ((gv_playerStats[lp_playerID].lv_killsLevel >= 5)) {
                        lv_score += 4.0;
                        lv_biomassPerKill += 0.5;
                        if ((gv_playerStats[lp_playerID].lv_killsLevel >= 6)) {
                            lv_score += 4.0;
                            lv_biomassPerKill += 1.0;
                        }

                    }

                }
                else {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds", PlayerGroupAll());
                }
            }
            else {
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds", PlayerGroupAll());
            }
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_startingBiomass) + gf_UI_BiomassPerKill(lv_biomassPerKill));
        }
        else {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level0.dds", PlayerGroupAll());
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_startingBiomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_killsLevel == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Kills/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_killsReq[gv_playerStats[lp_playerID].lv_killsLevel]), lv_color) + StringExternal("Trig/Acv/Kills/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_killsLevel == gv_acvReq_KillsStages)) {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/UI/MaxStage"));
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Kills/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_killsReq[gv_playerStats[lp_playerID].lv_killsLevel]), lv_color) + StringExternal("Trig/Acv/Kills/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_KillCounterIncrement (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lp_playerID].lv_kills += 1;
        gf_Acv_Kills_UnlockCheck(lp_playerID);
    }

}

void gf_AcvReq_DiffTimes () {
    // Variable Declarations
    int lv_tmpStage;
    int lv_tmpPart;
    int lv_tmpDiff;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 600;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 300;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 450;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1200;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 600;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1800;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2700;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1350;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3600;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2400;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpPart += 1;
    lv_tmpDiff = 0;
    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 480;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1200;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 600;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1800;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2700;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1500;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 4200;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2400;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

}

void gf_AcvReq_DiffSoloDuoTimes () {
    // Variable Declarations
    int lv_tmpStage;
    int lv_tmpDiff;
    int lv_tmpPart;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1200;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 600;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1800;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2400;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1200;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3000;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1800;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3600;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2400;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpPart += 1;
    lv_tmpDiff = 0;
    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1500;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 900;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2400;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1350;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3300;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 1800;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3600;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 2700;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 5400;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 3600;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

    lv_tmpStage = 0;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = gv_gameTimeMax;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    gv_acvReq.lv_diffSoloTimes[lv_tmpDiff][lv_tmpStage][lv_tmpPart] = 0;
    lv_tmpStage += 1;
    lv_tmpDiff += 1;

}

void gf_Acv_Diff_Terran_Easy_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto63B8EA41_ae;
    const int auto63B8EA41_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto63B8EA41_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto63B8EA41_ai >= 0 && lv_tmpStage <= auto63B8EA41_ae) || (auto63B8EA41_ai < 0 && lv_tmpStage >= auto63B8EA41_ae) ) ; lv_tmpStage += auto63B8EA41_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Easy_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Easy"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "EasyP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Easy_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Easy_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoD1A180A9_val;

    // Variable Initialization

    // Implementation
    autoD1A180A9_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (autoD1A180A9_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 1);
        }

        gf_Reward_StartBiomass(lp_playerID, 200.0);
    }
    else if (autoD1A180A9_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (autoD1A180A9_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_StartBiomass(lp_playerID, 100.0);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Easy_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 0;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/EasyP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/EasyP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-marine-junker.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Diffs/DiffUnlock/Normal"));
        lv_biomass += 200.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 2.0;
            lv_speed += 0.125;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 4.0;
                lv_atkspd += 1.0;
                lv_biomass += 100.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Terran_Normal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoFB6EC6EE_ae;
    const int autoFB6EC6EE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        autoFB6EC6EE_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoFB6EC6EE_ai >= 0 && lv_tmpStage <= autoFB6EC6EE_ae) || (autoFB6EC6EE_ai < 0 && lv_tmpStage >= autoFB6EC6EE_ae) ) ; lv_tmpStage += autoFB6EC6EE_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Normal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Normal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "NormalP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Normal_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Normal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int auto25D60494_val;

    // Variable Initialization

    // Implementation
    auto25D60494_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto25D60494_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 2);
        }

        gf_Reward_StartBiomass(lp_playerID, 400.0);
    }
    else if (auto25D60494_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto25D60494_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_StartBiomass(lp_playerID, 200.0);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Normal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 1;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_oLspeed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/NormalP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/NormalP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 2.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-marauder-junker.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Diffs/DiffUnlock/Hard"));
        lv_biomass += 400.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 3.0;
            lv_oLspeed += 0.125;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 5.0;
                lv_atkspd += 1.0;
                lv_biomass += 200.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Terran_Hard_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoC598511A_ae;
    const int autoC598511A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        autoC598511A_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoC598511A_ai >= 0 && lv_tmpStage <= autoC598511A_ae) || (autoC598511A_ai < 0 && lv_tmpStage >= autoC598511A_ae) ) ; lv_tmpStage += autoC598511A_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Hard_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hard"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "HardP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Hard_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Hard_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoBF86158B_val;

    // Variable Initialization

    // Implementation
    autoBF86158B_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (autoBF86158B_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 3);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 3);
        }

        gf_Reward_StartBiomass(lp_playerID, 600.0);
    }
    else if (autoBF86158B_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (autoBF86158B_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartBiomass(lp_playerID, 300.0);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Hard_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 2;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 0.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/HardP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 3.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-reaper-junker.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Diffs/DiffUnlock/Brutal"));
        lv_biomass += 600.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 5.0;
            lv_speed += 0.125;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 8.0;
                lv_atkspd += 1.0;
                lv_biomass += 300.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Terran_Brutal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto8BFA6F97_ae;
    const int auto8BFA6F97_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto8BFA6F97_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto8BFA6F97_ai >= 0 && lv_tmpStage <= auto8BFA6F97_ae) || (auto8BFA6F97_ai < 0 && lv_tmpStage >= auto8BFA6F97_ae) ) ; lv_tmpStage += auto8BFA6F97_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][0] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Brutal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Brutal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "BrutalP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Brutal_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Brutal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int auto4E767500_val;

    // Variable Initialization

    // Implementation
    auto4E767500_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto4E767500_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 4);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 4);
        }

        gf_Reward_StartBiomass(lp_playerID, 800.0);
    }
    else if (auto4E767500_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto4E767500_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_StartBiomass(lp_playerID, 400.0);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Brutal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 3;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_oLspeed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 50.20, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/BrutalP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/BrutalP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 4.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-hellion-junker.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Diffs/DiffUnlock/Insane"));
        lv_biomass += 800.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 6.0;
            lv_oLspeed += 0.125;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 10.0;
                lv_atkspd += 2.0;
                lv_biomass += 400.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Terran_Insane_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoDABA9AC3_ae;
    const int autoDABA9AC3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        autoDABA9AC3_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoDABA9AC3_ai >= 0 && lv_tmpStage <= autoDABA9AC3_ae) || (autoDABA9AC3_ai < 0 && lv_tmpStage >= autoDABA9AC3_ae) ) ; lv_tmpStage += autoDABA9AC3_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Insane_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Insane"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "InsaneP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Insane_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Insane_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoB72D61D2_val;

    // Variable Initialization

    // Implementation
    autoB72D61D2_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (autoB72D61D2_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 8);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 5);
        }

        gf_Reward_StartBiomass(lp_playerID, 1000.0);
    }
    else if (autoB72D61D2_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (autoB72D61D2_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 18);
        gf_Reward_StartBiomass(lp_playerID, 500.0);
        gf_Reward_AttackSpeed(lp_playerID, 3.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Insane_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 4;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/InsaneP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/InsaneP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 8.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-tank-junker.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Diffs/DiffUnlock/Hardcore"));
        lv_biomass += 1000.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 10.0;
            lv_speed += 0.125;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 18.0;
                lv_atkspd += 3.0;
                lv_biomass += 500.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Terran_Hardcore_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto0456D0C1_ae;
    const int auto0456D0C1_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto0456D0C1_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto0456D0C1_ai >= 0 && lv_tmpStage <= auto0456D0C1_ae) || (auto0456D0C1_ai < 0 && lv_tmpStage >= auto0456D0C1_ae) ) ; lv_tmpStage += auto0456D0C1_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Terran_Hardcore_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hardcore"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "HardcoreP1");
                }

            }

        }
    }

    gf_Acv_Diff_Terran_Hardcore_UI(lp_playerID);
}

void gf_Acv_Diff_Terran_Hardcore_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoE2C91EB2_val;

    // Variable Initialization

    // Implementation
    autoE2C91EB2_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (autoE2C91EB2_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 22);
        if ((gv_gameStarted == false)) {
            gf_UnlockDiff(lp_playerID, 5);
        }

        gf_Reward_StartBiomass(lp_playerID, 2000.0);
    }
    else if (autoE2C91EB2_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 30);
        gf_Reward_Speed(lp_playerID, 0.25);
    }
    else if (autoE2C91EB2_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 60);
        gf_Reward_StartBiomass(lp_playerID, 1000.0);
        gf_Reward_AttackSpeed(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_Diff_Terran_Hardcore_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 5;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardcoreP1/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/HardcoreP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 22.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-vikingassault-junker.dds", PlayerGroupAll());
        lv_biomass += 2000.0;
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 30.0;
            lv_speed += 0.25;
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 60.0;
                lv_atkspd += 5.0;
                lv_biomass += 1000.0;
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }
            else {
                lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
                lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            }
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Terran_Easy_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    int lv_tmpStage;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoC414BFBB_ae;
    const int autoC414BFBB_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        autoC414BFBB_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoC414BFBB_ai >= 0 && lv_tmpStage <= autoC414BFBB_ae) || (autoC414BFBB_ai < 0 && lv_tmpStage >= autoC414BFBB_ae) ) ; lv_tmpStage += autoC414BFBB_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Terran_Easy_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Easy"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "EasyP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Terran_Easy_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Terran_Easy_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoFDE7ADD9_val;

    // Variable Initialization

    // Implementation
    autoFDE7ADD9_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (autoFDE7ADD9_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_StartBiomass(lp_playerID, 200.0);
        gf_Reward_Dmg(lp_playerID, 0.5);
    }
    else if (autoFDE7ADD9_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (autoFDE7ADD9_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_Life(lp_playerID, 10.0);
        gf_Reward_LifeRegen(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Terran_Easy_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 0;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/EasyP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/EasyP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 4.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-marine-covertops.dds", PlayerGroupAll());
        lv_biomass += 200.0;
        lv_dmgarmor += 0.5;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 6.0;
            lv_atkspd += 1.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 10.0;
                lv_lifeenergy += 10.0;
                lv_lifeenergyregen += 2.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Terran_Normal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto19B4BC1D_ae;
    const int auto19B4BC1D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto19B4BC1D_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto19B4BC1D_ai >= 0 && lv_tmpStage <= auto19B4BC1D_ae) || (auto19B4BC1D_ai < 0 && lv_tmpStage >= auto19B4BC1D_ae) ) ; lv_tmpStage += auto19B4BC1D_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Terran_Normal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Normal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "NormalP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Terran_Normal_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Terran_Normal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int auto430F9781_val;

    // Variable Initialization

    // Implementation
    auto430F9781_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto430F9781_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_StartBiomass(lp_playerID, 400.0);
        gf_Reward_Armor(lp_playerID, 0.5);
    }
    else if (auto430F9781_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto430F9781_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_Energy(lp_playerID, 10.0);
        gf_Reward_EnergyRegen(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Terran_Normal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 1;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_oLspeed;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/NormalP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/NormalP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 5.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-marauder-covertops.dds", PlayerGroupAll());
        lv_biomass += 400.0;
        lv_dmgarmor += 0.5;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 7.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 12.0;
                lv_lifeenergy += 10.0;
                lv_lifeenergyregen += 2.0;
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Terran_Hard_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoC9C94D79_ae;
    const int autoC9C94D79_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        autoC9C94D79_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoC9C94D79_ai >= 0 && lv_tmpStage <= autoC9C94D79_ae) || (autoC9C94D79_ai < 0 && lv_tmpStage >= autoC9C94D79_ae) ) ; lv_tmpStage += autoC9C94D79_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][0] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Terran_Hard_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hard"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "HardP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Terran_Hard_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Terran_Hard_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int auto014388D6_val;

    // Variable Initialization

    // Implementation
    auto014388D6_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto014388D6_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_StartBiomass(lp_playerID, 600.0);
        gf_Reward_Dmg(lp_playerID, 1.0);
    }
    else if (auto014388D6_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 9);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (auto014388D6_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 16);
        gf_Reward_Life(lp_playerID, 25.0);
        gf_Reward_LifeRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Terran_Hard_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 2;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 0.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/HardP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 7.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-ghost-covertops.dds", PlayerGroupAll());
        lv_biomass += 600.0;
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 9.0;
            lv_atkspd += 1.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 16.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Terran_Brutal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto7518D146_ae;
    const int auto7518D146_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto7518D146_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto7518D146_ai >= 0 && lv_tmpStage <= auto7518D146_ae) || (auto7518D146_ai < 0 && lv_tmpStage >= auto7518D146_ae) ) ; lv_tmpStage += auto7518D146_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Terran_Brutal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Brutal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "BrutalP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Terran_Brutal_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Terran_Brutal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoE85F0B76_val;

    // Variable Initialization

    // Implementation
    autoE85F0B76_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (autoE85F0B76_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_StartBiomass(lp_playerID, 800.0);
        gf_Reward_Armor(lp_playerID, 1.0);
    }
    else if (autoE85F0B76_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (autoE85F0B76_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 20);
        gf_Reward_Energy(lp_playerID, 25.0);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Terran_Brutal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 3;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_oLspeed;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 50.20, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/BrutalP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/BrutalP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 8.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-hellion-covertops.dds", PlayerGroupAll());
        lv_biomass += 800.0;
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 12.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 20.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffDuo_Terran_Insane_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto3638DEFF_ae;
    const int auto3638DEFF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto3638DEFF_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto3638DEFF_ai >= 0 && lv_tmpStage <= auto3638DEFF_ae) || (auto3638DEFF_ai < 0 && lv_tmpStage >= auto3638DEFF_ae) ) ; lv_tmpStage += auto3638DEFF_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][0] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffDuo_Terran_Insane_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Insane"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "InsaneP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffDuo_Terran_Insane_UI(lp_playerID);
}

void gf_Acv_DiffDuo_Terran_Insane_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int autoAD2963EA_val;

    // Variable Initialization

    // Implementation
    autoAD2963EA_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (autoAD2963EA_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_StartBiomass(lp_playerID, 1000.0);
        gf_Reward_Dmg(lp_playerID, 1.0);
        gf_Reward_Armor(lp_playerID, 1.0);
    }
    else if (autoAD2963EA_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 14);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else if (autoAD2963EA_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 20);
        gf_Reward_Life(lp_playerID, 25.0);
        gf_Reward_LifeRegen(lp_playerID, 5.0);
        gf_Reward_Energy(lp_playerID, 25.0);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffDuo_Terran_Insane_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 4;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/InsaneP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Duo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/InsaneP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 10.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-siegetank-covertops.dds", PlayerGroupAll());
        lv_biomass += 1000.0;
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomass(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 14.0;
            lv_atkspd += 2.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 20.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Duo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Duo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Terran_Hardcore_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 0;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto33500E7B_ae;
    const int auto33500E7B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto33500E7B_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto33500E7B_ai >= 0 && lv_tmpStage <= auto33500E7B_ae) || (auto33500E7B_ai < 0 && lv_tmpStage >= auto33500E7B_ae) ) ; lv_tmpStage += auto33500E7B_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Terran_Hardcore_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hardcore"));
                    gf_AcvInterface_SendNotification(lp_playerID, 1, "HardcoreP1Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Terran_Hardcore_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Terran_Hardcore_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 0;

    // Automatic Variable Declarations
    int auto117A920B_val;

    // Variable Initialization

    // Implementation
    auto117A920B_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto117A920B_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 70);
        gv_playerStats[lp_playerID].lv_allowDanceCommand = true;
    }
    else {
    }
}

void gf_Acv_DiffSolo_Terran_Hardcore_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 5;
    const int lv_part = 0;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardcoreP1/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Duo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/HardcoreP1Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", "7");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        DialogControlSetVisible(lv_acvFrame, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-vikingassault-covertops.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + gf_UI_Newline() + gf_UI_Newline() + StringExternal("Trig/Acv/Diffs/HardcoreP1Solo/Reward"));
        lv_score += 70.0;
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }

    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Easy_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto38C19C2F_ae;
    const int auto38C19C2F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto38C19C2F_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto38C19C2F_ai >= 0 && lv_tmpStage <= auto38C19C2F_ae) || (auto38C19C2F_ai < 0 && lv_tmpStage >= auto38C19C2F_ae) ) ; lv_tmpStage += auto38C19C2F_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Easy_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Easy"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "EasyP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Easy_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Easy_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto12904F6D_val;

    // Variable Initialization

    // Implementation
    auto12904F6D_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto12904F6D_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_StartBiomassp2(lp_playerID, 400.0);
    }
    else if (auto12904F6D_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (auto12904F6D_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Easy_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 0;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/EasyP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/EasyP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 3.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-zealot-aiur.dds", PlayerGroupAll());
        lv_biomass += 400.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 4.0;
            lv_speed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 7.0;
                lv_atkspd += 1.0;
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Normal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoD72EA67F_ae;
    const int autoD72EA67F_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        autoD72EA67F_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoD72EA67F_ai >= 0 && lv_tmpStage <= autoD72EA67F_ae) || (autoD72EA67F_ai < 0 && lv_tmpStage >= autoD72EA67F_ae) ) ; lv_tmpStage += autoD72EA67F_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Normal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Normal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "NormalP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Normal_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Normal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int autoE33C9B2A_val;

    // Variable Initialization

    // Implementation
    autoE33C9B2A_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (autoE33C9B2A_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_StartBiomassp2(lp_playerID, 800.0);
    }
    else if (autoE33C9B2A_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (autoE33C9B2A_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Normal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 1;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_oLspeed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/NormalP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/NormalP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 3.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-stalker-purifier.dds", PlayerGroupAll());
        lv_biomass += 800.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 4.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 7.0;
                lv_atkspd += 1.0;
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Hard_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoD581A4EF_ae;
    const int autoD581A4EF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        autoD581A4EF_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoD581A4EF_ai >= 0 && lv_tmpStage <= autoD581A4EF_ae) || (autoD581A4EF_ai < 0 && lv_tmpStage >= autoD581A4EF_ae) ) ; lv_tmpStage += autoD581A4EF_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Hard_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hard"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "HardP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Hard_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Hard_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto5F0C88D8_val;

    // Variable Initialization

    // Implementation
    auto5F0C88D8_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto5F0C88D8_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_StartBiomassp2(lp_playerID, 1200.0);
    }
    else if (auto5F0C88D8_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (auto5F0C88D8_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 11);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Hard_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 2;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 0.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/HardP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 4.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-dragoon-purifier.dds", PlayerGroupAll());
        lv_biomass += 1200.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 7.0;
            lv_speed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 11.0;
                lv_atkspd += 1.0;
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Brutal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto38BE76B9_ae;
    const int auto38BE76B9_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto38BE76B9_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto38BE76B9_ai >= 0 && lv_tmpStage <= auto38BE76B9_ae) || (auto38BE76B9_ai < 0 && lv_tmpStage >= auto38BE76B9_ae) ) ; lv_tmpStage += auto38BE76B9_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Brutal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Brutal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "BrutalP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Brutal_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Brutal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto5CECC153_val;

    // Variable Initialization

    // Implementation
    auto5CECC153_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto5CECC153_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_StartBiomassp2(lp_playerID, 1600.0);
    }
    else if (auto5CECC153_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto5CECC153_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 13);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Brutal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 3;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_oLspeed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 50.20, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/BrutalP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/BrutalP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 5.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-archon-ihanrii.dds", PlayerGroupAll());
        lv_biomass += 1600.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 8.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 13.0;
                lv_atkspd += 2.0;
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Insane_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto6338ACA8_ae;
    const int auto6338ACA8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto6338ACA8_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto6338ACA8_ai >= 0 && lv_tmpStage <= auto6338ACA8_ae) || (auto6338ACA8_ai < 0 && lv_tmpStage >= auto6338ACA8_ae) ) ; lv_tmpStage += auto6338ACA8_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Insane_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Insane"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "InsaneP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Insane_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Insane_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto3F59159E_val;

    // Variable Initialization

    // Implementation
    auto3F59159E_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto3F59159E_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_StartBiomassp2(lp_playerID, 2000.0);
    }
    else if (auto3F59159E_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 16);
        gf_Reward_Speed(lp_playerID, 0.125);
    }
    else if (auto3F59159E_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 28);
        gf_Reward_AttackSpeed(lp_playerID, 3.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Insane_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 4;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/InsaneP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/InsaneP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 12.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-zeratuldisruptor.dds", PlayerGroupAll());
        lv_biomass += 2000.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 16.0;
            lv_speed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_Speed(lv_speed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 28.0;
                lv_atkspd += 3.0;
                lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_Diff_Protoss_Hardcore_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto3D10A7FC_ae;
    const int auto3D10A7FC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] != 0)) {
        auto3D10A7FC_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto3D10A7FC_ai >= 0 && lv_tmpStage <= auto3D10A7FC_ae) || (auto3D10A7FC_ai < 0 && lv_tmpStage >= auto3D10A7FC_ae) ) ; lv_tmpStage += auto3D10A7FC_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTime[lv_diff][lv_part] <= gv_acvReq.lv_diffTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_Diff_Protoss_Hardcore_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hardcore"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "HardcoreP2");
                }

            }

        }
    }

    gf_Acv_Diff_Protoss_Hardcore_UI(lp_playerID);
}

void gf_Acv_Diff_Protoss_Hardcore_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto0D23E14D_val;

    // Variable Initialization

    // Implementation
    auto0D23E14D_val = gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part];
    if (auto0D23E14D_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 30);
        gf_Reward_StartBiomassp2(lp_playerID, 4000.0);
    }
    else {
    }
}

void gf_Acv_Diff_Protoss_Hardcore_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 5;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_biomass;
    fixed lv_speed;
    fixed lv_atkspd;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardcoreP2/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/HardcoreP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 30.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-colossus.dds", PlayerGroupAll());
        lv_biomass += 4000.0;
        lv_tooltip = (lv_tooltip + gf_UI_StartBiomassp2(lv_biomass));
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Team_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Protoss_Easy_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    int lv_tmpStage;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto6B5825AE_ae;
    const int auto6B5825AE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto6B5825AE_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto6B5825AE_ai >= 0 && lv_tmpStage <= auto6B5825AE_ae) || (auto6B5825AE_ai < 0 && lv_tmpStage >= auto6B5825AE_ae) ) ; lv_tmpStage += auto6B5825AE_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Protoss_Easy_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Easy"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "EasyP2Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Protoss_Easy_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Protoss_Easy_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 0;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int autoCB313CC9_val;

    // Variable Initialization

    // Implementation
    autoCB313CC9_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (autoCB313CC9_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_Dmg(lp_playerID, 0.5);
    }
    else if (autoCB313CC9_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (autoCB313CC9_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_Life(lp_playerID, 10.0);
        gf_Reward_LifeRegen(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Protoss_Easy_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 0;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/EasyP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/EasyP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 6.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-zealot-ihanrii.dds", PlayerGroupAll());
        lv_dmgarmor += 0.5;
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 8.0;
            lv_atkspd += 1.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 12.0;
                lv_lifeenergy += 10.0;
                lv_lifeenergyregen += 2.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Protoss_Normal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto601246FB_ae;
    const int auto601246FB_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto601246FB_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto601246FB_ai >= 0 && lv_tmpStage <= auto601246FB_ae) || (auto601246FB_ai < 0 && lv_tmpStage >= auto601246FB_ae) ) ; lv_tmpStage += auto601246FB_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_part][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Protoss_Normal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "NormalP2Solo");
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Normal"));
                }

            }

        }
    }

    gf_Acv_DiffSolo_Protoss_Normal_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Protoss_Normal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 1;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto27CEDF62_val;

    // Variable Initialization

    // Implementation
    auto27CEDF62_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto27CEDF62_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 7);
        gf_Reward_Armor(lp_playerID, 0.5);
    }
    else if (auto27CEDF62_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 9);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto27CEDF62_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 14);
        gf_Reward_Energy(lp_playerID, 10.0);
        gf_Reward_EnergyRegen(lp_playerID, 2.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Protoss_Normal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 1;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_oLspeed;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/NormalP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/NormalP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 7.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-adept-taldarim.dds", PlayerGroupAll());
        lv_dmgarmor += 0.5;
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 9.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 14.0;
                lv_lifeenergy += 10.0;
                lv_lifeenergyregen += 2.0;
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Protoss_Hard_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto837A81B1_ae;
    const int auto837A81B1_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto837A81B1_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto837A81B1_ai >= 0 && lv_tmpStage <= auto837A81B1_ae) || (auto837A81B1_ai < 0 && lv_tmpStage >= auto837A81B1_ae) ) ; lv_tmpStage += auto837A81B1_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Protoss_Hard_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hard"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "HardP2Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Protoss_Hard_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Protoss_Hard_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 2;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int autoB0D75E1E_val;

    // Variable Initialization

    // Implementation
    autoB0D75E1E_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (autoB0D75E1E_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_Dmg(lp_playerID, 1.0);
    }
    else if (autoB0D75E1E_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (autoB0D75E1E_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 19);
        gf_Reward_Life(lp_playerID, 25.0);
        gf_Reward_LifeRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffSolo_Protoss_Hard_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 2;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 0.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Solo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/HardP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 10.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-sentry-purifier.dds", PlayerGroupAll());
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 12.0;
            lv_atkspd += 1.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 19.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Solo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffDuo_Protoss_Brutal_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto5CAAE6CB_ae;
    const int auto5CAAE6CB_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto5CAAE6CB_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto5CAAE6CB_ai >= 0 && lv_tmpStage <= auto5CAAE6CB_ae) || (auto5CAAE6CB_ai < 0 && lv_tmpStage >= auto5CAAE6CB_ae) ) ; lv_tmpStage += auto5CAAE6CB_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffDuo_Protoss_Brutal_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Brutal"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "BrutalP2Solo");
                }

            }

        }
    }

    gf_Acv_DiffDuo_Protoss_Brutal_UI(lp_playerID);
}

void gf_Acv_DiffDuo_Protoss_Brutal_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 3;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto633111BF_val;

    // Variable Initialization

    // Implementation
    auto633111BF_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto633111BF_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 12);
        gf_Reward_Armor(lp_playerID, 1.0);
    }
    else if (auto633111BF_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 18);
        gf_Reward_OverlordSpeed(lp_playerID, 0.125);
    }
    else if (auto633111BF_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 30);
        gf_Reward_Energy(lp_playerID, 25.0);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffDuo_Protoss_Brutal_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 3;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_oLspeed;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 50.20, 0.00);
    lv_name = StringExternal("Trig/Acv/Diffs/BrutalP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Duo");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/BrutalP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 12.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-immortal-ihanrii.dds", PlayerGroupAll());
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 18.0;
            lv_oLspeed += 0.125;
            lv_tooltip = (lv_tooltip + gf_UI_OverlordSpeed(lv_oLspeed));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 30.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Duo_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Duo_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffTrio_Protoss_Insane_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoCF9170B0_ae;
    const int autoCF9170B0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        autoCF9170B0_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (autoCF9170B0_ai >= 0 && lv_tmpStage <= autoCF9170B0_ae) || (autoCF9170B0_ai < 0 && lv_tmpStage >= autoCF9170B0_ae) ) ; lv_tmpStage += autoCF9170B0_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffTrio_Protoss_Insane_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Insane"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "InsaneP2Solo");
                }

            }

        }
    }

    gf_Acv_DiffTrio_Protoss_Insane_UI(lp_playerID);
}

void gf_Acv_DiffTrio_Protoss_Insane_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 4;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto1C8CCC63_val;

    // Variable Initialization

    // Implementation
    auto1C8CCC63_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto1C8CCC63_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 14);
        gf_Reward_Dmg(lp_playerID, 1.0);
        gf_Reward_Armor(lp_playerID, 1.0);
    }
    else if (auto1C8CCC63_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 20);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else if (auto1C8CCC63_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 30);
        gf_Reward_Life(lp_playerID, 25.0);
        gf_Reward_LifeRegen(lp_playerID, 5.0);
        gf_Reward_Energy(lp_playerID, 25.0);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_Acv_DiffTrio_Protoss_Insane_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 4;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(27.45, 27.45, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/InsaneP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Trio");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/InsaneP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        lv_score += 14.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-darktemplar.dds", PlayerGroupAll());
        lv_dmgarmor += 1.0;
        lv_tooltip = (lv_tooltip + gf_UI_Dmg(lv_dmgarmor));
        lv_tooltip = (lv_tooltip + gf_UI_Armor(lv_dmgarmor));
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 2)) {
            lv_score += 20.0;
            lv_atkspd += 2.0;
            lv_tooltip = (lv_tooltip + gf_UI_AttackSpeed(lv_atkspd));
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 3)) {
                lv_score += 30.0;
                lv_lifeenergy += 25.0;
                lv_lifeenergyregen += 5.0;
                lv_tooltip = (lv_tooltip + gf_UI_Life(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_LifeRegen(lv_lifeenergyregen));
                lv_tooltip = (lv_tooltip + gf_UI_Energy(lv_lifeenergy));
                lv_tooltip = (lv_tooltip + gf_UI_EnergyRegen(lv_lifeenergyregen));
            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == 0)) {
        lv_tooltip = (lv_tooltip + gf_UI_Diff_Trio_Unlock0(TextWithColor(lv_name, lv_color)));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] == gv_acvReq_DifficultyStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + gf_UI_Diff_Trio_Unlock1(TextWithColor(lv_name, lv_color), gv_acvReq.lv_diffSoloTimes[lv_diff][gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]][lv_part], gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_Acv_DiffSolo_Protoss_Hardcore_Check (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 1;
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto17BD6B3E_ae;
    const int auto17BD6B3E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] != 0)) {
        auto17BD6B3E_ae = (gv_acvReq_DifficultyStages - 1);
        lv_tmpStage = 0;
        for ( ; ( (auto17BD6B3E_ai >= 0 && lv_tmpStage <= auto17BD6B3E_ae) || (auto17BD6B3E_ai < 0 && lv_tmpStage >= auto17BD6B3E_ae) ) ; lv_tmpStage += auto17BD6B3E_ai ) {
            if ((gv_playerStats[lp_playerID].lv_difficultyTimeSolo[lv_diff][lv_part] <= gv_acvReq.lv_diffSoloTimes[lv_diff][lv_tmpStage][lv_part]) && (gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] <= lv_tmpStage)) {
                gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] = (lv_tmpStage + 1);
                gf_Acv_DiffSolo_Protoss_Hardcore_Rewards(lp_playerID);
                if ((gv_gameStarted == true)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hardcore"));
                    gf_AcvInterface_SendNotification(lp_playerID, 2, "HardcoreP2Solo");
                }

            }

        }
    }

    gf_Acv_DiffSolo_Protoss_Hardcore_UI(lp_playerID);
}

void gf_Acv_DiffSolo_Protoss_Hardcore_Rewards (int lp_playerID) {
    // Variable Declarations
    const int lv_diff = 5;
    const int lv_part = 1;

    // Automatic Variable Declarations
    int auto7EA331C0_val;

    // Variable Initialization

    // Implementation
    auto7EA331C0_val = gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part];
    if (auto7EA331C0_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("Cheater: ") + TextWithColor(PlayerName(lp_playerID), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerID, false)))));
    }
    else {
    }
}

void gf_Acv_DiffSolo_Protoss_Hardcore_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    const int lv_diff = 5;
    const int lv_part = 1;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    text lv_nameaddition;
    fixed lv_biomass;
    fixed lv_dmgarmor;
    fixed lv_atkspd;
    fixed lv_lifeenergy;
    fixed lv_lifeenergyregen;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 100.00);
    lv_name = StringExternal("Trig/Acv/Diffs/HardcoreP2/Name");
    lv_nameaddition = StringExternal("Trig/Acv/Diffs/NameAddition/Trio");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/HardcoreP2Solo")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part]));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(((lv_name + lv_nameaddition) + gf_UI_IntToSpeedyText(gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part])), lv_color));
    if ((gv_playerStats[lp_playerID].lv_difficultyTimeSoloLevel[lv_diff][lv_part] >= 1)) {
        DialogControlSetVisible(lv_acvFrame, PlayerGroupAll(), true);
        lv_tooltip = (lv_tooltip + gf_UI_Newline() + StringToText("This is impossible without cheats or hacks!"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-zeratul-darkarchon-maelstrom.dds", PlayerGroupAll());
    }

    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_Scientists () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_scientistsReq[lv_tmpStage] = 10;
    lv_tmpStage += 1;
    gv_acvReq.lv_scientistsReq[lv_tmpStage] = 30;
    lv_tmpStage += 1;
    gv_acvReq.lv_scientistsReq[lv_tmpStage] = 75;
    lv_tmpStage += 1;
    gv_acvReq.lv_scientistsReq[lv_tmpStage] = 150;
    lv_tmpStage += 1;
}

void gf_AcvScientists_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto0428B71D_ae;
    const int auto0428B71D_ai = 1;

    // Variable Initialization

    // Implementation
    auto0428B71D_ae = (gv_acvReq_ScientistsStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (auto0428B71D_ai >= 0 && lv_tmpStage <= auto0428B71D_ae) || (auto0428B71D_ai < 0 && lv_tmpStage >= auto0428B71D_ae) ) ; lv_tmpStage += auto0428B71D_ai ) {
        if ((gv_playerStats[lp_playerID].lv_scientists >= gv_acvReq.lv_scientistsReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_scientistsLevel <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_scientistsLevel = (lv_tmpStage + 1);
            gf_AcvScientists_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Scientists"));
                gf_AcvInterface_SendNotification(lp_playerID, 1, "Scientists");
            }

        }

    }
    gf_AcvScientists_UI(lp_playerID);
}

void gf_AcvScientists_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int auto5EC9C511_val;

    // Implementation
    auto5EC9C511_val = gv_playerStats[lp_playerID].lv_scientistsLevel;
    if (auto5EC9C511_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_CyberneticsLevel(lp_playerID);
    }
    else if (auto5EC9C511_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_CyberneticsLevel(lp_playerID);
        gf_Reward_CyberneticsLife(lp_playerID, 50.0);
    }
    else if (auto5EC9C511_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gf_Reward_CyberneticsDmg(lp_playerID, 2.5);
    }
    else if (auto5EC9C511_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 6);
        TechTreeUpgradeAddLevel(lp_playerID, "CyberneticLurkerChargeRestoreUnlock", 1);
        TechTreeUpgradeAddLevel(lp_playerID, "CyberneticRunlingChargeRestoreUnlock", 1);
    }
    else {
    }
}

void gf_AcvScientists_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_cyberlife;
    fixed lv_cyberdmg;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(50.20, 0.00, 100.00);
    lv_name = StringExternal("Trig/Acv/Scientists/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Scientists")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_scientistsLevel));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_scientistsLevel)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_scientistsLevel >= 1)) {
        lv_score += 2.0;
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/LurkerUnlock"));
        if ((gv_playerStats[lp_playerID].lv_scientistsLevel >= 2)) {
            lv_score += 3.0;
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-zergling-rcz.dds", PlayerGroupAll());
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/RunlingUnlock"));
            lv_cyberlife += 50.0;
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/CyberneticsLife/Pre") + TextWithColor(FixedToText(lv_cyberlife, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/Scientists/CyberneticsLife/Post"));
            if ((gv_playerStats[lp_playerID].lv_scientistsLevel >= 3)) {
                lv_score += 4.0;
                lv_cyberdmg += 2.5;
                lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/CyberneticsDmg/Pre") + TextWithColor(FixedToText(lv_cyberdmg, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/Scientists/CyberneticsDmg/Post"));
                if ((gv_playerStats[lp_playerID].lv_scientistsLevel >= 4)) {
                    lv_score += 6.0;
                    lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/CyberneticsRestore"));
                }

            }

        }
        else {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-lurker-rcz.dds", PlayerGroupAll());
        }
        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_scientistsLevel == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_scientistsReq[gv_playerStats[lp_playerID].lv_scientistsLevel]), lv_color) + StringExternal("Trig/Acv/Scientists/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_scientistsLevel == gv_acvReq_ScientistsStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Scientists/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_scientistsReq[gv_playerStats[lp_playerID].lv_scientistsLevel]), lv_color) + StringExternal("Trig/Acv/Scientists/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_Essences () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_essencesReq[lv_tmpStage] = 5;
    lv_tmpStage += 1;
    gv_acvReq.lv_essencesReq[lv_tmpStage] = 15;
    lv_tmpStage += 1;
    gv_acvReq.lv_essencesReq[lv_tmpStage] = 40;
    lv_tmpStage += 1;
    gv_acvReq.lv_essencesReq[lv_tmpStage] = 100;
    lv_tmpStage += 1;
    gv_acvReq.lv_essencesReq[lv_tmpStage] = 200;
    lv_tmpStage += 1;
}

void gf_AcvEssences_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoDBBF77F2_ae;
    const int autoDBBF77F2_ai = 1;

    // Variable Initialization

    // Implementation
    autoDBBF77F2_ae = (gv_acvReq_EssencesStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (autoDBBF77F2_ai >= 0 && lv_tmpStage <= autoDBBF77F2_ae) || (autoDBBF77F2_ai < 0 && lv_tmpStage >= autoDBBF77F2_ae) ) ; lv_tmpStage += autoDBBF77F2_ai ) {
        if ((gv_playerStats[lp_playerID].lv_essences >= gv_acvReq.lv_essencesReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_essencesLevels <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_essencesLevels = (lv_tmpStage + 1);
            gf_AcvEssences_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Essences"));
                gf_AcvInterface_SendNotification(lp_playerID, 1, "Essences");
            }

        }

    }
    gf_AcvEssences_UI(lp_playerID);
}

void gf_AcvEssences_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int autoEEFEED8F_val;

    // Implementation
    autoEEFEED8F_val = gv_playerStats[lp_playerID].lv_essencesLevels;
    if (autoEEFEED8F_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroRoachCharge", 1);
    }
    else if (autoEEFEED8F_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 3);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroBowlerBanemine", 1);
    }
    else if (autoEEFEED8F_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 4);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroRavagerHardened", 1);
    }
    else if (autoEEFEED8F_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 6);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroHydraCorrosive", 1);
    }
    else if (autoEEFEED8F_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 8);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroSwarmQueenFrenzy", 1);
    }
    else {
    }
}

void gf_AcvEssences_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    fixed lv_expPerKill;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(100.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Essences/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Essences")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_essencesLevels));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_essencesLevels)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_essencesLevels >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-progression-zerg-dehaka-15-genemutation.dds", PlayerGroupAll());
        lv_score += 2.0;
        lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/GlueStream"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/HeroRoach")));
        if ((gv_playerStats[lp_playerID].lv_essencesLevels >= 2)) {
            lv_score += 3.0;
            lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/BanemineButton"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/Bowler")));
            if ((gv_playerStats[lp_playerID].lv_essencesLevels >= 3)) {
                lv_score += 4.0;
                lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/HardenedShell"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/Ravager2")));
                if ((gv_playerStats[lp_playerID].lv_essencesLevels >= 4)) {
                    lv_score += 6.0;
                    lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/Poison"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/HeroHydralisk")));
                    if ((gv_playerStats[lp_playerID].lv_essencesLevels >= 5)) {
                        lv_score += 8.0;
                        lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/Frenzy2"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/SwarmQueen2")));
                    }

                }

            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_essencesLevels == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Essences/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_essencesReq[gv_playerStats[lp_playerID].lv_essencesLevels]), lv_color) + StringExternal("Trig/Acv/Essences/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_essencesLevels == gv_acvReq_EssencesStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Essences/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_essencesReq[gv_playerStats[lp_playerID].lv_essencesLevels]), lv_color) + StringExternal("Trig/Acv/Essences/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvReq_PsiOrbs () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_psiOrbsReq[lv_tmpStage] = 3;
    lv_tmpStage += 1;
    gv_acvReq.lv_psiOrbsReq[lv_tmpStage] = 7;
    lv_tmpStage += 1;
    gv_acvReq.lv_psiOrbsReq[lv_tmpStage] = 12;
    lv_tmpStage += 1;
    gv_acvReq.lv_psiOrbsReq[lv_tmpStage] = 25;
    lv_tmpStage += 1;
    gv_acvReq.lv_psiOrbsReq[lv_tmpStage] = 40;
    lv_tmpStage += 1;
}

void gf_AcvPsiOrbs_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int auto113C4F2B_ae;
    const int auto113C4F2B_ai = 1;

    // Variable Initialization

    // Implementation
    auto113C4F2B_ae = (gv_acvReq_PsiOrbsStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (auto113C4F2B_ai >= 0 && lv_tmpStage <= auto113C4F2B_ae) || (auto113C4F2B_ai < 0 && lv_tmpStage >= auto113C4F2B_ae) ) ; lv_tmpStage += auto113C4F2B_ai ) {
        if ((gv_playerStats[lp_playerID].lv_psiOrbs >= gv_acvReq.lv_psiOrbsReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_psiOrbsLevel <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_psiOrbsLevel = (lv_tmpStage + 1);
            gf_AcvPsiOrbs_Rewards(lp_playerID);
            if ((gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/PsiOrbs"));
                gf_AcvInterface_SendNotification(lp_playerID, 2, "PsiOrbs");
            }

        }

    }
    gf_AcvPsiOrbs_UI(lp_playerID);
}

void gf_AcvPsiOrbs_Rewards (int lp_playerID) {
    // Automatic Variable Declarations
    int autoD7E7A36B_val;

    // Implementation
    autoD7E7A36B_val = gv_playerStats[lp_playerID].lv_psiOrbsLevel;
    if (autoD7E7A36B_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        TechTreeUpgradeAddLevel(lp_playerID, "CreepTunnel@Unlock", 1);
    }
    else if (autoD7E7A36B_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 3);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroBowlerKillStreak", 1);
    }
    else if (autoD7E7A36B_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 4);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroRavagerDecoy", 1);
    }
    else if (autoD7E7A36B_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 6);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroHydraFocus", 1);
    }
    else if (autoD7E7A36B_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 8);
        TechTreeUpgradeAddLevel(lp_playerID, "UnlockHeroSwarmQueenEnergyTransfer", 1);
    }
    else {
    }
}

void gf_AcvPsiOrbs_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    fixed lv_expPerKill;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 100.00);
    lv_name = StringExternal("Trig/Acv/PsiOrbs/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/PsiOrbs")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_psiOrbsLevel));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gf_UI_IntToRomanNumberText(gv_playerStats[lp_playerID].lv_psiOrbsLevel)), lv_color));
    if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel >= 1)) {
        lv_tooltip = (lv_tooltip + gf_UI_Newline());
        lv_score += 2.0;
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-protoss-oracle-stasiscalibration.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/Tackle"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/HeroRoach")));
        if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel >= 2)) {
            lv_score += 3.0;
            lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/KillStreak"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/Bowler")));
            if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel >= 3)) {
                lv_score += 4.0;
                lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/Decoy"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/Ravager2")));
                if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel >= 4)) {
                    lv_score += 6.0;
                    lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/FocusOn"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/HeroHydralisk")));
                    if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel >= 5)) {
                        lv_score += 8.0;
                        lv_tooltip = (lv_tooltip + gf_UI_AbilUnlock(TextWithColor(StringExternal("Button/Name/EnergyTransferOn"), Color(100.00, 50.20, 0.00)), StringExternal("Unit/Name/SwarmQueen2")));
                    }

                }

            }

        }

        lv_tooltip = (lv_tooltip + gf_UI_AcvScore(lv_score));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
    }
    if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel == 0)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/PsiOrbs/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_psiOrbsReq[gv_playerStats[lp_playerID].lv_psiOrbsLevel]), lv_color) + StringExternal("Trig/Acv/PsiOrbs/Unlock0/Post"));
    }
    else {
        if ((gv_playerStats[lp_playerID].lv_psiOrbsLevel == gv_acvReq_PsiOrbsStages)) {
            lv_tooltip = (lv_tooltip + gf_UI_MaxStage());
        }
        else {
            lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/PsiOrbs/Unlock1/Pre") + TextWithColor(IntToText(gv_acvReq.lv_psiOrbsReq[gv_playerStats[lp_playerID].lv_psiOrbsLevel]), lv_color) + StringExternal("Trig/Acv/PsiOrbs/Unlock1/Post"));
        }
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvBossKills_Flamer_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int autoBB65BB70_ae;
    const int autoBB65BB70_ai = 1;

    // Variable Initialization

    // Implementation
    autoBB65BB70_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (autoBB65BB70_ai >= 0 && lv_diff <= autoBB65BB70_ae) || (autoBB65BB70_ai < 0 && lv_diff >= autoBB65BB70_ae) ) ; lv_diff += autoBB65BB70_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_diff] == true)) {
            gf_AcvBossKills_Flamer_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_Flamer_UI(lp_playerID);
}

void gf_AcvBossKills_Flamer_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto7C13708B_val;

    // Implementation
    auto7C13708B_val = lp_diff;
    if (auto7C13708B_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Energy(lp_playerID, 5.0);
    }
    else if (auto7C13708B_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Spellpower(lp_playerID, 1.0);
    }
    else if (auto7C13708B_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Energy(lp_playerID, 10.0);
    }
    else if (auto7C13708B_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_Spellpower(lp_playerID, 2.0);
    }
    else if (auto7C13708B_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Energy(lp_playerID, 15.0);
    }
    else if (auto7C13708B_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_EnergyRegen(lp_playerID, 10.0);
    }
    else {
    }
}

void gf_AcvBossKills_Flamer_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_energy;
    fixed lv_spellpower;
    fixed lv_energyReg;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Flamer")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossTFlamerKills[0] == true) || (gv_playerStats[lp_playerID].lv_bossTFlamerKills[1] == true) || (gv_playerStats[lp_playerID].lv_bossTFlamerKills[2] == true) || (gv_playerStats[lp_playerID].lv_bossTFlamerKills[3] == true) || (gv_playerStats[lp_playerID].lv_bossTFlamerKills[4] == true) || (gv_playerStats[lp_playerID].lv_bossTFlamerKills[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-unit-collection-hellbat-junker.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Flamer/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[0] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_energy += 5.0;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[1] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_spellpower += 1.0;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[2] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_energy += 10.0;
            lv_score += 2.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[3] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_spellpower += 2.0;
            lv_score += 3.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[4] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_energy += 15.0;
            lv_score += 5.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFlamerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_energyReg += 10.0;
            lv_score += 10.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_energy != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Energy(lv_energy));
        }

        if ((lv_energyReg != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_EnergyRegen(lv_energyReg));
        }

        if ((lv_spellpower != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Spellpower(lv_spellpower));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossTFlamerKills[0] == true) && (gv_playerStats[lp_playerID].lv_bossTFlamerKills[1] == true) && (gv_playerStats[lp_playerID].lv_bossTFlamerKills[2] == true) && (gv_playerStats[lp_playerID].lv_bossTFlamerKills[3] == true) && (gv_playerStats[lp_playerID].lv_bossTFlamerKills[4] == true) && (gv_playerStats[lp_playerID].lv_bossTFlamerKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Flamer/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Flamer/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_Fortress_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int autoE430A2F9_ae;
    const int autoE430A2F9_ai = 1;

    // Variable Initialization

    // Implementation
    autoE430A2F9_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (autoE430A2F9_ai >= 0 && lv_diff <= autoE430A2F9_ae) || (autoE430A2F9_ai < 0 && lv_diff >= autoE430A2F9_ae) ) ; lv_diff += autoE430A2F9_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_diff] == true)) {
            gf_AcvBossKills_Fortress_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_Fortress_UI(lp_playerID);
}

void gf_AcvBossKills_Fortress_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto8A81409C_val;

    // Implementation
    auto8A81409C_val = lp_diff;
    if (auto8A81409C_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Armor(lp_playerID, 0.25);
    }
    else if (auto8A81409C_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Life(lp_playerID, 20.0);
    }
    else if (auto8A81409C_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Armor(lp_playerID, 0.5);
    }
    else if (auto8A81409C_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_Life(lp_playerID, 40.0);
    }
    else if (auto8A81409C_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Armor(lp_playerID, 1.75);
    }
    else if (auto8A81409C_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_LifeRegen(lp_playerID, 10.0);
    }
    else {
    }
}

void gf_AcvBossKills_Fortress_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_armor;
    fixed lv_life;
    fixed lv_lifeRegen;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Fortress")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossTFortressKills[0] == true) || (gv_playerStats[lp_playerID].lv_bossTFortressKills[1] == true) || (gv_playerStats[lp_playerID].lv_bossTFortressKills[2] == true) || (gv_playerStats[lp_playerID].lv_bossTFortressKills[3] == true) || (gv_playerStats[lp_playerID].lv_bossTFortressKills[4] == true) || (gv_playerStats[lp_playerID].lv_bossTFortressKills[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-research-zerg-planetaryfortress.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Fortress/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[0] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_armor += 0.25;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[1] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_life += 20.0;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[2] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_armor += 0.5;
            lv_score += 2.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[3] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_life += 40.0;
            lv_score += 3.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[4] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_armor += 1.75;
            lv_score += 5.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTFortressKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_lifeRegen += 10.0;
            lv_score += 10.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_armor != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Armor(lv_armor));
        }

        if ((lv_life != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Life(lv_life));
        }

        if ((lv_lifeRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_LifeRegen(lv_lifeRegen));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossTFortressKills[0] == true) && (gv_playerStats[lp_playerID].lv_bossTFortressKills[1] == true) && (gv_playerStats[lp_playerID].lv_bossTFortressKills[2] == true) && (gv_playerStats[lp_playerID].lv_bossTFortressKills[3] == true) && (gv_playerStats[lp_playerID].lv_bossTFortressKills[4] == true) && (gv_playerStats[lp_playerID].lv_bossTFortressKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Fortress/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Fortress/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_Hammer_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int autoE808A889_ae;
    const int autoE808A889_ai = 1;

    // Variable Initialization

    // Implementation
    autoE808A889_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (autoE808A889_ai >= 0 && lv_diff <= autoE808A889_ae) || (autoE808A889_ai < 0 && lv_diff >= autoE808A889_ae) ) ; lv_diff += autoE808A889_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_diff] == true)) {
            gf_AcvBossKills_Hammer_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_Hammer_UI(lp_playerID);
}

void gf_AcvBossKills_Hammer_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto78261F90_val;

    // Implementation
    auto78261F90_val = lp_diff;
    if (auto78261F90_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Dmg(lp_playerID, 0.25);
    }
    else if (auto78261F90_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (auto78261F90_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Dmg(lp_playerID, 0.5);
    }
    else if (auto78261F90_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else if (auto78261F90_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Dmg(lp_playerID, 1.25);
    }
    else if (auto78261F90_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_AttackSpeed(lp_playerID, 3.0);
    }
    else {
    }
}

void gf_AcvBossKills_Hammer_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_dmg;
    fixed lv_atkspd;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;
    lv_atkspd = 1.0;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Hammer")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossTHammerKills[0] == true) || (gv_playerStats[lp_playerID].lv_bossTHammerKills[1] == true) || (gv_playerStats[lp_playerID].lv_bossTHammerKills[2] == true) || (gv_playerStats[lp_playerID].lv_bossTHammerKills[3] == true) || (gv_playerStats[lp_playerID].lv_bossTHammerKills[4] == true) || (gv_playerStats[lp_playerID].lv_bossTHammerKills[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-unit-collection-thor-covertops.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Hammer/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[0] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_dmg += 0.25;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[1] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_atkspd *= 1.01;
            lv_score += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[2] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_dmg += 0.5;
            lv_score += 2.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[3] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_atkspd *= 1.02;
            lv_score += 3.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[4] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_dmg += 1.25;
            lv_score += 5.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossTHammerKills[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_atkspd *= 1.03;
            lv_score += 10.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_dmg != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Dmg(lv_dmg));
        }

        if ((lv_atkspd != 1.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_AttackSpeed(((lv_atkspd - 1.0) * 100.0)));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossTHammerKills[0] == true) && (gv_playerStats[lp_playerID].lv_bossTHammerKills[1] == true) && (gv_playerStats[lp_playerID].lv_bossTHammerKills[2] == true) && (gv_playerStats[lp_playerID].lv_bossTHammerKills[3] == true) && (gv_playerStats[lp_playerID].lv_bossTHammerKills[4] == true) && (gv_playerStats[lp_playerID].lv_bossTHammerKills[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Hammer/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Hammer/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_Madness_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int autoC60E52C3_ae;
    const int autoC60E52C3_ai = 1;

    // Variable Initialization

    // Implementation
    autoC60E52C3_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (autoC60E52C3_ai >= 0 && lv_diff <= autoC60E52C3_ae) || (autoC60E52C3_ai < 0 && lv_diff >= autoC60E52C3_ae) ) ; lv_diff += autoC60E52C3_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_diff] == true)) {
            gf_AcvBossKills_Madness_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_Madness_UI(lp_playerID);
}

void gf_AcvBossKills_Madness_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int autoD5C9EC34_val;

    // Implementation
    autoD5C9EC34_val = lp_diff;
    if (autoD5C9EC34_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Armor(lp_playerID, 0.25);
    }
    else if (autoD5C9EC34_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Life(lp_playerID, 20.0);
    }
    else if (autoD5C9EC34_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Armor(lp_playerID, 0.5);
    }
    else if (autoD5C9EC34_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_Life(lp_playerID, 40.0);
    }
    else if (autoD5C9EC34_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Armor(lp_playerID, 1.75);
    }
    else if (autoD5C9EC34_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_LifeRegen(lp_playerID, 10.0);
    }
    else {
    }
}

void gf_AcvBossKills_Madness_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_armor;
    fixed lv_life;
    fixed lv_lifeRegen;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/Madness")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossPMadness[0] == true) || (gv_playerStats[lp_playerID].lv_bossPMadness[1] == true) || (gv_playerStats[lp_playerID].lv_bossPMadness[2] == true) || (gv_playerStats[lp_playerID].lv_bossPMadness[3] == true) || (gv_playerStats[lp_playerID].lv_bossPMadness[4] == true) || (gv_playerStats[lp_playerID].lv_bossPMadness[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Icons\\btn-unit-protoss-blizzcon17-probe-recolor.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Madness/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_armor += 0.25;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_life += 20.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_armor += 0.5;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_life += 40.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 5.0;
            lv_armor += 1.75;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 10.0;
            lv_lifeRegen += 10.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_armor != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Armor(lv_armor));
        }

        if ((lv_life != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Life(lv_life));
        }

        if ((lv_lifeRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_LifeRegen(lv_lifeRegen));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossPMadness[0] == true) && (gv_playerStats[lp_playerID].lv_bossPMadness[1] == true) && (gv_playerStats[lp_playerID].lv_bossPMadness[2] == true) && (gv_playerStats[lp_playerID].lv_bossPMadness[3] == true) && (gv_playerStats[lp_playerID].lv_bossPMadness[4] == true) && (gv_playerStats[lp_playerID].lv_bossPMadness[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Madness/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Madness/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_TTThunder_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int auto9F964875_ae;
    const int auto9F964875_ai = 1;

    // Variable Initialization

    // Implementation
    auto9F964875_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (auto9F964875_ai >= 0 && lv_diff <= auto9F964875_ae) || (auto9F964875_ai < 0 && lv_diff >= auto9F964875_ae) ) ; lv_diff += auto9F964875_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_diff] == true)) {
            gf_AcvBossKills_TTThunder_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_TTThunder_UI(lp_playerID);
}

void gf_AcvBossKills_TTThunder_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int autoF5CAB429_val;

    // Implementation
    autoF5CAB429_val = lp_diff;
    if (autoF5CAB429_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Energy(lp_playerID, 5.0);
    }
    else if (autoF5CAB429_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Spellpower(lp_playerID, 1.0);
    }
    else if (autoF5CAB429_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Energy(lp_playerID, 10.0);
    }
    else if (autoF5CAB429_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_Spellpower(lp_playerID, 2.0);
    }
    else if (autoF5CAB429_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Energy(lp_playerID, 15.0);
    }
    else if (autoF5CAB429_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_AcvBossKills_TTThunder_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_energy;
    fixed lv_spellpower;
    fixed lv_energyReg;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/Thunder")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[0] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[1] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[2] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[3] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[4] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Icons\\btn-unit-jinara.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Thunder/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_energy += 5.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_spellpower += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_energy += 10.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_spellpower += 2.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 5.0;
            lv_energy += 15.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 10.0;
            lv_energyReg += 5.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_energy != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Energy(lv_energy));
        }

        if ((lv_spellpower != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Spellpower(lv_spellpower));
        }

        if ((lv_energyReg != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_EnergyRegen(lv_energyReg));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[0] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[1] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[2] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[3] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[4] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamThunder[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Thunder/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Thunder/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_TTLightning_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int auto8FCCA600_ae;
    const int auto8FCCA600_ai = 1;

    // Variable Initialization

    // Implementation
    auto8FCCA600_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (auto8FCCA600_ai >= 0 && lv_diff <= auto8FCCA600_ae) || (auto8FCCA600_ai < 0 && lv_diff >= auto8FCCA600_ae) ) ; lv_diff += auto8FCCA600_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_diff] == true)) {
            gf_AcvBossKills_TTLightning_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_TTLightning_UI(lp_playerID);
}

void gf_AcvBossKills_TTLightning_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto906BA371_val;

    // Implementation
    auto906BA371_val = lp_diff;
    if (auto906BA371_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Energy(lp_playerID, 5.0);
    }
    else if (auto906BA371_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Spellpower(lp_playerID, 1.0);
    }
    else if (auto906BA371_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Energy(lp_playerID, 10.0);
    }
    else if (auto906BA371_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_Spellpower(lp_playerID, 2.0);
    }
    else if (auto906BA371_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Energy(lp_playerID, 15.0);
    }
    else if (auto906BA371_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_EnergyRegen(lp_playerID, 5.0);
    }
    else {
    }
}

void gf_AcvBossKills_TTLightning_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_energy;
    fixed lv_spellpower;
    fixed lv_energyReg;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/Lightning")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[0] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[1] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[2] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[3] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[4] == true) || (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Icons\\btn-unit-malash.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Lightning/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_energy += 5.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_spellpower += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_energy += 10.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_spellpower += 2.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 5.0;
            lv_energy += 15.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 10.0;
            lv_energyReg += 5.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_energy != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Energy(lv_energy));
        }

        if ((lv_spellpower != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Spellpower(lv_spellpower));
        }

        if ((lv_energyReg != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_EnergyRegen(lv_energyReg));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[0] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[1] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[2] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[3] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[4] == true) && (gv_playerStats[lp_playerID].lv_bossPTagTeamLightning[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Lightning/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Lightning/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvBossKills_Atlantis_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int auto80AB8A07_ae;
    const int auto80AB8A07_ai = 1;

    // Variable Initialization

    // Implementation
    auto80AB8A07_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (auto80AB8A07_ai >= 0 && lv_diff <= auto80AB8A07_ae) || (auto80AB8A07_ai < 0 && lv_diff >= auto80AB8A07_ae) ) ; lv_diff += auto80AB8A07_ai ) {
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_diff] == true)) {
            gf_AcvBossKills_Atlantis_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_AcvBossKills_Atlantis_UI(lp_playerID);
}

void gf_AcvBossKills_Atlantis_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto58FDE56F_val;

    // Implementation
    auto58FDE56F_val = lp_diff;
    if (auto58FDE56F_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_Dmg(lp_playerID, 0.25);
    }
    else if (auto58FDE56F_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_AttackSpeed(lp_playerID, 1.0);
    }
    else if (auto58FDE56F_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_Dmg(lp_playerID, 0.5);
    }
    else if (auto58FDE56F_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_AttackSpeed(lp_playerID, 2.0);
    }
    else if (auto58FDE56F_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Dmg(lp_playerID, 1.25);
    }
    else if (auto58FDE56F_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 10);
        gf_Reward_AttackSpeed(lp_playerID, 3.0);
    }
    else {
    }
}

void gf_AcvBossKills_Atlantis_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_dmg;
    fixed lv_atkspd;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;
    lv_atkspd = 1.0;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/Atlantis")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_bossPAtlantis[0] == true) || (gv_playerStats[lp_playerID].lv_bossPAtlantis[1] == true) || (gv_playerStats[lp_playerID].lv_bossPAtlantis[2] == true) || (gv_playerStats[lp_playerID].lv_bossPAtlantis[3] == true) || (gv_playerStats[lp_playerID].lv_bossPAtlantis[4] == true) || (gv_playerStats[lp_playerID].lv_bossPAtlantis[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-mothership.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/BossKills/Atlantis/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_dmg += 0.25;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_atkspd *= 1.01;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_dmg += 0.5;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_atkspd *= 1.02;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 5.0;
            lv_dmg += 1.25;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 10.0;
            lv_atkspd *= 1.03;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_dmg != 0.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_Dmg(lv_dmg));
        }

        if ((lv_atkspd != 1.0)) {
            lv_tmpText = (lv_tmpText + gf_UI_AttackSpeed(((lv_atkspd - 1.0) * 100.0)));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_bossPAtlantis[0] == true) && (gv_playerStats[lp_playerID].lv_bossPAtlantis[1] == true) && (gv_playerStats[lp_playerID].lv_bossPAtlantis[2] == true) && (gv_playerStats[lp_playerID].lv_bossPAtlantis[3] == true) && (gv_playerStats[lp_playerID].lv_bossPAtlantis[4] == true) && (gv_playerStats[lp_playerID].lv_bossPAtlantis[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/BossKills/Atlantis/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/BossKills/Atlantis/Unlock0"), PlayerGroupAll());
    }
}

void gf_Acv_Flawless_T_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int auto4089087D_ae;
    const int auto4089087D_ai = 1;

    // Variable Initialization

    // Implementation
    auto4089087D_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (auto4089087D_ai >= 0 && lv_diff <= auto4089087D_ae) || (auto4089087D_ai < 0 && lv_diff >= auto4089087D_ae) ) ; lv_diff += auto4089087D_ai ) {
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[lv_diff] == true)) {
            gf_Acv_Flawless_T_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_Acv_Flawless_T_UI(lp_playerID);
}

void gf_Acv_Flawless_T_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto29781E9E_val;

    // Implementation
    auto29781E9E_val = lp_diff;
    if (auto29781E9E_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_AuraArmor(1.0);
    }
    else if (auto29781E9E_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gf_Reward_AuraEnergyRegen(0.125);
    }
    else if (auto29781E9E_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gf_Reward_AuraAttackSpeed(2.5);
    }
    else if (auto29781E9E_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gf_Reward_AuraLifeRegen(1.0);
    }
    else if (auto29781E9E_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 6);
        gf_Reward_AuraDmg(2.5);
        gf_Reward_AuraDebuffAtkspd(3.0);
    }
    else if (auto29781E9E_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 14);
        gf_Reward_AuraTimeScale(1.0);
    }
    else {
    }
}

void gf_Acv_Flawless_T_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_auraEnergyRegen;
    fixed lv_auraArmor;
    fixed lv_auraLifeRegen;
    fixed lv_auraAtkSpd;
    fixed lv_auraDmg;
    fixed lv_auraAuraTimeScale;
    fixed lv_auraDebuffAtkSpd;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/FlawlessP1")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_flawlessTerran[0] == true) || (gv_playerStats[lp_playerID].lv_flawlessTerran[1] == true) || (gv_playerStats[lp_playerID].lv_flawlessTerran[2] == true) || (gv_playerStats[lp_playerID].lv_flawlessTerran[3] == true) || (gv_playerStats[lp_playerID].lv_flawlessTerran[4] == true) || (gv_playerStats[lp_playerID].lv_flawlessTerran[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-building-zerg-hatchery.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/FlawlessP1/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_auraArmor += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[1] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_auraEnergyRegen += 0.125;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[2] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_auraAtkSpd += 2.5;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[3] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_auraLifeRegen += 1.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[4] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 6.0;
            lv_auraDmg += 2.5;
            lv_auraDebuffAtkSpd += 3.0;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessTerran[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 14.0;
            lv_auraAuraTimeScale += 1.0;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_auraArmor != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/Armor/Pre") + TextWithColor(FixedToText(lv_auraArmor, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/Armor/Post"));
        }

        if ((lv_auraEnergyRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/EnergyRegen/Pre") + TextWithColor(FixedToText(lv_auraEnergyRegen, c_fixedPrecisionAny), Color(70.59, 44.71, 85.10)) + StringExternal("Trig/Acv/FlawlessP1/Reward/EnergyRegen/Post"));
        }

        if ((lv_auraLifeRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/LifeRegen/Pre") + TextWithColor(FixedToText(lv_auraLifeRegen, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/LifeRegen/Post"));
        }

        if ((lv_auraAtkSpd != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/Atkspd/Pre") + TextWithColor(FixedToText(lv_auraAtkSpd, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/Atkspd/Post"));
        }

        if ((lv_auraDmg != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/Dmg/Pre") + TextWithColor(FixedToText(lv_auraDmg, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/Dmg/Post"));
        }

        if ((lv_auraDebuffAtkSpd != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/DebuffAtkspd/Pre") + TextWithColor(FixedToText(lv_auraDebuffAtkSpd, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/DebuffAtkspd/Post"));
        }

        if ((lv_auraAuraTimeScale != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/Timescale/Pre") + TextWithColor(FixedToText(lv_auraAuraTimeScale, c_fixedPrecisionAny), Color(0.00, 100.00, 100.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/Timescale/Post"));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_flawlessTerran[0] == true) && (gv_playerStats[lp_playerID].lv_flawlessTerran[1] == true) && (gv_playerStats[lp_playerID].lv_flawlessTerran[2] == true) && (gv_playerStats[lp_playerID].lv_flawlessTerran[3] == true) && (gv_playerStats[lp_playerID].lv_flawlessTerran[4] == true) && (gv_playerStats[lp_playerID].lv_flawlessTerran[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/FlawlessP1/Unlock0"), PlayerGroupAll());
    }
}

void gf_Acv_Flawless_P_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_diff;

    // Automatic Variable Declarations
    int autoF5262B81_ae;
    const int autoF5262B81_ai = 1;

    // Variable Initialization

    // Implementation
    autoF5262B81_ae = (gv_maxAmountDifficulties - 1);
    lv_diff = 0;
    for ( ; ( (autoF5262B81_ai >= 0 && lv_diff <= autoF5262B81_ae) || (autoF5262B81_ai < 0 && lv_diff >= autoF5262B81_ae) ) ; lv_diff += autoF5262B81_ai ) {
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_diff] == true)) {
            gf_Acv_Flawless_P_Rewards(lp_playerID, lv_diff);
        }

    }
    gf_Acv_Flawless_P_UI(lp_playerID);
}

void gf_Acv_Flawless_P_Rewards (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto4D3877C7_val;

    // Implementation
    auto4D3877C7_val = lp_diff;
    if (auto4D3877C7_val == 0) {
        gf_Reward_AcvScore(lp_playerID, 1);
        gv_hiveAuraStats.lv_armorp2 += 0.5;
    }
    else if (auto4D3877C7_val == 1) {
        gf_Reward_AcvScore(lp_playerID, 2);
        gv_hiveAuraStats.lv_energyregp2 += 0.0625;
    }
    else if (auto4D3877C7_val == 2) {
        gf_Reward_AcvScore(lp_playerID, 3);
        gv_hiveAuraStats.lv_atkspdp2 += 1.25;
    }
    else if (auto4D3877C7_val == 3) {
        gf_Reward_AcvScore(lp_playerID, 4);
        gv_hiveAuraStats.lv_liferegp2 += 0.5;
    }
    else if (auto4D3877C7_val == 4) {
        gf_Reward_AcvScore(lp_playerID, 8);
        gv_hiveAuraStats.lv_dmgp2 += 1.25;
    }
    else if (auto4D3877C7_val == 5) {
        gf_Reward_AcvScore(lp_playerID, 20);
        gv_hiveAuraStats.lv_timescalep2 += 0.5;
    }
    else {
    }
}

void gf_Acv_Flawless_P_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    int lv_iconFrame;
    text lv_tmpText;
    fixed lv_auraEnergyRegen;
    fixed lv_auraArmor;
    fixed lv_auraLifeRegen;
    fixed lv_auraAtkSpd;
    fixed lv_auraDmg;
    fixed lv_auraAuraTimeScale;
    fixed lv_auraDebuffAtkSpd;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_iconFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page2/FlawlessP2")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_iconFrame = DialogControlLastCreated();
    if (((gv_playerStats[lp_playerID].lv_flawlessProtoss[0] == true) || (gv_playerStats[lp_playerID].lv_flawlessProtoss[1] == true) || (gv_playerStats[lp_playerID].lv_flawlessProtoss[2] == true) || (gv_playerStats[lp_playerID].lv_flawlessProtoss[3] == true) || (gv_playerStats[lp_playerID].lv_flawlessProtoss[4] == true) || (gv_playerStats[lp_playerID].lv_flawlessProtoss[5] == true))) {
        libNtve_gf_SetDialogItemImage(lv_iconFrame, "Assets\\Textures\\btn-building-zerg-lair.dds", PlayerGroupAll());
        lv_tmpText = StringExternal("Trig/Acv/FlawlessP2/Name");
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 1.0;
            lv_auraArmor += 0.5;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 2.0;
            lv_auraEnergyRegen += 0.0625;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 3.0;
            lv_auraAtkSpd += 1.25;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 4.0;
            lv_auraLifeRegen += 0.5;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 8.0;
            lv_auraDmg += 1.25;
        }

        lv_tmpInt += 1;
        DialogControlHookup(lv_acvFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Border" + IntToString(lv_tmpInt))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", libNtve_gf_ConvertBooleanToString(gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt]));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[lv_tmpInt] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_IntToDiffShort(lv_tmpInt));
            lv_score += 20.0;
            lv_auraAuraTimeScale += 0.5;
        }

        lv_tmpText = (lv_tmpText + gf_UI_Newline());
        if ((lv_auraArmor != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Reward/Armor/Pre") + TextWithColor(FixedToText(lv_auraArmor, c_fixedPrecisionAny), Color(100.00, 50.20, 0.00)) + StringExternal("Trig/Acv/FlawlessP2/Reward/Armor/Post"));
        }

        if ((lv_auraEnergyRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Reward/EnergyRegen/Pre") + TextWithColor(FixedToText(lv_auraEnergyRegen, c_fixedPrecisionAny), Color(70.59, 44.71, 85.10)) + StringExternal("Trig/Acv/FlawlessP2/Reward/EnergyRegen/Post"));
        }

        if ((lv_auraLifeRegen != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Reward/LifeRegen/Pre") + TextWithColor(FixedToText(lv_auraLifeRegen, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP2/Reward/LifeRegen/Post"));
        }

        if ((lv_auraAtkSpd != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Reward/Atkspd/Pre") + TextWithColor(FixedToText(lv_auraAtkSpd, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP2/Reward/Atkspd/Post"));
        }

        if ((lv_auraDmg != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Reward/Dmg/Pre") + TextWithColor(FixedToText(lv_auraDmg, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00)) + StringExternal("Trig/Acv/FlawlessP2/Reward/Dmg/Post"));
        }

        if ((lv_auraAuraTimeScale != 0.0)) {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP1/Reward/Timescale/Pre") + TextWithColor(FixedToText(lv_auraAuraTimeScale, c_fixedPrecisionAny), Color(0.00, 100.00, 100.00)) + StringExternal("Trig/Acv/FlawlessP1/Reward/Timescale/Post"));
        }

        lv_tmpText = (lv_tmpText + gf_UI_AcvScore(lv_score));
        if ((gv_playerStats[lp_playerID].lv_flawlessProtoss[0] == true) && (gv_playerStats[lp_playerID].lv_flawlessProtoss[1] == true) && (gv_playerStats[lp_playerID].lv_flawlessProtoss[2] == true) && (gv_playerStats[lp_playerID].lv_flawlessProtoss[3] == true) && (gv_playerStats[lp_playerID].lv_flawlessProtoss[4] == true) && (gv_playerStats[lp_playerID].lv_flawlessProtoss[5] == true)) {
            lv_tmpText = (lv_tmpText + gf_UI_MaxStage());
        }
        else {
            lv_tmpText = (lv_tmpText + StringExternal("Trig/Acv/FlawlessP2/Unlock1"));
        }
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, lv_tmpText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_iconFrame, StringExternal("Trig/Acv/FlawlessP2/Unlock0"), PlayerGroupAll());
    }
}

void gf_AcvReq_Score () {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 75;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 150;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 300;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 450;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 600;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 800;
    lv_tmpStage += 1;
    gv_acvReq.lv_scoreReq[lv_tmpStage] = 1000;
    lv_tmpStage += 1;
}

void gf_AcvScore_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStage;

    // Automatic Variable Declarations
    int autoAE48FA62_ae;
    const int autoAE48FA62_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_acvScore_Custom == false)) {
        BoardItemSetText(gv_leaderboard.lv_leaderboard, 2, gv_leaderboard.lv_playerRow[lp_playerID], IntToText(gv_playerStats[lp_playerID].lv_acvScore));
    }

    autoAE48FA62_ae = (gv_acvReq_ScoresStages - 1);
    lv_tmpStage = 0;
    for ( ; ( (autoAE48FA62_ai >= 0 && lv_tmpStage <= autoAE48FA62_ae) || (autoAE48FA62_ai < 0 && lv_tmpStage >= autoAE48FA62_ae) ) ; lv_tmpStage += autoAE48FA62_ai ) {
        if ((gv_playerStats[lp_playerID].lv_acvScore >= gv_acvReq.lv_scoreReq[lv_tmpStage]) && (gv_playerStats[lp_playerID].lv_acvScoreLevel <= lv_tmpStage)) {
            gv_playerStats[lp_playerID].lv_acvScoreLevel = (lv_tmpStage + 1);
            if ((gv_playerStats[lp_playerID].lv_acvScoreRank_Custom == false)) {
                gv_playerStats[lp_playerID].lv_acvScoreRank = gv_leaderboard.lv_rankNames[gv_playerStats[lp_playerID].lv_acvScoreLevel];
                BoardItemSetText(gv_leaderboard.lv_leaderboard, 1, gv_leaderboard.lv_playerRow[lp_playerID], (gv_playerStats[lp_playerID].lv_acvScoreRank + PlayerName(lp_playerID)));
            }

            if ((gv_gameStarted == true)) {
                gf_AcvInterface_SendNotification(lp_playerID, 1, "Score");
            }

        }

    }
    gf_AcvScore_UI(lp_playerID);
}

void gf_AcvScore_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;

    // Automatic Variable Declarations
    int auto891D84FC_val;

    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Score/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Score")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(gv_playerStats[lp_playerID].lv_acvScoreLevel));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor((lv_name + gv_leaderboard.lv_rankNames[gv_playerStats[lp_playerID].lv_acvScoreLevel]), lv_color));
    auto891D84FC_val = gv_playerStats[lp_playerID].lv_acvScoreLevel;
    if (auto891D84FC_val == 0) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-larvalqueen.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 1) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-feederling.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 2) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Icons\\btn-unit-zerg-broodling.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 3) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-collection-drone-remastered.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 4) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-locust.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 5) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-zergling.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 6) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-roachlings.dds", PlayerGroupAll());
    }
    else if (auto891D84FC_val == 7) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-unit-zerg-ultralisk-remastered.dds", PlayerGroupAll());
    }
    else {
    }
    if ((gv_playerStats[lp_playerID].lv_acvScoreLevel == gv_acvReq_ScoresStages)) {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Score/MaxRank"));
    }
    else {
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Score/Unlock0/Pre") + TextWithColor(IntToText(gv_acvReq.lv_scoreReq[gv_playerStats[lp_playerID].lv_acvScoreLevel]), lv_color) + StringExternal("Trig/Acv/Score/Unlock0/Post"));
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_AcvTutorial_UnlockCheck (int lp_playerID) {
    // Variable Declarations
    int lv_tmpStages;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_playerStats[lp_playerID].lv_tutorialCompleted == true)) {
        gf_Reward_AcvScore(lp_playerID, 5);
        gf_Reward_Life(lp_playerID, 50.0);
    }

    gf_AcvTutorial_UI(lp_playerID);
}

void gf_AcvTutorial_UI (int lp_playerID) {
    // Variable Declarations
    int lv_acvFrame;
    text lv_tooltip;
    color lv_color;
    text lv_name;
    fixed lv_startingExp;
    fixed lv_expPerKill;
    int lv_tmpInt;
    fixed lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acvFrame = c_invalidDialogControlId;
    lv_color = Color(0.00, 100.00, 0.00);
    lv_name = StringExternal("Trig/Acv/Tutorial/Name");

    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page1/Tutorial")));
    lv_acvFrame = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_acvFrame, PlayerGroupAll(), "Stage", IntToString(BoolToInt(gv_playerStats[lp_playerID].lv_tutorialCompleted)));
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "Icon");
    lv_tooltip = (TextWithColor(lv_name, lv_color));
    lv_tooltip = (lv_tooltip + gf_UI_Newline());
    if ((gv_playerStats[lp_playerID].lv_tutorialCompleted == true)) {
        lv_score += 5.0;
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-ability-kerrigan-revive.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + gf_UI_Life(50.0) + gf_UI_AcvScore(lv_score) + StringExternal("Trig/Acv/Tutorial/Completed"));
    }
    else {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", PlayerGroupAll());
        lv_tooltip = (lv_tooltip + StringExternal("Trig/Acv/Tutorial/Uncompleted"));
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip, PlayerGroupAll());
}

void gf_HeroSelect_Finish () {
    // Variable Declarations
    int lv_tmpPlayer;
    int[gv_maxAmountDifficulties + 1] lv_diffVotesSum;
    text lv_text;

    // Automatic Variable Declarations
    const int autoD713CB99_ae = gv_maxAmountPlayers;
    const int autoD713CB99_ai = 1;
    playergroup auto51D71EAD_g;
    playergroup autoFABA3358_g;
    const int auto1F37244D_ae = gv_maxAmountDifficulties;
    int auto1F37244D_var;
    int auto88283F7E_val;
    playergroup auto2EF5BFA7_g;

    // Variable Initialization

    // Implementation
    gf_HeroSelect_Finish_Triggers_Deactivate();
    lv_tmpPlayer = 1;
    for ( ; ( (autoD713CB99_ai >= 0 && lv_tmpPlayer <= autoD713CB99_ae) || (autoD713CB99_ai < 0 && lv_tmpPlayer >= autoD713CB99_ae) ) ; lv_tmpPlayer += autoD713CB99_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDummyPrespawn", 0, lv_tmpPlayer, PointFromId(521895522));
        gv_heroUnits[lv_tmpPlayer] = UnitLastCreated();
    }
    auto51D71EAD_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(auto51D71EAD_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        UnitRemove(gv_heroUnits[lv_tmpPlayer]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroSelection.lv_hero_Info[gv_heroSelection.lv_player_Hero_Selected[lv_tmpPlayer]].lv_hero, 0, lv_tmpPlayer, gv_enemy_ActivePart.lv_playerSpawnPoints[lv_tmpPlayer]);
        gv_heroUnits[lv_tmpPlayer] = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_heroUnits[lv_tmpPlayer]), c_animNameDefault, "Unload End", c_animFlagNonLooping, c_animTimeDefault);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, gv_playerStats[lv_tmpPlayer].lv_startEXP);
        UnitGroupAdd(gv_heroUnitGroup, UnitLastCreated());
        if ((gv_options.lv_controlGroup_Flag[0][lv_tmpPlayer] == true)) {
            UnitControlGroupAddUnit(lv_tmpPlayer, gv_options.lv_controlGroup_Group[0][lv_tmpPlayer], UnitLastCreated());
        }

        UnitGroupSelect(UnitGroupSelected(lv_tmpPlayer), lv_tmpPlayer, false);
        UnitSelect(UnitLastCreated(), lv_tmpPlayer, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BaseOverlord", 0, lv_tmpPlayer, gv_enemy_ActivePart.lv_playerSpawnPoints[lv_tmpPlayer]);
        if ((gv_options.lv_controlGroup_Flag[1][lv_tmpPlayer] == true)) {
            UnitControlGroupAddUnit(lv_tmpPlayer, gv_options.lv_controlGroup_Group[1][lv_tmpPlayer], UnitLastCreated());
        }

        gv_baseOverlord[lv_tmpPlayer] = UnitLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_baseOverlord[lv_tmpPlayer]), c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    }
    autoFABA3358_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(autoFABA3358_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        if ((gv_heroSelection.lv_player_Difficulty_Selected[lv_tmpPlayer] >= 0)) {
            gv_heroSelection.lv_difficulty_TotalVotes += 1;
            lv_diffVotesSum[gv_heroSelection.lv_player_Difficulty_Selected[lv_tmpPlayer]] += 1;
        }

    }
    if ((gv_heroSelection.lv_difficulty_TotalVotes == 0)) {
        gv_difficulty = 0;
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Easy");
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Trig/HeroSelection/Diff/None"));
    }
    else {
        gv_difficulty = 0;
        auto1F37244D_var = 1;
        for ( ; auto1F37244D_var <= auto1F37244D_ae; auto1F37244D_var += 1 ) {
            if ((lv_diffVotesSum[auto1F37244D_var] > lv_diffVotesSum[gv_difficulty])) {
                gv_difficulty = auto1F37244D_var;
            }

        }
        auto88283F7E_val = gv_difficulty;
        if (auto88283F7E_val == -1) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Any");
        }
        else if (auto88283F7E_val == 0) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Easy");
        }
        else if (auto88283F7E_val == 1) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Normal");
        }
        else if (auto88283F7E_val == 2) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hard");
        }
        else if (auto88283F7E_val == 3) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Brutal");
        }
        else if (auto88283F7E_val == 4) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Insane");
        }
        else if (auto88283F7E_val == 5) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hardcore");
        }
        else if (auto88283F7E_val == 6) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Custom");
        }
        else {
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Trig/HeroSelection/Diff/Pre") + lv_text));
    }
    auto2EF5BFA7_g = PlayerGroupAll();
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(auto2EF5BFA7_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        PlayerModifyPropertyInt(lv_tmpPlayer, c_playerPropCustom, c_playerPropOperSetTo, gv_difficulty);
    }
    if ((gv_gameMode == "Classic")) {
        gf_Set_Difficulty_Variables();
    }
    else {
        gf_HeroSelect_CustomDiff_SetOptions();
    }
    gf_Init_Scientists();
    gf_Init_Essences_LarvaSpawns();
    gf_Init_Objectives();
    gf_IncreaseUpgradeCount(50.0);
    gf_StatsInterface_Update();
    BoardSetName(gv_leaderboard.lv_leaderboard, (StringExternal("Trig/HeroSelection/Diff/Pre") + lv_text), Color(100.00, 100.00, 100.00));
    BoardSetAnchor(gv_leaderboard.lv_leaderboard, c_anchorTopRight, 0, 0);
    DialogControlSetVisible(gv_heroSelection.lv_mainFrame, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sSF_CustomUI.lv_mainFrame, PlayerGroupAll(), true);
    GameSetMissionTimePaused(false);
    TimerStart(gv_spawnTimer, 20.0, true, c_timeGame);
    TimerStart(gv_idleTimer, 60.0, true, c_timeGame);
    gf_HeroSelect_Finish_Triggers_Activate();
    gv_gameStarted = true;
    Wait(2.0, c_timeGame);
    TimerStart(gv_saveTimer, 60.0, true, c_timeGame);
}

void gf_HeroSelect_Finish_Triggers_Deactivate () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_HeroSelect_ReadyButtonHandler, false);
    TriggerEnable(gt_HeroSelect_Timer, false);
    TriggerEnable(gt_HeroSelect_HeroButtonHandler, false);
    TriggerEnable(gt_HeroSelect_DiffButtonHandler, false);
    TriggerEnable(gt_HeroSelect_AutoSelection_ButtonHandler, false);
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_CreateButton, false);
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_InputChanged, false);
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_LoadButton, false);
    TriggerEnable(gt_HeroSelect_CustomDiff_DiffPresetHandler, false);
    TriggerEnable(gt_HeroSelect_CustomDiff_EditboxEdits, false);
}

void gf_HeroSelect_Finish_Triggers_Activate () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_BankPeriodicSave, true);
    TriggerEnable(gt_PeriodicStatsInterfaceUpdate, true);
    TriggerEnable(gt_Votekick_KickButtonHandler, true);
    TriggerEnable(gt_OptionsInterface_ControlGroups_CheckboxHandler, true);
    TriggerEnable(gt_OptionsInterface_ControlGroups_PulldownHandler, true);
    TriggerEnable(gt_OptionsInterface_HeroSelection_CheckboxHandler, true);
    TriggerEnable(gt_OptionsInterface_HeroSelection_PulldownHandler, true);
    TriggerEnable(gt_Scientists_OverlordCapture, true);
}

void gf_HeroSelect_Showcase_SetDiff (int lp_playerID, text lp_diff) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(gv_heroSelection.lv_playerShowcase[lp_playerID], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Diff"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_diff, PlayerGroupAll());
}

void gf_HeroSelect_Showcase_SetRank (int lp_playerID) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(gv_heroSelection.lv_playerShowcase[lp_playerID], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Rank"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (TextWithColor((gv_playerStats[lp_playerID].lv_acvScoreRank + StringToText("(") + IntToText(gv_playerStats[lp_playerID].lv_acvScore) + StringToText(")")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerID, false)))), PlayerGroupAll());
}

void gf_Init_HeroList () {
    // Automatic Variable Declarations
    // Implementation
    gf_AddHeroInfo(0, "Assets\\Textures\\btn-unit-roach-collectionskin-deluxe.dds", StringExternal("Trig/HeroSelection/Hero/Spitter/Unlock"), StringExternal("Trig/HeroSelection/Hero/Spitter/Long"), UnitTypeGetName("HeroRoach"), "HeroRoach");
    gf_AddHeroInfo(1, "Assets\\Textures\\btn-unit-zerg-mutalisk-broodlord.dds", StringExternal("Trig/HeroSelection/Hero/Bowler/Unlock"), StringExternal("Trig/HeroSelection/Hero/Bowler/Long"), UnitTypeGetName("Bowler"), "Bowler");
    gf_AddHeroInfo(2, "Assets\\Textures\\btn-unit-collection-bone-ravager.dds", StringExternal("Trig/HeroSelection/Hero/Hardskin/Unlock"), StringExternal("Trig/HeroSelection/Hero/Hardskin/Long"), UnitTypeGetName("Ravager2"), "Ravager2");
    gf_AddHeroInfo(3, "Assets\\Textures\\btn-unit-collection-noxious-hydralisk.dds", StringExternal("Trig/HeroSelection/Hero/Stinger/Unlock"), StringExternal("Trig/HeroSelection/Hero/Stinger/Long"), UnitTypeGetName("HeroHydralisk"), "HeroHydralisk");
    gf_AddHeroInfo(4, "Assets\\Textures\\btn-unit-zerg-broodqueen.dds", StringExternal("Trig/HeroSelection/Hero/SwarmMother/Unlock"), StringExternal("Trig/HeroSelection/Hero/SwarmMother/Long"), UnitTypeGetName("SwarmQueen2"), "SwarmQueen2");
}

void gf_AddHeroInfo (int lp_iD, string lp_icon, text lp_unlockTooltip, text lp_longDescription, text lp_name, string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_heroSelection.lv_hero_Info[lp_iD].lv_icon = lp_icon;
    gv_heroSelection.lv_hero_Info[lp_iD].lv_unlockTooltip = lp_unlockTooltip;
    gv_heroSelection.lv_hero_Info[lp_iD].lv_longDescription = lp_longDescription;
    gv_heroSelection.lv_hero_Info[lp_iD].lv_name = lp_name;
    gv_heroSelection.lv_hero_Info[lp_iD].lv_hero = lp_unit;
}

void gf_Init_HeroSelection () {
    int init_i;

    // Variable Declarations
    int lv_currentframe;
    int lv_tmpInt;
    string[gv_maxCustomDiffSettings + 1] lv_customdifflayoutnames;
    gs_HeroSelect_CustomDiff_DiffPreset lv_settings;

    // Automatic Variable Declarations
    const int auto5DDF5A37_ae = 6;
    int auto5DDF5A37_var;
    int auto055366C5_ae;
    int auto055366C5_var;
    int auto92F4E69A_ae;
    int auto92F4E69A_var;
    int autoC2568119_val;
    playergroup auto643D2D47_g;
    int auto643D2D47_var;
    const int auto58140AE2_ae = gv_maxCustomDiffSettings;
    int auto58140AE2_var;
    int autoC7DB7F99_ae;
    int autoC7DB7F99_var;

    // Variable Initialization
    lv_currentframe = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_maxCustomDiffSettings; init_i += 1) {
        lv_customdifflayoutnames[init_i] = "";
    }

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SSF_HeroSelection");
    gv_heroSelection.lv_mainFrame = DialogControlLastCreated();
    auto5DDF5A37_var = 1;
    for ( ; auto5DDF5A37_var <= auto5DDF5A37_ae; auto5DDF5A37_var += 1 ) {
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ShowcasePlayer" + IntToString(auto5DDF5A37_var))));
        gv_heroSelection.lv_playerShowcase[auto5DDF5A37_var] = DialogControlLastCreated();
        if (((PlayerType(auto5DDF5A37_var) == c_playerTypeUser) || (PlayerType(auto5DDF5A37_var) == c_playerTypeComputer))) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlHookup(gv_heroSelection.lv_playerShowcase[auto5DDF5A37_var], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("PlayerName"));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(PlayerName(auto5DDF5A37_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto5DDF5A37_var, false))), PlayerGroupAll());
        }
        else {
            if ((auto5DDF5A37_var != 1)) {
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_heroSelection.lv_playerShowcase[(auto5DDF5A37_var - 1)], c_anchorTopLeft, 0, 0);
            }

        }
    }
    auto055366C5_ae = (gv_maxHeroList - 1);
    auto055366C5_var = 0;
    for ( ; auto055366C5_var <= auto055366C5_ae; auto055366C5_var += 1 ) {
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Hero" + IntToString((auto055366C5_var + 1)) + "/Button")));
        gv_heroSelection.lv_hero_Button[auto055366C5_var] = DialogControlLastCreated();
    }
    DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, "AutoSelectionButton");
    gv_heroSelection.lv_autoSelection_Button = DialogControlLastCreated();
    DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeLabel, "CounterLabel");
    gv_heroSelection.lv_timer_Label = DialogControlLastCreated();
    DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, "ReadyButton");
    gv_heroSelection.lv_ready_Button = DialogControlLastCreated();
    if ((gv_gameMode == "Classic")) {
        if ((gv_playerAmountStart != 1)) {
            DialogControlSetVisible(gv_heroSelection.lv_timer_Label, PlayerGroupAll(), true);
            TriggerEnable(gt_HeroSelect_Timer, true);
        }

        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, "GameModeClassic");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("GameModeClassic/Diff-1"));
        gv_heroSelection.lv_difficulty_Button_Any = DialogControlLastCreated();
        auto92F4E69A_ae = (gv_maxAmountDifficulties - 1);
        auto92F4E69A_var = 0;
        for ( ; auto92F4E69A_var <= auto92F4E69A_ae; auto92F4E69A_var += 1 ) {
            DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("GameModeClassic/Diff" + IntToString(auto92F4E69A_var))));
            gv_heroSelection.lv_difficulty_Button[auto92F4E69A_var] = DialogControlLastCreated();
            autoC2568119_val = auto92F4E69A_var;
            if (autoC2568119_val == 0) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/EasyTooltip") + StringExternal("Behavior/Tooltip/DifficultyEasy")), PlayerGroupAll());
            }
            else if (autoC2568119_val == 1) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/NormalTooltip") + StringExternal("Behavior/Tooltip/DifficultyNormal")), PlayerGroupAll());
            }
            else if (autoC2568119_val == 2) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/HardTooltip") + StringExternal("Behavior/Tooltip/DifficultyHard")), PlayerGroupAll());
            }
            else if (autoC2568119_val == 3) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/BrutalTooltip") + StringExternal("Behavior/Tooltip/DifficultyBrutal")), PlayerGroupAll());
            }
            else if (autoC2568119_val == 4) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/InsaneTooltip") + StringExternal("Behavior/Tooltip/DifficultyInsane")), PlayerGroupAll());
            }
            else if (autoC2568119_val == 5) {
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Trig/HeroSelection/Dialog/DiffButton/HardcoreTooltip") + StringExternal("Behavior/Tooltip/DifficultyHardcore")), PlayerGroupAll());
            }
            else {
            }
        }
    }

    if ((gv_gameMode == "CustomDiff")) {
        auto643D2D47_g = gv_startingPlayerGroup;
        auto643D2D47_var = -1;
        while (true) {
            auto643D2D47_var = PlayerGroupNextPlayer(auto643D2D47_g, auto643D2D47_var);
            if (auto643D2D47_var < 0) { break; }
            gv_heroSelection.lv_player_Difficulty_Selected[auto643D2D47_var] = 6;
        }
        TriggerEnable(gt_HeroSelect_DiffButtonHandler, false);
        TriggerEnable(gt_HeroSelect_CustomDiff_DiffPresetHandler, true);
        TriggerEnable(gt_HeroSelect_CustomDiff_EditboxEdits, true);
        TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_LoadButton, true);
        TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_InputChanged, true);
        TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_CreateButton, true);
        gv_heroSelection.lv_customDiffHost = PlayerGroupPlayer(gv_playerGroup, 1);
        gv_heroSelection.lv_customDiffNotHostPlayerGroup = PlayerGroupCopy(gv_playerGroup);
        PlayerGroupRemove(gv_heroSelection.lv_customDiffNotHostPlayerGroup, gv_heroSelection.lv_customDiffHost);
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, "GameModeCustom");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), "Host", "True");
        lv_tmpInt = 0;
        lv_customdifflayoutnames[lv_tmpInt] = "DmgFlat";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "DmgPercent";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "Atkspd";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "Vitals";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "ArmorFlat";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "ArmorPercent";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "RegenFlat";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "RegenPercent";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "Movementspeed";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "SpawnMultiplier";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "BiomassMultiplier";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "ExpMultiplier";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "Upgrades";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "StartBiomass";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "StartExp";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "BossAbilities";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "StartMutation";
        lv_tmpInt += 1;
        lv_customdifflayoutnames[lv_tmpInt] = "Lifes";
        auto58140AE2_var = 0;
        for ( ; auto58140AE2_var <= auto58140AE2_ae; auto58140AE2_var += 1 ) {
            DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("GameModeCustom/" + lv_customdifflayoutnames[auto58140AE2_var] + "/InputLabel")));
            gv_heroSelection.lv_customDiffLabels[auto58140AE2_var] = DialogControlLastCreated();
            DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeEditBox, libNtve_gf_ConvertStringToUILayoutFrameName(("GameModeCustom/" + lv_customdifflayoutnames[auto58140AE2_var] + "/Input")));
            gv_heroSelection.lv_customDiffEditboxes[auto58140AE2_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "0", PlayerGroupAll());
        }
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeEditBox, "GameModeCustom/CustomPreset/Input");
        gv_heroSelection.lv_customDiffCustomPresetInputEditBox = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), true);
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/CreateInputButton");
        gv_heroSelection.lv_customDiffCustomPresetInputCreateButton = DialogControlLastCreated();
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/CopyInputButton");
        gv_heroSelection.lv_customDiffCustomPresetInputCopyClipboardButton = DialogControlLastCreated();
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/LoadInputButton");
        gv_heroSelection.lv_customDiffCustomPresetInputLoadButton = DialogControlLastCreated();

        autoC7DB7F99_ae = (gv_maxAmountDifficulties - 1);
        autoC7DB7F99_var = 0;
        for ( ; autoC7DB7F99_var <= autoC7DB7F99_ae; autoC7DB7F99_var += 1 ) {
            DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("GameModeCustom/DiffPreset" + IntToString(autoC7DB7F99_var))));
            gv_heroSelection.lv_customDiffPresetButtons[autoC7DB7F99_var] = DialogControlLastCreated();
        }

        gf_HeroSelect_CustomDiff_DiffPresetReturn(lv_settings, 0);
        gf_HeroSelect_CustomDiff_DiffPresetSet(lv_settings);
    }

}

int gf_HeroSelect_GetHeroButtonID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto8B2E521F_ae;
    const int auto8B2E521F_ai = 1;

    // Variable Initialization

    // Implementation
    auto8B2E521F_ae = (gv_maxHeroList - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto8B2E521F_ai >= 0 && lv_tmpInt <= auto8B2E521F_ae) || (auto8B2E521F_ai < 0 && lv_tmpInt >= auto8B2E521F_ae) ) ; lv_tmpInt += auto8B2E521F_ai ) {
        if ((lp_dialogItem == gv_heroSelection.lv_hero_Button[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    return -1;
}

void gf_HeroSelect_SelectHero (int lp_playerID, int lp_heroID) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(lp_playerID), true);
    DialogControlSetVisible(gv_heroSelection.lv_autoSelection_Button, PlayerGroupSingle(lp_playerID), true);
    DialogControlSetAnimationState(gv_heroSelection.lv_playerShowcase[lp_playerID], PlayerGroupSingle(lp_playerID), "Hero", IntToString((lp_heroID + 1)));
    gv_heroSelection.lv_player_Hero_Selected[lp_playerID] = lp_heroID;
    if (((gv_options.lv_heroSelection_Flag[lp_playerID] == false) || (gv_heroSelection.lv_player_Hero_Selected[lp_playerID] != gv_options.lv_heroSelection_Hero[lp_playerID]))) {
        DialogControlSetEnabled(gv_heroSelection.lv_autoSelection_Button, PlayerGroupSingle(lp_playerID), true);
    }
    else {
        DialogControlSetEnabled(gv_heroSelection.lv_autoSelection_Button, PlayerGroupSingle(lp_playerID), false);
    }
}

int gf_HeroSelect_GetDiffButtonID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    const int autoDDAF6A8D_ae = 5;
    const int autoDDAF6A8D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tmpInt = 0;
    for ( ; ( (autoDDAF6A8D_ai >= 0 && lv_tmpInt <= autoDDAF6A8D_ae) || (autoDDAF6A8D_ai < 0 && lv_tmpInt >= autoDDAF6A8D_ae) ) ; lv_tmpInt += autoDDAF6A8D_ai ) {
        if ((lp_dialogItem == gv_heroSelection.lv_difficulty_Button[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    if ((lp_dialogItem == gv_heroSelection.lv_difficulty_Button_Any)) {
        return -1;
    }

    return -2;
}

void gf_UnlockHero (int lp_playerID, int lp_heroID) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameStarted == false)) {
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Hero" + IntToString((lp_heroID + 1)))));
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Unlocked", "True");
    }

    DialogControlAddItem(gv_options.lv_heroSelection_Pulldown, PlayerGroupSingle(lp_playerID), gv_heroSelection.lv_hero_Info[lp_heroID].lv_name);
    gv_options.lv_heroSelection_HeroListIndex[lp_playerID][DialogControlGetItemCount(gv_options.lv_heroSelection_Pulldown, lp_playerID)] = lp_heroID;
}

void gf_UnlockDiff (int lp_playerID, int lp_diff) {
    // Automatic Variable Declarations
    int auto7811B866_ae;
    int auto7811B866_var;

    // Implementation
    if ((gv_gameMode == "Classic")) {
        auto7811B866_ae = lp_diff;
        auto7811B866_var = 1;
        for ( ; auto7811B866_var <= auto7811B866_ae; auto7811B866_var += 1 ) {
            DialogControlSetEnabled(gv_heroSelection.lv_difficulty_Button[auto7811B866_var], PlayerGroupSingle(lp_playerID), true);
        }
    }

}

bool gf_isNumber (string lp_string) {
    // Variable Declarations
    int lv_length;
    int lv_currentposition;
    string lv_currentletter;
    bool lv_hasdecimalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_length = StringLength(lp_string);
    lv_currentletter = "";

    // Implementation
    if ((lv_length == 0)) {
        return false;
    }

    lv_currentletter = StringSub(lp_string, (lv_currentposition + 1), (lv_currentposition + 1));
    if ((lv_currentletter == "-")) {
        if ((lv_length == 1)) {
            return false;
        }

        lv_currentposition += 1;
    }

    while ((lv_currentposition < lv_length)) {
        lv_currentletter = StringSub(lp_string, (lv_currentposition + 1), (lv_currentposition + 1));
        if (((lv_currentletter == "."))) {
            if ((lv_hasdecimalpoint == false)) {
                lv_hasdecimalpoint = true;
            }
            else {
                return false;
            }
        }
        else {
            if (((lv_currentletter == "0") || (lv_currentletter == "1") || (lv_currentletter == "2") || (lv_currentletter == "3") || (lv_currentletter == "4") || (lv_currentletter == "5") || (lv_currentletter == "6") || (lv_currentletter == "7") || (lv_currentletter == "8") || (lv_currentletter == "9"))) {
            }
            else {
                return false;
            }
        }
        lv_currentposition += 1;
    }
    return true;
}

int gf_HeroSelect_CustomDiff_GetEditboxID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    const int autoB4881D80_ae = gv_maxCustomDiffSettings;
    const int autoB4881D80_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tmpInt = 0;
    for ( ; ( (autoB4881D80_ai >= 0 && lv_tmpInt <= autoB4881D80_ae) || (autoB4881D80_ai < 0 && lv_tmpInt >= autoB4881D80_ae) ) ; lv_tmpInt += autoB4881D80_ai ) {
        if ((lp_dialogItem == gv_heroSelection.lv_customDiffEditboxes[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    return -1;
}

bool gf_HeroSelect_CustomDiff_AllInputsValid () {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    const int autoA0A05975_ae = gv_maxCustomDiffSettings;
    const int autoA0A05975_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tmpInt = 0;
    for ( ; ( (autoA0A05975_ai >= 0 && lv_tmpInt <= autoA0A05975_ae) || (autoA0A05975_ai < 0 && lv_tmpInt >= autoA0A05975_ae) ) ; lv_tmpInt += autoA0A05975_ai ) {
        if ((gv_heroSelection.lv_customDiffValidInput[lv_tmpInt] == false)) {
            return false;
        }

    }
    return true;
}

int gf_HeroSelect_CustomDiff_GetDiffPresetID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto8D9165D6_ae;
    const int auto8D9165D6_ai = 1;

    // Variable Initialization

    // Implementation
    auto8D9165D6_ae = (gv_maxAmountDifficulties - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto8D9165D6_ai >= 0 && lv_tmpInt <= auto8D9165D6_ae) || (auto8D9165D6_ai < 0 && lv_tmpInt >= auto8D9165D6_ae) ) ; lv_tmpInt += auto8D9165D6_ai ) {
        if ((lp_dialogItem == gv_heroSelection.lv_customDiffPresetButtons[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    return -1;
}

void gf_HeroSelect_CustomDiff_DiffPresetSet (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_preset) {
    // Automatic Variable Declarations
    const int autoA77CBEAA_ae = gv_maxCustomDiffSettings;
    int autoA77CBEAA_var;

    // Implementation
    autoA77CBEAA_var = 0;
    for ( ; autoA77CBEAA_var <= autoA77CBEAA_ae; autoA77CBEAA_var += 1 ) {
        libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffEditboxes[autoA77CBEAA_var], FixedToString(lp_preset.lv_values[autoA77CBEAA_var], c_fixedPrecisionAny), PlayerGroupAll());
    }
}

int gf_HeroSelect_CustomDiff_DirectRewardDiff () {
    // Variable Declarations
    fixed[gv_maxCustomDiffSettings + 1] lv_settings;
    gs_HeroSelect_CustomDiff_DiffPreset lv_thresholds;
    int lv_tmpInt;
    int lv_tmpInt2;
    int lv_thresholdfound;
    bool lv_tmpbool;

    // Automatic Variable Declarations
    const int auto37D89388_ae = gv_maxCustomDiffSettings;
    const int auto37D89388_ai = 1;
    int autoFC344D6F_ae;
    const int autoFC344D6F_ai = 1;
    const int autoEE44AFFB_ae = gv_maxCustomDiffSettings;
    const int autoEE44AFFB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_tmpInt2 = 0;
    for ( ; ( (auto37D89388_ai >= 0 && lv_tmpInt2 <= auto37D89388_ae) || (auto37D89388_ai < 0 && lv_tmpInt2 >= auto37D89388_ae) ) ; lv_tmpInt2 += auto37D89388_ai ) {
        lv_settings[lv_tmpInt2] = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[lv_tmpInt2], gv_heroSelection.lv_customDiffHost));
    }
    lv_tmpbool = true;
    lv_thresholdfound = (gv_maxAmountDifficulties - 1);
    autoFC344D6F_ae = (gv_maxAmountDifficulties - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoFC344D6F_ai >= 0 && lv_tmpInt <= autoFC344D6F_ae) || (autoFC344D6F_ai < 0 && lv_tmpInt >= autoFC344D6F_ae) ) ; lv_tmpInt += autoFC344D6F_ai ) {
        gf_HeroSelect_CustomDiff_DiffPresetReturn(lv_thresholds, lv_tmpInt);
        lv_tmpInt2 = 0;
        for ( ; ( (autoEE44AFFB_ai >= 0 && lv_tmpInt2 <= autoEE44AFFB_ae) || (autoEE44AFFB_ai < 0 && lv_tmpInt2 >= autoEE44AFFB_ae) ) ; lv_tmpInt2 += autoEE44AFFB_ai ) {
            if ((!((lv_tmpInt2 == 10) || (lv_tmpInt2 == 11) || (lv_tmpInt2 == 12) || (lv_tmpInt2 == 13) || (lv_tmpInt2 == 14)))) {
                if ((lv_settings[lv_tmpInt2] < lv_thresholds.lv_values[lv_tmpInt2])) {
                    lv_tmpbool = false;
                }

            }

            if (((lv_tmpInt2 == 10) || (lv_tmpInt2 == 11) || (lv_tmpInt2 == 13) || (lv_tmpInt2 == 14) || (lv_tmpInt2 == 16) || (lv_tmpInt2 == 17))) {
                if ((lv_settings[lv_tmpInt2] > lv_thresholds.lv_values[lv_tmpInt2])) {
                    lv_tmpbool = false;
                }

            }

        }
        if ((lv_tmpbool == false)) {
            lv_thresholdfound = (lv_tmpInt - 1);
            break;
        }

    }
    if ((lv_thresholdfound >= 0)) {
        gf_HeroSelect_CustomDiff_DiffPresetReturn(lv_thresholds, lv_thresholdfound);
        if ((lv_settings[12] > lv_thresholds.lv_values[12])) {
            lv_thresholdfound = -1;
        }

    }

    return lv_thresholdfound;
}

void gf_HeroSelect_CustomDiff_HighlightRewardDiff (int lp_diff) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto762DE8BD_ae;
    const int auto762DE8BD_ai = 1;
    int auto0B6A582D_ae;
    const int auto0B6A582D_ai = 1;
    int autoD550BF93_ae;
    const int autoD550BF93_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_diff == -2)) {
        auto762DE8BD_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (auto762DE8BD_ai >= 0 && lv_tmpInt <= auto762DE8BD_ae) || (auto762DE8BD_ai < 0 && lv_tmpInt >= auto762DE8BD_ae) ) ; lv_tmpInt += auto762DE8BD_ai ) {
            libNtve_gf_SetDialogItemColor(gv_heroSelection.lv_customDiffPresetButtons[lv_tmpInt], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        }
    }
    else {
        if ((lp_diff == -1)) {
            autoD550BF93_ae = (gv_maxAmountDifficulties - 1);
            lv_tmpInt = 0;
            for ( ; ( (autoD550BF93_ai >= 0 && lv_tmpInt <= autoD550BF93_ae) || (autoD550BF93_ai < 0 && lv_tmpInt >= autoD550BF93_ae) ) ; lv_tmpInt += autoD550BF93_ai ) {
                libNtve_gf_SetDialogItemColor(gv_heroSelection.lv_customDiffPresetButtons[lv_tmpInt], Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }
        }
        else {
            auto0B6A582D_ae = (gv_maxAmountDifficulties - 1);
            lv_tmpInt = 0;
            for ( ; ( (auto0B6A582D_ai >= 0 && lv_tmpInt <= auto0B6A582D_ae) || (auto0B6A582D_ai < 0 && lv_tmpInt >= auto0B6A582D_ae) ) ; lv_tmpInt += auto0B6A582D_ai ) {
                libNtve_gf_SetDialogItemColor(gv_heroSelection.lv_customDiffPresetButtons[lv_tmpInt], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
            }
            libNtve_gf_SetDialogItemColor(gv_heroSelection.lv_customDiffPresetButtons[lp_diff], Color(50.20, 100.00, 50.20), PlayerGroupAll());
        }
    }
}

void gf_HeroSelect_CustomDiff_DiffPresetReturn (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_return, int lp_diff) {
    // Variable Declarations
    fixed[gv_maxCustomDiffSettings + 1] lv_defaultsettings;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int autoD22EE5E0_val;
    const int autoF71771AE_ae = gv_maxCustomDiffSettings;
    const int autoF71771AE_ai = 1;

    // Variable Initialization

    // Implementation
    autoD22EE5E0_val = lp_diff;
    if (autoD22EE5E0_val == 0) {
        lv_defaultsettings[1] = -30;
        lv_defaultsettings[3] = -20;
        lv_defaultsettings[3] = -30;
        lv_defaultsettings[5] = -20;
        lv_defaultsettings[9] = -50;
        lv_defaultsettings[10] = 100;
        lv_defaultsettings[11] = 100;
        lv_defaultsettings[12] = -50.0;
        lv_defaultsettings[15] = 0.0;
    }
    else if (autoD22EE5E0_val == 1) {
        lv_defaultsettings[9] = -25;
        lv_defaultsettings[10] = 50;
        lv_defaultsettings[11] = 75;
        lv_defaultsettings[12] = -40.0;
        lv_defaultsettings[15] = 1.0;
    }
    else if (autoD22EE5E0_val == 2) {
        lv_defaultsettings[1] = 25;
        lv_defaultsettings[2] = 15;
        lv_defaultsettings[3] = 25;
        lv_defaultsettings[8] = 10;
        lv_defaultsettings[9] = 0;
        lv_defaultsettings[10] = 30;
        lv_defaultsettings[11] = 50;
        lv_defaultsettings[12] = -30.0;
        lv_defaultsettings[15] = 2.0;
    }
    else if (autoD22EE5E0_val == 3) {
        lv_defaultsettings[0] = 5;
        lv_defaultsettings[1] = 75;
        lv_defaultsettings[2] = 30;
        lv_defaultsettings[3] = 100;
        lv_defaultsettings[4] = 5;
        lv_defaultsettings[5] = 20;
        lv_defaultsettings[8] = 25;
        lv_defaultsettings[9] = 25;
        lv_defaultsettings[10] = 20;
        lv_defaultsettings[11] = 25;
        lv_defaultsettings[12] = -20.0;
        lv_defaultsettings[15] = 3.0;
    }
    else if (autoD22EE5E0_val == 4) {
        lv_defaultsettings[0] = 10;
        lv_defaultsettings[1] = 125;
        lv_defaultsettings[2] = 50;
        lv_defaultsettings[3] = 125;
        lv_defaultsettings[4] = 7;
        lv_defaultsettings[5] = 25;
        lv_defaultsettings[6] = 0.5;
        lv_defaultsettings[7] = 50.0;
        lv_defaultsettings[8] = 50.0;
        lv_defaultsettings[9] = 50;
        lv_defaultsettings[10] = 10;
        lv_defaultsettings[11] = 10;
        lv_defaultsettings[12] = -10.0;
        lv_defaultsettings[15] = 4.0;
    }
    else if (autoD22EE5E0_val == 5) {
        lv_defaultsettings[0] = 13.0;
        lv_defaultsettings[1] = 200.0;
        lv_defaultsettings[2] = 100.0;
        lv_defaultsettings[3] = 400.0;
        lv_defaultsettings[4] = 15.0;
        lv_defaultsettings[5] = 50.0;
        lv_defaultsettings[6] = 2.0;
        lv_defaultsettings[7] = 100.0;
        lv_defaultsettings[8] = 75.0;
        lv_defaultsettings[9] = 100;
        lv_defaultsettings[10] = 0;
        lv_defaultsettings[11] = 0;
        lv_defaultsettings[12] = 0.0;
        lv_defaultsettings[15] = 5.0;
    }
    else {
    }
    lv_tmpInt = 0;
    for ( ; ( (autoF71771AE_ai >= 0 && lv_tmpInt <= autoF71771AE_ae) || (autoF71771AE_ai < 0 && lv_tmpInt >= autoF71771AE_ae) ) ; lv_tmpInt += autoF71771AE_ai ) {
        lp_return.lv_values[lv_tmpInt] = lv_defaultsettings[lv_tmpInt];
    }
}

void gf_HeroSelect_CustomDiff_SetOptions () {
    // Variable Declarations
    fixed lv_tmpval;
    int lv_thresholdfound;
    text lv_text;

    // Automatic Variable Declarations
    playergroup autoA4C45E1B_g;
    int autoA4C45E1B_var;
    playergroup autoCB4089C1_g;
    int autoCB4089C1_var;
    playergroup autoBDE265CE_g;
    int autoBDE265CE_var;
    playergroup autoEBE133AE_g;
    int autoEBE133AE_var;
    int auto53E39473_val;
    int auto0501D582_val;

    // Variable Initialization

    // Implementation
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[0], gv_heroSelection.lv_customDiffHost));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(1) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(3) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(4) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[1], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Melee]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[NoProc]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Ranged]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Spell]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Splash]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[2], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[3], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Energy]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Life]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Shields]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[4], gv_heroSelection.lv_customDiffHost));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.LifeArmorBonus", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.ShieldArmorBonus", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[5], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.LifeArmorMultiplier", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.ShieldArmorMultiplier", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[6], gv_heroSelection.lv_customDiffHost));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Energy]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Life]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Shields]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[7], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(1) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[8], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.MoveSpeedMultiplier", gv_enemyPlayer, FixedToString(lv_tmpval, c_fixedPrecisionAny));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[9], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    gv_difficultyVariables.lv_spawnMult = lv_tmpval;
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[10], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    gv_difficultyVariables.lv_biomassMult = lv_tmpval;
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[11], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    gv_difficultyVariables.lv_expMult = lv_tmpval;
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[12], gv_heroSelection.lv_customDiffHost));
    lv_tmpval = (lv_tmpval / 100.0);
    lv_tmpval = (lv_tmpval + 1.0);
    gv_difficultyVariables.lv_upgradeCountFactor = lv_tmpval;
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[13], gv_heroSelection.lv_customDiffHost));
    autoA4C45E1B_g = gv_playerGroup;
    autoA4C45E1B_var = -1;
    while (true) {
        autoA4C45E1B_var = PlayerGroupNextPlayer(autoA4C45E1B_g, autoA4C45E1B_var);
        if (autoA4C45E1B_var < 0) { break; }
        gf_Reward_StartBiomass(autoA4C45E1B_var, lv_tmpval);
    }
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[14], gv_heroSelection.lv_customDiffHost));
    autoCB4089C1_g = gv_playerGroup;
    autoCB4089C1_var = -1;
    while (true) {
        autoCB4089C1_var = PlayerGroupNextPlayer(autoCB4089C1_g, autoCB4089C1_var);
        if (autoCB4089C1_var < 0) { break; }
        gf_Reward_StartExp(autoCB4089C1_var, lv_tmpval);
    }
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[15], gv_heroSelection.lv_customDiffHost));
    libNtve_gf_SetUpgradeLevelForPlayer(gv_enemyPlayer, "BossAbilityDifficultyRequirement", RoundI(lv_tmpval));
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[16], gv_heroSelection.lv_customDiffHost));
    autoBDE265CE_g = gv_playerGroup;
    autoBDE265CE_var = -1;
    while (true) {
        autoBDE265CE_var = PlayerGroupNextPlayer(autoBDE265CE_g, autoBDE265CE_var);
        if (autoBDE265CE_var < 0) { break; }
        PlayerModifyPropertyFixed(autoBDE265CE_var, c_playerPropVespene, c_playerPropOperAdd, lv_tmpval);
    }
    lv_tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[17], gv_heroSelection.lv_customDiffHost));
    autoEBE133AE_g = gv_playerGroup;
    autoEBE133AE_var = -1;
    while (true) {
        autoEBE133AE_var = PlayerGroupNextPlayer(autoEBE133AE_g, autoEBE133AE_var);
        if (autoEBE133AE_var < 0) { break; }
        gv_playerStats[autoEBE133AE_var].lv_lifes = RoundI(lv_tmpval);
    }
    lv_thresholdfound = gf_HeroSelect_CustomDiff_DirectRewardDiff();
    if ((lv_thresholdfound >= 0)) {
        gv_difficulty = lv_thresholdfound;
        auto53E39473_val = gv_difficulty;
        if (auto53E39473_val == 0) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Easy");
        }
        else if (auto53E39473_val == 1) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Normal");
        }
        else if (auto53E39473_val == 2) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hard");
        }
        else if (auto53E39473_val == 3) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Brutal");
        }
        else if (auto53E39473_val == 4) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Insane");
        }
        else if (auto53E39473_val == 5) {
            lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hardcore");
        }
        else {
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/HeroSelection/CustomDiff/ApproximatedDiff") + lv_text));
    }
    else {
        gv_difficulty = gv_maxAmountDifficulties;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/HeroSelection/CustomDiff/ApproximatedDiffNone"));
    }
    auto0501D582_val = lv_thresholdfound;
    if (auto0501D582_val == -1) {
        gv_difficultyVariables.lv_points = 0;
        gv_difficultyVariables.lv_scientistsAmount = 0;
        gv_difficultyVariables.lv_essenceAmount = 0;
        gv_difficultyVariables.lv_psiOrbSpawns = false;
    }
    else if (auto0501D582_val == 0) {
        gv_difficultyVariables.lv_points = 1;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 0;
        gv_difficultyVariables.lv_psiOrbSpawns = false;
    }
    else if (auto0501D582_val == 1) {
        gv_difficultyVariables.lv_points = 1;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 1;
        gv_difficultyVariables.lv_psiOrbSpawns = false;
    }
    else if (auto0501D582_val == 2) {
        gv_difficultyVariables.lv_points = 2;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 1;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
    }
    else if (auto0501D582_val == 3) {
        gv_difficultyVariables.lv_points = 3;
        gv_difficultyVariables.lv_scientistsAmount = 1;
        gv_difficultyVariables.lv_essenceAmount = 2;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
    }
    else if (auto0501D582_val == 4) {
        gv_difficultyVariables.lv_points = 5;
        gv_difficultyVariables.lv_scientistsAmount = 2;
        gv_difficultyVariables.lv_essenceAmount = 3;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
    }
    else if (auto0501D582_val == 5) {
        gv_difficultyVariables.lv_points = 8;
        gv_difficultyVariables.lv_scientistsAmount = 2;
        gv_difficultyVariables.lv_essenceAmount = 5;
        gv_difficultyVariables.lv_psiOrbSpawns = true;
    }
    else {
    }
    CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_enemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_enemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
}

void gf_HeroSelect_CustomDiff_NewHostAfterLeave (int lp_newhost) {
    // Variable Declarations
    string lv_inputeditboxstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inputeditboxstring = "";

    // Implementation
    lv_inputeditboxstring = libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, lp_newhost);
    if ((gv_heroSelection.lv_player_IsReady[lp_newhost] == true)) {
        gv_heroSelection.lv_player_IsReady[lp_newhost] = false;
        gv_heroSelection.lv_ready_Counter -= 1;
        DialogControlSetVisible(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(lp_newhost), true);
        if (gf_HeroSelect_CustomDiff_AllInputsValid()) {
            DialogControlSetEnabled(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(lp_newhost), true);
            DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, PlayerGroupSingle(lp_newhost), true);
            libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, "", PlayerGroupSingle(lp_newhost));
            libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, lv_inputeditboxstring, PlayerGroupSingle(lp_newhost));
        }
        else {
            DialogControlSetEnabled(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(lp_newhost), false);
        }
    }
    else {
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, PlayerGroupSingle(lp_newhost), true);
        libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, "", PlayerGroupSingle(lp_newhost));
        libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, lv_inputeditboxstring, PlayerGroupSingle(lp_newhost));
    }
    gv_heroSelection.lv_customDiffHost = lp_newhost;
    PlayerGroupRemove(gv_heroSelection.lv_customDiffNotHostPlayerGroup, gv_heroSelection.lv_customDiffHost);
    DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, "GameModeCustom");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), "Host", "True");
}

void gf_HeroSelect_CustomDiff_CustomPreset_CreateInput (int lp_player) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    const int autoD21D130A_ae = gv_maxCustomDiffSettings;
    int autoD21D130A_var;

    // Variable Initialization
    lv_string = "";

    // Implementation
    autoD21D130A_var = 0;
    for ( ; autoD21D130A_var <= autoD21D130A_ae; autoD21D130A_var += 1 ) {
        lv_string = (lv_string + " " + libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffEditboxes[autoD21D130A_var], gv_heroSelection.lv_customDiffHost));
    }
    libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, lv_string, PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputCopyClipboardButton, PlayerGroupSingle(lp_player), true);
}

bool gf_HeroSelect_CustomDiff_CustomPreset_LoadInputandCheck (structref<gs_HeroSelect_CustomDiff_DiffPreset> lp_preset) {
    // Variable Declarations
    string lv_string;
    int lv_tmpInt;
    string lv_tmpString;
    bool lv_endFlag;

    // Automatic Variable Declarations
    const int auto63818F2B_ae = gv_maxCustomDiffSettings;
    const int auto63818F2B_ai = 1;

    // Variable Initialization
    lv_string = libNtve_gf_DialogItemEditValue(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, gv_heroSelection.lv_customDiffHost);
    lv_tmpString = "";
    lv_endFlag = true;

    // Implementation
    lv_tmpInt = 0;
    for ( ; ( (auto63818F2B_ai >= 0 && lv_tmpInt <= auto63818F2B_ae) || (auto63818F2B_ai < 0 && lv_tmpInt >= auto63818F2B_ae) ) ; lv_tmpInt += auto63818F2B_ai ) {
        lv_tmpString = StringWord(lv_string, (lv_tmpInt + 1));
        if (gf_isNumber(lv_tmpString)) {
            lp_preset.lv_values[lv_tmpInt] = StringToFixed(lv_tmpString);
        }
        else {
            lp_preset.lv_values[lv_tmpInt] = 0.0;
            lv_endFlag = false;
        }
    }
    lv_tmpString = StringWord(lv_string, (lv_tmpInt + 1));
    if ((lv_tmpString != "")) {
        lv_endFlag = false;
    }

    if ((lv_endFlag == true)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_Init_CustomDefeatDialog () {
    // Variable Declarations
    const int lv_button_Width = 150;
    const int lv_button_Height = 50;
    int lv_button_AddOffset;
    const int lv_border = 40;
    const int lv_text_Width = 450;
    const int lv_text_Heigth = 80;
    int lv_textButton_Gap;
    int lv_totalWidth;
    int lv_totalHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_button_AddOffset = 20;
    lv_textButton_Gap = 10;

    // Implementation
    lv_totalWidth = (lv_border + lv_text_Width + lv_border);
    lv_totalHeight = (lv_border + lv_text_Heigth + lv_button_Height + lv_textButton_Gap + lv_border);
    DialogCreate(lv_totalWidth, lv_totalHeight, c_anchorCenter, 0, 0, true);
    gv_customDefeatDialogVariables.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_text_Width, lv_text_Heigth, c_anchorTop, 0, lv_border, StringExternal("Trig/CustomDefeat/Text"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "aaDialogItemStyleCentered", PlayerGroupAll());
    gv_customDefeatDialogVariables.lv_text = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_button_Width, lv_button_Height, c_anchorBottomLeft, (lv_border + lv_button_AddOffset), lv_border, StringToText(""), StringExternal("Trig/CustomDefeat/Spectate"), "");
    gv_customDefeatDialogVariables.lv_spectateButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_button_Width, lv_button_Height, c_anchorBottomRight, (lv_border + lv_button_AddOffset), lv_border, StringToText(""), StringExternal("Trig/CustomDefeat/Leave"), "");
    gv_customDefeatDialogVariables.lv_leaveButton = DialogControlLastCreated();
    if ((gv_playerAmountStart == 1)) {
        DialogControlSetVisible(gv_customDefeatDialogVariables.lv_spectateButton, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(gv_customDefeatDialogVariables.lv_text, StringExternal("Trig/CustomDefeat/TextSolo"), PlayerGroupAll());
    }

}

void gf_Init_Tutorialminiintroduction () {
    // Variable Declarations
    const int lv_border = 40;
    const int lv_closeButton_Height = 50;
    const int lv_closeButton_Width = 200;
    const int lv_icon_Size = 76;
    const int lv_icon_Gap = 8;
    const int lv_text_Height = 200;
    const int lv_text_Width = 500;
    int lv_lines;
    int lv_totalWidth;
    int lv_totalHeight;
    int lv_x;
    int lv_y;
    const int lv_counter_Width = 40;
    const int lv_counter_Height = 50;

    // Automatic Variable Declarations
    playergroup autoDCF49E21_g;
    int autoDCF49E21_var;

    // Variable Initialization
    lv_lines = 7;
    lv_y = lv_border;

    // Implementation
    lv_totalWidth = (lv_border + lv_text_Width + lv_border);
    lv_totalHeight = (lv_border + lv_text_Height + lv_icon_Gap + lv_closeButton_Height + lv_border);
    DialogCreate(lv_totalWidth, lv_totalHeight, c_anchorCenter, 0, 0, true);
    gv_tutorial.lv_smallinfo = DialogLastCreated();
    lv_x = lv_border;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_text_Width, lv_text_Height, c_anchorTop, 0, lv_border, StringExternal("Trig/Tutorial/MiniIntroduction/Text"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "aaDialogItemStyleCentered", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_closeButton_Width, lv_closeButton_Height, c_anchorBottom, 0, lv_border, StringToText(""), StringExternal("Trig/Tutorial/MiniIntroduction/Exit"), "");
    gv_tutorial.lv_closeButton = DialogControlLastCreated();
    if ((gv_playerAmountStart > 1)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_counter_Width, (lv_counter_Height - 12), c_anchorBottomRight, lv_border, lv_border, IntToText(60), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_tutorial.lv_timerLabel = DialogControlLastCreated();
    }

    autoDCF49E21_g = gv_newPlayers;
    autoDCF49E21_var = -1;
    while (true) {
        autoDCF49E21_var = PlayerGroupNextPlayer(autoDCF49E21_g, autoDCF49E21_var);
        if (autoDCF49E21_var < 0) { break; }
        gf_HeroSelect_Showcase_SetDiff(autoDCF49E21_var, StringExternal("Trig/Tutorial/MiniIntroduction/Showcase"));
        gf_HeroSelect_SelectHero(autoDCF49E21_var, 0);
    }
    DialogSetVisible(DialogLastCreated(), gv_newPlayers, true);
    TriggerEnable(gt_Tutorial_CloseButtonHandlerminiintoduction, true);
}

void gf_InitAskTutorial () {
    // Variable Declarations
    const int lv_border = 40;
    const int lv_button_Height = 50;
    const int lv_button_Width = 150;
    const int lv_text_Height = 80;
    const int lv_text_Width = 370;
    int lv_totalWidth;
    int lv_totalHeight;
    int lv_gapX;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gapX = 10;

    // Implementation
    gv_tutorial.lv_active = true;
    lv_totalWidth = (lv_border + lv_text_Width + lv_border);
    lv_totalHeight = (lv_border + lv_text_Height + lv_gapX + lv_button_Height + lv_border);
    DialogCreate(lv_totalWidth, lv_totalHeight, c_anchorCenter, 0, 0, true);
    gv_tutorial.lv_smallinfo = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_text_Width, lv_text_Height, c_anchorTop, 0, lv_border, StringExternal("Trig/Tutorial/AskTutorial/Text"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "aaDialogItemStyleCentered", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_button_Width, lv_button_Height, c_anchorBottomLeft, lv_border, lv_border, StringToText(""), StringExternal("Trig/Tutorial/AskTutorial/No"), "");
    gv_tutorial.lv_closeButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_button_Width, lv_button_Height, c_anchorBottomRight, lv_border, lv_border, StringToText(""), StringExternal("Trig/Tutorial/AskTutorial/Yes"), "");
    gv_tutorial.lv_startTutorialButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerEnable(gt_TutorialAskingYesButton, true);
    TriggerEnable(gt_TutorialAskingNoButton, true);
}

void gf_InitTutorial () {
    // Variable Declarations
    int lv_tmpPlayer;

    // Automatic Variable Declarations
    const int auto87A7379F_ae = gv_maxAmountPlayers;
    const int auto87A7379F_ai = 1;
    playergroup autoD1EB6B98_g;
    unitgroup auto4F7AD684_g;
    int auto4F7AD684_u;
    unit auto4F7AD684_var;
    unitgroup auto7F11915C_g;
    int auto7F11915C_u;
    unit auto7F11915C_var;

    // Variable Initialization

    // Implementation
    gv_gameMode = "Tutorial";
    gv_tutorial.lv_player = PlayerGroupPlayer(gv_playerGroup, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "IndistructibleRocks", 0, 0, PointFromId(1534712113));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "IndistructibleRocks", 0, 0, PointFromId(1330051498));
    TriggerEnable(gt_Terran_SpawnsTutorialVersion, true);
    UnitRemove(gv_partTerran.lv_observer.lv_unit);
    gf_HeroSelect_Finish_Triggers_Deactivate();
    lv_tmpPlayer = 1;
    for ( ; ( (auto87A7379F_ai >= 0 && lv_tmpPlayer <= auto87A7379F_ae) || (auto87A7379F_ai < 0 && lv_tmpPlayer >= auto87A7379F_ae) ) ; lv_tmpPlayer += auto87A7379F_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDummyPrespawn", 0, lv_tmpPlayer, PointFromId(521895522));
        gv_heroUnits[lv_tmpPlayer] = UnitLastCreated();
    }
    UnitRemove(gv_heroUnits[gv_tutorial.lv_player]);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroSelection.lv_hero_Info[0].lv_hero, 0, gv_tutorial.lv_player, PointFromId(564215223));
    gv_heroUnits[gv_tutorial.lv_player] = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, gv_playerStats[gv_tutorial.lv_player].lv_startEXP);
    UnitGroupAdd(gv_heroUnitGroup, UnitLastCreated());
    if ((gv_options.lv_controlGroup_Flag[0][gv_tutorial.lv_player] == true)) {
        UnitControlGroupAddUnit(gv_tutorial.lv_player, gv_options.lv_controlGroup_Group[0][gv_tutorial.lv_player], UnitLastCreated());
    }

    UnitGroupSelect(UnitGroupSelected(gv_tutorial.lv_player), gv_tutorial.lv_player, false);
    UnitSelect(UnitLastCreated(), gv_tutorial.lv_player, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BaseOverlord", 0, gv_tutorial.lv_player, PointFromId(1940962760));
    if ((gv_options.lv_controlGroup_Flag[1][gv_tutorial.lv_player] == true)) {
        UnitControlGroupAddUnit(gv_tutorial.lv_player, gv_options.lv_controlGroup_Group[1][gv_tutorial.lv_player], UnitLastCreated());
    }

    gv_baseOverlord[gv_tutorial.lv_player] = UnitLastCreated();
    gv_difficulty = 0;
    autoD1EB6B98_g = PlayerGroupAll();
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(autoD1EB6B98_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        PlayerModifyPropertyInt(lv_tmpPlayer, c_playerPropCustom, c_playerPropOperSetTo, gv_difficulty);
    }
    gf_Set_Difficulty_Variables();
    gf_IncreaseUpgradeCount(50.0);
    gf_Init_Leaderbord();
    DialogControlSetVisible(gv_sSF_CustomUI.lv_mainFrame, PlayerGroupAll(), true);
    TimerStart(gv_spawnTimer, 20.0, true, c_timeGame);
    TimerStart(gv_idleTimer, 60.0, true, c_timeGame);
    gf_HeroSelect_Finish_Triggers_Activate();
    gv_gameStarted = true;
    Wait(0.5, c_timeGame);

    TriggerEnable(gt_Terran_Spawns, false);
    TriggerEnable(gt_HeroDies, false);
    TriggerEnable(gt_Scientists_OverlordCapture, false);
    TriggerEnable(gt_Scientists_OverlordCaptureTutorialVersion, true);
    TriggerEnable(gt_Essences_Pickup, false);
    TriggerEnable(gt_Essences_PickupTutorialVersion, true);
    gf_TutorialInitCollectibles();
    gf_TutorialInitDialog();
    auto4F7AD684_g = UnitCargoGroup(UnitFromId(714363349));
    auto4F7AD684_u = UnitGroupCount(auto4F7AD684_g, c_unitCountAll);
    for (;; auto4F7AD684_u -= 1) {
        auto4F7AD684_var = UnitGroupUnitFromEnd(auto4F7AD684_g, auto4F7AD684_u);
        if (auto4F7AD684_var == null) { break; }
        UnitRemove(auto4F7AD684_var);
    }
    UnitRemove(UnitFromId(714363349));
    auto7F11915C_g = UnitCargoGroup(UnitFromId(1167641812));
    auto7F11915C_u = UnitGroupCount(auto7F11915C_g, c_unitCountAll);
    for (;; auto7F11915C_u -= 1) {
        auto7F11915C_var = UnitGroupUnitFromEnd(auto7F11915C_g, auto7F11915C_u);
        if (auto7F11915C_var == null) { break; }
        UnitRemove(auto7F11915C_var);
    }
    UnitRemove(UnitFromId(1167641812));
    UnitRemove(UnitFromId(318333928));
    UnitRemove(UnitFromId(948230513));
    UnitRemove(UnitFromId(1180084131));
    UnitRemove(UnitFromId(773039508));
    UnitRemove(UnitFromId(467899988));
}

void gf_TutorialInitDialog () {
    // Variable Declarations
    const int lv_border = 40;
    const int lv_closeButton_Height = 50;
    const int lv_width = 600;
    const int lv_height = 300;
    int lv_gap;
    int lv_yOffset;
    int lv_totalWidth;
    int lv_totalHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gap = 5;
    lv_yOffset = 50;

    // Implementation
    lv_totalWidth = (lv_border + lv_width + lv_border);
    lv_totalHeight = (lv_border + lv_height + lv_border);
    DialogCreate(lv_totalWidth, lv_totalHeight, c_anchorTop, 0, lv_yOffset, true);
    gv_tutorial.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_totalWidth - (lv_border * 2)), (lv_totalHeight - (lv_border + lv_closeButton_Height + lv_gap)), c_anchorTop, 0, lv_border, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tutorial.lv_textLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "aabTutorialTextLabel", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lv_totalWidth - (lv_border * 2)), lv_closeButton_Height, c_anchorBottom, 0, lv_border, StringToText(""), StringExternal("Trig/Tutorial/Continue"), "");
    gv_tutorial.lv_closeButton = DialogControlLastCreated();
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    gf_TutorialWelcomeMsg();
    TriggerEnable(gt_TutorialClose, true);
}

void gf_TutorialPause (bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        UnitBehaviorAddPlayer(gv_baseOverlord[gv_tutorial.lv_player], "TutorialNotPaused", gv_tutorial.lv_player, 1);
        TimerPause(gv_spawnTimer, true);
        TimerPause(gv_idleTimer, true);
        TimerPause(gv_saveTimer, true);
        TimerPause(gv_tutorial.lv_moneyskiptimer, true);
        GameSetMissionTimePaused(true);
    }
    else {
        UnitBehaviorRemove(gv_baseOverlord[gv_tutorial.lv_player], "TutorialNotPaused", 1);
        TimerPause(gv_spawnTimer, false);
        TimerPause(gv_idleTimer, false);
        TimerPause(gv_saveTimer, false);
        TimerPause(gv_tutorial.lv_moneyskiptimer, false);
        GameSetMissionTimePaused(false);
    }
    UnitPauseAll(lp_state);
}

trigger auto_gf_TutorialShow_Trigger = null;

void gf_TutorialShow () {
    if (auto_gf_TutorialShow_Trigger == null) {
        auto_gf_TutorialShow_Trigger = TriggerCreate("auto_gf_TutorialShow_TriggerFunc");
    }

    TriggerExecute(auto_gf_TutorialShow_Trigger, false, false);
}

bool auto_gf_TutorialShow_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_TutorialPause(true);
    DialogSetVisible(gv_tutorial.lv_dialog, PlayerGroupAll(), true);
    CameraLockInput(gv_tutorial.lv_player, true);
    Wait(1.0, c_timeGame);
    DialogControlSetVisible(gv_tutorial.lv_closeButton, PlayerGroupAll(), true);
    return true;
}

void gf_TutorialInitCollectibles () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scientist", 0, gv_collectiblePlayerEnemyAllied, PointFromId(553499220));
    gv_tutorial.lv_scientist = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Larva2", 0, gv_collectiblePlayerEnemyNeutral, PointFromId(1038710699));
    gv_tutorial.lv_larva = UnitLastCreated();
}

void gf_TutorialWelcomeMsg () {
    // Automatic Variable Declarations
    // Implementation
    Wait(0.0625, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/WelcomeMsg"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_heroUnits[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    gf_TutorialShow();
}

void gf_TutorialHero () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Hero"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_heroUnits[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    UnitClearSelection(gv_tutorial.lv_player);
    UnitSelect(gv_heroUnits[gv_tutorial.lv_player], gv_tutorial.lv_player, true);
    gf_TutorialShow();
}

void gf_TutorialOverlord () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Overlord"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_baseOverlord[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    UnitClearSelection(gv_tutorial.lv_player);
    UnitSelect(gv_baseOverlord[gv_tutorial.lv_player], gv_tutorial.lv_player, true);
    gf_TutorialShow();
}

void gf_TutorialHive () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Hive"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_baseHive), 1.0, -1, 10.0, false);
    UnitClearSelection(gv_tutorial.lv_player);
    UnitSelect(gv_baseHive, gv_tutorial.lv_player, true);
    gf_TutorialShow();
    TriggerEnable(gt_TutorialFirstAttackWaveComes, true);
    TriggerEnable(gt_TutorialMoveOut, true);
    TriggerEnable(gt_TutorialHeroDiesIntercept, true);
    TriggerEnable(gt_TutorialWidowMinesKilled, true);
    TriggerEnable(gt_TutorialKilledBrdgeController, true);
}

void gf_TutorialIssueExplore () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/IssueExplore"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_baseHive), 1.0, -1, 10.0, false);
    ObjectiveCreate(StringExternal("Trig/Tutorial/MainObjective"), StringToText(""), c_objectiveStateActive, true);
    gv_objectives.lv_bosses = ObjectiveLastCreated();
    gf_TutorialShow();
}

void gf_TutorialFirstAttackWave (unit lp_attackingunit) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_tutorial.lv_stage != -1)) {
        gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    }

    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/FirstAttackWave"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_attackingunit), 1.0, -1, 10.0, false);
    TimerStart(gv_tutorial.lv_moneyskiptimer, 25.0, false, c_timeGame);
    TriggerEnable(gt_TutorialAfter2ndAttackWave, true);
    gf_TutorialShow();
}

void gf_TutorialMoneySkip () {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/MoneySkip"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_baseOverlord[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    PlayerModifyPropertyInt(gv_tutorial.lv_player, c_playerPropMinerals, c_playerPropOperAdd, 10000);
    gf_AddExp(gv_heroUnits[gv_tutorial.lv_player], 40000.0);
    gf_TutorialShow();
}

void gf_TutorialFirstPush () {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/FirstPush"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_heroUnits[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    gf_TutorialShow();
    TriggerEnable(gt_TutorialFirstSpawnerNearDead, true);
    TriggerEnable(gt_TutorialScientistNear, true);
    TriggerEnable(gt_TutorialLarvaNear, true);
}

void gf_TutorialFirstSpawner (unit lp_spawner) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/FirstSpawner"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_spawner), 1.0, -1, 10.0, false);
    gf_TutorialShow();
}

void gf_TutorialSurvivedWidowMinesUseMutations (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/SurvivedWidowMines"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    gf_TutorialShow();
}

void gf_TutorialLarva (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Larva"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    gf_TutorialShow();
    ObjectiveCreate(StringExternal("Trig/Tutorial/LarvaObjective"), StringToText(""), c_objectiveStateActive, false);
    gv_objectives.lv_essences = ObjectiveLastCreated();
}

void gf_TutorialEssencecollected (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    if ((TechTreeUpgradeCount(gv_tutorial.lv_player, "UnlockHeroRoachCharge", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Essence"), PlayerGroupAll());
        TechTreeUpgradeAddLevel(gv_tutorial.lv_player, "UnlockHeroRoachCharge", 1);
        CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
        gf_TutorialShow();
    }

}

void gf_TutorialScientist (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Scientist"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    VisRevealerCreate(gv_tutorial.lv_player, RegionCircle(UnitGetPosition(lp_unit), 2.25));
    gv_tutorial.lv_revealer = VisRevealerLastCreated();
    gv_tutorial.lv_stage = -73;
    gf_TutorialShow();
    ObjectiveCreate(StringExternal("Trig/Tutorial/ScientistObjective"), StringToText(""), c_objectiveStateActive, false);
    gv_objectives.lv_scientists = ObjectiveLastCreated();
}

void gf_TutorialScientistcaptured (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/ScientistCaptured"), PlayerGroupAll());
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Runling", 0, gv_tutorial.lv_player, UnitGetPosition(lp_unit));
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    ObjectiveSetState(gv_objectives.lv_scientists, c_objectiveStateCompleted);
    gf_TutorialShow();
}

void gf_TutorialBridgeController (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/BridgeController"), PlayerGroupAll());
    VisRevealerCreate(gv_tutorial.lv_player, RegionCircle(UnitGetPosition(UnitFromId(973134657)), 9.0));
    gv_tutorial.lv_revealer = VisRevealerLastCreated();
    gv_tutorial.lv_stage = -5;
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    gf_TutorialShow();
    ObjectiveSetName(gv_objectives.lv_bosses, StringExternal("Trig/Tutorial/MainObjective2"));
    TriggerEnable(gt_TutorialEntersArena, true);
}

void gf_TutorialFortress (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    gv_tutorial.lv_camerabefore = CameraGetTarget(gv_tutorial.lv_player);
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/Fortress"), PlayerGroupAll());
    VisRevealerCreate(gv_tutorial.lv_player, RegionCircle(UnitGetPosition(lp_unit), 5.0));
    gv_tutorial.lv_revealer = VisRevealerLastCreated();
    gv_tutorial.lv_stage = -40;
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    gf_TutorialShow();
    TriggerEnable(gt_TutorialFortressDead, true);
    TriggerEnable(gt_PartTerran_BossDies_Fortress, false);
}

void gf_TutorialFinish (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/End"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_closeButton, StringExternal("Trig/Tutorial/EndButton"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(lp_unit), 1.0, -1, 10.0, false);
    TriggerEnable(gt_TutorialHeroDiesIntercept, false);
    gf_TutorialShow();
    if ((gv_playerStats[gv_tutorial.lv_player].lv_tutorialCompleted == false)) {
        gv_playerStats[gv_tutorial.lv_player].lv_tutorialCompleted = true;
        gf_AcvTutorial_UnlockCheck(gv_tutorial.lv_player);
        gf_AcvInterface_SendNotification(gv_tutorial.lv_player, 1, "Tutorial");
    }

    gv_tutorial.lv_stage = -10;
}

void gf_TutorialHeroDies () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_tutorial.lv_textLabel, StringExternal("Trig/Tutorial/HeroDies"), PlayerGroupAll());
    CameraPan(gv_tutorial.lv_player, UnitGetPosition(gv_heroUnits[gv_tutorial.lv_player]), 1.0, -1, 10.0, false);
    gf_TutorialShow();
}

void gf_Init_Objectives () {
    // Automatic Variable Declarations
    // Implementation
    ObjectiveCreate((StringExternal("Trig/Objectives/Main/Pre") + IntToText(gv_enemy_ActivePart.lv_obejctiveDefeatedCount) + StringExternal("Trig/Objectives/Main/Mid") + IntToText(gv_enemy_ActivePart.lv_objectiveCount) + StringExternal("Trig/Objectives/Main/Post")), StringToText(""), c_objectiveStateActive, true);
    gv_objectives.lv_bosses = ObjectiveLastCreated();
    if ((gv_difficultyVariables.lv_scientistsAmount >= 2)) {
        ObjectiveCreate((StringExternal("Trig/Objectives/Scientist/Two/Pre") + IntToText(gv_scientists_Found) + StringExternal("Trig/Objectives/Scientist/Two/Mid") + IntToText(gv_difficultyVariables.lv_scientistsAmount) + StringExternal("Trig/Objectives/Scientist/Two/Post")), StringToText(""), c_objectiveStateActive, false);
    }
    else {
        ObjectiveCreate(StringExternal("Trig/Objectives/Scientist/One/Init"), StringToText(""), c_objectiveStateActive, false);
    }
    gv_objectives.lv_scientists = ObjectiveLastCreated();
    if ((gv_difficultyVariables.lv_essenceAmount >= 1)) {
        ObjectiveCreate((StringExternal("Trig/Objectives/Essences/Pre") + IntToText(gv_essences_Found) + StringExternal("Trig/Objectives/Essences/Post")), StringToText(""), c_objectiveStateActive, false);
        gv_objectives.lv_essences = ObjectiveLastCreated();
    }

    ObjectiveCreate(StringExternal("Trig/Objectives/Observer"), StringToText(""), c_objectiveStateHidden, false);
    gv_objectives.lv_observer = ObjectiveLastCreated();
}

void gf_Objectives_Protoss () {
    // Automatic Variable Declarations
    // Implementation
    ObjectiveSetName(gv_objectives.lv_bosses, (StringExternal("Trig/Objectives/Main/Pre") + IntToText(gv_enemy_ActivePart.lv_obejctiveDefeatedCount) + StringExternal("Trig/Objectives/Main/Mid") + IntToText(gv_enemy_ActivePart.lv_objectiveCount) + StringExternal("Trig/Objectives/Main/Post")));
    ObjectiveSetState(gv_objectives.lv_bosses, c_objectiveStateActive);
    ObjectiveSetState(gv_objectives.lv_observer, c_objectiveStateHidden);
    ObjectiveCreate((StringExternal("Trig/Objectives/PsiOrb")), StringToText(""), c_objectiveStateActive, false);
    gv_objectives.lv_psiOrbs = ObjectiveLastCreated();
    if ((gv_difficulty < 2)) {
        ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    }

    if ((ObjectiveGetState(gv_objectives.lv_scientists) != c_objectiveStateCompleted)) {
        ObjectiveSetState(gv_objectives.lv_scientists, c_objectiveStateFailed);
    }

}

void gf_Init_LeaderbordRanks () {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank0");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank1");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank2");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank3");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank4");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank5");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank6");
    lv_tmpInt += 1;
    gv_leaderboard.lv_rankNames[lv_tmpInt] = StringExternal("Trig/Leaderboard/Rank7");
    lv_tmpInt += 1;
}

void gf_Init_Leaderbord () {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    playergroup autoFC8604DD_g;
    int autoFC8604DD_var;

    // Variable Initialization
    lv_tmpInt = 1;

    // Implementation
    gf_Init_LeaderbordRanks();
    BoardCreate(2, gv_playerAmount, StringToText(""), Color(100.00, 100.00, 100.00));
    gv_leaderboard.lv_leaderboard = BoardLastCreated();
    BoardItemSetTextColor(BoardLastCreated(), 1, c_boardRowHeader, Color(100.00, 100.00, 0.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, c_boardRowHeader, Color(100.00, 100.00, 0.00));
    BoardSetColumnWidth(BoardLastCreated(), 1, c_boardWidthAuto);
    BoardSetColumnWidth(BoardLastCreated(), 2, c_boardWidthAuto);
    BoardItemSetText(gv_leaderboard.lv_leaderboard, 1, c_boardRowHeader, StringExternal("Trig/Leaderboard/PlayerLabel"));
    BoardItemSetText(gv_leaderboard.lv_leaderboard, 2, c_boardRowHeader, StringExternal("Trig/Leaderboard/ScoreLabel"));
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowHeader, true);
    BoardSetAnchor(BoardLastCreated(), c_anchorTopRight, 5000, 0);
    autoFC8604DD_g = gv_playerGroup;
    autoFC8604DD_var = -1;
    while (true) {
        autoFC8604DD_var = PlayerGroupNextPlayer(autoFC8604DD_g, autoFC8604DD_var);
        if (autoFC8604DD_var < 0) { break; }
        BoardItemSetTextColor(BoardLastCreated(), 1, lv_tmpInt, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoFC8604DD_var, false)));
        BoardItemSetTextColor(BoardLastCreated(), 2, lv_tmpInt, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoFC8604DD_var, false)));
        gv_leaderboard.lv_playerRow[autoFC8604DD_var] = lv_tmpInt;
        if (gf_DevPlayer(autoFC8604DD_var)) {
            gv_playerStats[autoFC8604DD_var].lv_acvScoreRank_Custom = true;
            gv_playerStats[autoFC8604DD_var].lv_acvScoreRank = StringExternal("Trig/Leaderboard/DevRank");
            BoardItemSetText(gv_leaderboard.lv_leaderboard, 1, lv_tmpInt, (gv_playerStats[autoFC8604DD_var].lv_acvScoreRank + PlayerName(autoFC8604DD_var)));
            if (gf_DevCristall(autoFC8604DD_var)) {
                gv_playerStats[autoFC8604DD_var].lv_acvScore_Custom = true;
                BoardItemSetText(gv_leaderboard.lv_leaderboard, 2, lv_tmpInt, StringExternal("Trig/Leaderboard/DevScore"));
            }

        }
        else {
            BoardItemSetText(gv_leaderboard.lv_leaderboard, 1, lv_tmpInt, (gv_leaderboard.lv_rankNames[gv_playerStats[autoFC8604DD_var].lv_acvScoreLevel] + PlayerName(autoFC8604DD_var)));
        }
        gf_AcvScore_UnlockCheck(autoFC8604DD_var);
        gf_HeroSelect_Showcase_SetRank(autoFC8604DD_var);
        lv_tmpInt += 1;
    }
}

void gf_Leaderboard_SetCustomRank (int lp_playerID, text lp_rank) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_playerID].lv_acvScoreRank = lp_rank;
    gv_playerStats[lp_playerID].lv_acvScoreRank_Custom = true;
    BoardItemSetText(gv_leaderboard.lv_leaderboard, 1, gv_leaderboard.lv_playerRow[lp_playerID], (lp_rank + PlayerName(lp_playerID)));
}

void gf_Init_SSF_CustomUI () {
    // Variable Declarations
    int lv_maindialogitem;
    int lv_currentmainframe;
    int lv_currentsubframe;
    int lv_tmpPlayer;
    int lv_x;
    int lv_y;
    int lv_totalHeight;
    int lv_totalWidth;
    int lv_tmpInt;
    int lv_tmpInt_2;
    int lv_tmpInt_3;

    // Automatic Variable Declarations
    playergroup autoB35A0809_g;
    playergroup auto5408AF68_g;
    const int autoEA7DBDFD_ae = 10;
    const int autoEA7DBDFD_ai = 1;
    const int auto787EC881_ae = 10;
    const int auto787EC881_ai = 1;
    const int auto6B7D9E14_ae = 10;
    const int auto6B7D9E14_ai = 1;
    const int auto1B2C15CC_ae = 10;
    const int auto1B2C15CC_ai = 1;
    playergroup auto461BBE8F_g;
    int auto461BBE8F_var;
    const int auto24DC8E03_ae = gv_maxAmountParts;
    const int auto24DC8E03_ai = 1;
    int auto83B29E2F_ae;
    const int auto83B29E2F_ai = 1;
    playergroup autoDB49396A_g;
    int auto13EACEAA_val;
    playergroup autoF5185353_g;
    int autoF5185353_var;
    playergroup auto1347F286_g;
    int auto1347F286_var;

    // Variable Initialization
    lv_maindialogitem = c_invalidDialogControlId;
    lv_currentmainframe = c_invalidDialogControlId;
    lv_currentsubframe = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SSF_CustomUI");
    gv_sSF_CustomUI.lv_mainFrame = DialogControlLastCreated();
    lv_maindialogitem = DialogControlLastCreated();

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Menu/Votekick");
    gv_menu.lv_votekick_Button = DialogControlLastCreated();
    if ((gv_playerAmount <= 2)) {
        DialogControlSetEnabled(gv_menu.lv_votekick_Button, gv_playerGroup, false);
        libNtve_gf_SetDialogItemTooltip(gv_menu.lv_votekick_Button, StringExternal("Trig/Menu/VotekickRequirement"), gv_playerGroup);
    }

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Stats");
    lv_currentmainframe = DialogControlLastCreated();
    lv_x = 40;
    lv_y = 40;
    if ((gv_playerAmount >= 2)) {
        lv_totalWidth = (40 + 40 + (300 * 2) + 4);
    }
    else {
        lv_totalWidth = (40 + 40 + 300);
    }
    lv_totalHeight = (40 + ((224 + 6) * CeilingI((gv_playerAmount / 2.0))) + 40 + (0 - 4));
    DialogControlSetSize(lv_currentmainframe, PlayerGroupAll(), lv_totalWidth, lv_totalHeight);
    autoB35A0809_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(autoB35A0809_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        DialogControlCreateInPanelFromTemplate(lv_currentmainframe, c_triggerControlTypePanel, "SSF_Menu/StatsPlayerTemplate");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_x, lv_y);
        gv_statsInterface.lv_stats[lv_tmpPlayer] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "PlayerName");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(PlayerName(lv_tmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_tmpPlayer, false))), PlayerGroupAll());
        lv_tmpInt += 1;
        if ((lv_tmpInt == 2)) {
            lv_tmpInt = 0;
            lv_y += (224 + 6);
            lv_x = 40;
        }
        else {
            lv_x += (300 + 4);
        }
    }
    gf_StatsInterface_Update();

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Votekick");
    gv_votekick.lv_mainFrame = DialogControlLastCreated();
    lv_currentmainframe = DialogControlLastCreated();
    lv_x = 40;
    lv_y = 92;
    auto5408AF68_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(auto5408AF68_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        DialogControlCreateInPanelFromTemplate(lv_currentmainframe, c_triggerControlTypeButton, "SSF_Menu/VotekickPlayerButtonTemplate");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_x, lv_y);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (TextWithColor(PlayerName(lv_tmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_tmpPlayer, false))) + StringToText(" (0/") + IntToText(gv_votekick.lv_votesRequired) + StringToText(")")), PlayerGroupAll());
        gv_votekick.lv_kickButtons[lv_tmpPlayer] = DialogControlLastCreated();
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lv_tmpPlayer), false);
        lv_y += (50 + 2);
    }
    lv_y += (40);
    DialogControlSetSize(lv_currentmainframe, PlayerGroupAll(), 340, lv_y);

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Options");
    lv_currentmainframe = DialogControlLastCreated();
    lv_x = 40;
    lv_y = 40;
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "AutoHeroSelectionPulldown");
    gv_options.lv_heroSelection_Pulldown = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypeCheckBox, "AutoHeroSelectionCheckbox");
    gv_options.lv_heroSelection_Checkbox = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "Hero/Pulldown");
    gv_options.lv_controlGroup_Pulldown[0] = DialogControlLastCreated();
    lv_tmpInt = 1;
    for ( ; ( (autoEA7DBDFD_ai >= 0 && lv_tmpInt <= autoEA7DBDFD_ae) || (autoEA7DBDFD_ai < 0 && lv_tmpInt >= autoEA7DBDFD_ae) ) ; lv_tmpInt += autoEA7DBDFD_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(lv_tmpInt));
    }
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypeCheckBox, "Hero/Checkbox");
    gv_options.lv_controlGroup_Checkbox[0] = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "Overlord/Pulldown");
    gv_options.lv_controlGroup_Pulldown[1] = DialogControlLastCreated();
    lv_tmpInt = 1;
    for ( ; ( (auto787EC881_ai >= 0 && lv_tmpInt <= auto787EC881_ae) || (auto787EC881_ai < 0 && lv_tmpInt >= auto787EC881_ae) ) ; lv_tmpInt += auto787EC881_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(lv_tmpInt));
    }
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypeCheckBox, "Overlord/Checkbox");
    gv_options.lv_controlGroup_Checkbox[1] = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "Lurker/Pulldown");
    gv_options.lv_controlGroup_Pulldown[2] = DialogControlLastCreated();
    lv_tmpInt = 1;
    for ( ; ( (auto6B7D9E14_ai >= 0 && lv_tmpInt <= auto6B7D9E14_ae) || (auto6B7D9E14_ai < 0 && lv_tmpInt >= auto6B7D9E14_ae) ) ; lv_tmpInt += auto6B7D9E14_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(lv_tmpInt));
    }
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypeCheckBox, "Lurker/Checkbox");
    gv_options.lv_controlGroup_Checkbox[2] = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "Runling/Pulldown");
    gv_options.lv_controlGroup_Pulldown[3] = DialogControlLastCreated();
    lv_tmpInt = 1;
    for ( ; ( (auto1B2C15CC_ai >= 0 && lv_tmpInt <= auto1B2C15CC_ae) || (auto1B2C15CC_ai < 0 && lv_tmpInt >= auto1B2C15CC_ae) ) ; lv_tmpInt += auto1B2C15CC_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(lv_tmpInt));
    }
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypeCheckBox, "Runling/Checkbox");
    gv_options.lv_controlGroup_Checkbox[3] = DialogControlLastCreated();
    auto461BBE8F_g = gv_startingPlayerGroup;
    auto461BBE8F_var = -1;
    while (true) {
        auto461BBE8F_var = PlayerGroupNextPlayer(auto461BBE8F_g, auto461BBE8F_var);
        if (auto461BBE8F_var < 0) { break; }
        gv_options.lv_controlGroup_Group[0][auto461BBE8F_var] = 1;
        gv_options.lv_controlGroup_Group[1][auto461BBE8F_var] = 2;
        gv_options.lv_controlGroup_Group[2][auto461BBE8F_var] = 3;
        gv_options.lv_controlGroup_Group[3][auto461BBE8F_var] = 3;
    }

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Speedruns");
    gv_speedruns.lv_mainFrame = DialogControlLastCreated();
    lv_currentmainframe = DialogControlLastCreated();
    lv_tmpInt = 1;
    lv_tmpInt_2 = 0;
    lv_tmpInt = 1;
    for ( ; ( (auto24DC8E03_ai >= 0 && lv_tmpInt <= auto24DC8E03_ae) || (auto24DC8E03_ai < 0 && lv_tmpInt >= auto24DC8E03_ae) ) ; lv_tmpInt += auto24DC8E03_ai ) {
        auto83B29E2F_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt_2 = 0;
        for ( ; ( (auto83B29E2F_ai >= 0 && lv_tmpInt_2 <= auto83B29E2F_ae) || (auto83B29E2F_ai < 0 && lv_tmpInt_2 >= auto83B29E2F_ae) ) ; lv_tmpInt_2 += auto83B29E2F_ai ) {
            lv_x = 0;
            lv_tmpInt_3 = 0;
            lv_y = 0;
            autoDB49396A_g = gv_playerGroup;
            lv_tmpPlayer = -1;
            while (true) {
                lv_tmpPlayer = PlayerGroupNextPlayer(autoDB49396A_g, lv_tmpPlayer);
                if (lv_tmpPlayer < 0) { break; }
                DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Part" + IntToString(lv_tmpInt) + "/Diff" + IntToString(lv_tmpInt_2) + "/Player" + IntToString(lv_tmpPlayer))));
                lv_currentsubframe = DialogControlLastCreated();
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_x, lv_y);
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                DialogControlHookup(lv_currentsubframe, c_triggerControlTypeLabel, "PlayerName");
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(PlayerName(lv_tmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_tmpPlayer, false))), PlayerGroupAll());
                lv_tmpInt_3 += 1;
                auto13EACEAA_val = lv_tmpInt;
                if (auto13EACEAA_val == 1) {
                    if (((lv_tmpInt_2 == 4) || (lv_tmpInt_2 == 5))) {
                        DialogControlHookup(lv_currentsubframe, c_triggerControlTypeLabel, "SoloLabel");
                        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Trig/Speedruns/Duo"), PlayerGroupAll());
                    }

                }
                else if (auto13EACEAA_val == 2) {
                    if ((lv_tmpInt_2 == 3)) {
                        DialogControlHookup(lv_currentsubframe, c_triggerControlTypeLabel, "SoloLabel");
                        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Trig/Speedruns/Duo"), PlayerGroupAll());
                    }
                    else {
                        if (((lv_tmpInt_2 == 4) || (lv_tmpInt_2 == 5))) {
                            DialogControlHookup(lv_currentsubframe, c_triggerControlTypeLabel, "SoloLabel");
                            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Trig/Speedruns/Trio"), PlayerGroupAll());
                        }

                    }
                }
                else {
                }
                if ((lv_tmpInt_3 == 2)) {
                    lv_tmpInt_3 = 0;
                    lv_y += (84 + 11);
                    lv_x = 0;
                }
                else {
                    lv_x += (233 + 4);
                }
            }
        }
    }
    lv_totalHeight = (40 + 40 + 50 + 15 + 50 + 10 + 50 + 10 + (CeilingI((gv_playerAmount / 2.0)) * (84 + 11)) + -11);
    DialogControlSetSize(lv_currentmainframe, PlayerGroupAll(), 550, lv_totalHeight);

    DialogControlHookup(lv_maindialogitem, c_triggerControlTypePanel, "Achievements");
    gv_acvInterface.lv_mainFrame = DialogControlLastCreated();
    lv_currentmainframe = DialogControlLastCreated();
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePulldown, "PlayerPulldown");
    lv_currentsubframe = DialogControlLastCreated();
    lv_tmpInt = 0;
    autoF5185353_g = gv_playerGroup;
    autoF5185353_var = -1;
    while (true) {
        autoF5185353_var = PlayerGroupNextPlayer(autoF5185353_g, autoF5185353_var);
        if (autoF5185353_var < 0) { break; }
        lv_tmpInt += 1;
        DialogControlAddItem(lv_currentsubframe, PlayerGroupAll(), TextWithColor(PlayerName(autoF5185353_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF5185353_var, false))));
        DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PulldownHandler/Index" + IntToString(lv_tmpInt) + "/Player" + IntToString(autoF5185353_var))));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((lv_tmpInt != 1)) {
            DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PrevPlayerHandler/Index" + IntToString(lv_tmpInt) + "/Player" + IntToString(lv_tmpInt_2))));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("NextPlayerHandler/Index" + IntToString(lv_tmpInt_3) + "/Player" + IntToString(autoF5185353_var))));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        }

        DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(autoF5185353_var) + "/IndexHandler/Index" + IntToString(lv_tmpInt))));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(autoF5185353_var))));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF5185353_var), true);
        lv_tmpInt_2 = autoF5185353_var;
        lv_tmpInt_3 = lv_tmpInt;
    }
    lv_tmpInt = 0;
    DialogControlSelectItem(lv_currentsubframe, PlayerGroupAll(), 1);
    auto1347F286_g = gv_playerGroup;
    auto1347F286_var = -1;
    while (true) {
        auto1347F286_var = PlayerGroupNextPlayer(auto1347F286_g, auto1347F286_var);
        if (auto1347F286_var < 0) { break; }
        lv_tmpInt += 1;
        DialogControlSelectItem(lv_currentsubframe, PlayerGroupSingle(auto1347F286_var), lv_tmpInt);
    }
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("NextPlayerHandler/Index" + IntToString(lv_tmpInt_3) + "/Player" + IntToString(PlayerGroupPlayer(gv_playerGroup, 1)))));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_currentmainframe, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("PrevPlayerHandler/Index" + IntToString(1) + "/Player" + IntToString(PlayerGroupPlayer(gv_playerGroup, lv_tmpInt_3)))));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    if ((gv_playerAmountStart == 1)) {
        DialogControlSetAnimationState(lv_currentmainframe, PlayerGroupAll(), "Solo", "True");
        DialogControlHookup(lv_currentmainframe, c_triggerControlTypeLabel, "PlayerLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(PlayerName(PlayerGroupPlayer(gv_playerGroup, 1)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(gv_playerGroup, 1), false))), PlayerGroupAll());
    }

}

void gf_StatsInterface_Update () {
    // Variable Declarations
    text lv_tmpText;
    int lv_tmpPlayer;

    // Automatic Variable Declarations
    playergroup autoFBF9D98F_g;

    // Variable Initialization

    // Implementation
    autoFBF9D98F_g = gv_playerGroup;
    lv_tmpPlayer = -1;
    while (true) {
        lv_tmpPlayer = PlayerGroupNextPlayer(autoFBF9D98F_g, lv_tmpPlayer);
        if (lv_tmpPlayer < 0) { break; }
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "Points");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_points), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "Kills");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_kills), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "WinsP1");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_winsTerran), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "WinsP2");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_winsProtoss), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "Essences");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_essences), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "Scientists");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_scientists), PlayerGroupAll());
        DialogControlHookup(gv_statsInterface.lv_stats[lv_tmpPlayer], c_triggerControlTypeLabel, "PsiOrbs");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(gv_playerStats[lv_tmpPlayer].lv_psiOrbs), PlayerGroupAll());
    }
}

void gf_AcvInterface_SendNotification (int lp_playerID, int lp_page, string lp_acvName) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(gv_acvInterface.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(lp_playerID) + "/Page" + IntToString(lp_page) + "/" + lp_acvName)));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(lp_playerID), "Notification");
}

void gf_Speedruns_UpdateTimeAllForAllPlayers () {
    // Variable Declarations
    int lv_part;
    int lv_diff;
    int lv_player;

    // Automatic Variable Declarations
    const int auto5D6A2E6E_ae = gv_maxAmountParts;
    const int auto5D6A2E6E_ai = 1;
    int auto7FE2BDD6_ae;
    const int auto7FE2BDD6_ai = 1;
    playergroup auto74617BD2_g;

    // Variable Initialization

    // Implementation
    lv_part = 1;
    for ( ; ( (auto5D6A2E6E_ai >= 0 && lv_part <= auto5D6A2E6E_ae) || (auto5D6A2E6E_ai < 0 && lv_part >= auto5D6A2E6E_ae) ) ; lv_part += auto5D6A2E6E_ai ) {
        auto7FE2BDD6_ae = (gv_maxAmountDifficulties - 1);
        lv_diff = 0;
        for ( ; ( (auto7FE2BDD6_ai >= 0 && lv_diff <= auto7FE2BDD6_ae) || (auto7FE2BDD6_ai < 0 && lv_diff >= auto7FE2BDD6_ae) ) ; lv_diff += auto7FE2BDD6_ai ) {
            auto74617BD2_g = gv_startingPlayerGroup;
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(auto74617BD2_g, lv_player);
                if (lv_player < 0) { break; }
                gf_Speedruns_UpdateTimeTeam(lv_part, lv_diff, lv_player, gv_playerStats[lv_player].lv_difficultyTime[lv_diff][(lv_part - 1)], false);
                gf_Speedruns_UpdateTimeSolo(lv_part, lv_diff, lv_player, gv_playerStats[lv_player].lv_difficultyTimeSolo[lv_diff][(lv_part - 1)], false);
            }
        }
    }
}

void gf_Speedruns_UpdateTimeTeam (int lp_part, int lp_diff, int lp_player, int lp_timeTeam, bool lp_notification) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_diff < gv_maxAmountDifficulties) && (lp_timeTeam != 0)) {
        DialogControlHookup(gv_speedruns.lv_mainFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Part" + IntToString(lp_part) + "/Diff" + IntToString(lp_diff) + "/Player" + IntToString(lp_player) + "/TeamTime")));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_UI_TimeFormat(lp_timeTeam), PlayerGroupAll());
        if ((lp_notification == true)) {
            gf_Speedruns_Notification(lp_part, lp_diff, lp_player);
        }

    }

}

void gf_Speedruns_UpdateTimeSolo (int lp_part, int lp_diff, int lp_player, int lp_timeSolo, bool lp_notification) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_diff < gv_maxAmountDifficulties) && (lp_timeSolo != 0)) {
        DialogControlHookup(gv_speedruns.lv_mainFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Part" + IntToString(lp_part) + "/Diff" + IntToString(lp_diff) + "/Player" + IntToString(lp_player) + "/SoloTime")));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_UI_TimeFormat(lp_timeSolo), PlayerGroupAll());
        if ((lp_notification == true)) {
            gf_Speedruns_Notification(lp_part, lp_diff, lp_player);
        }

    }

}

void gf_Speedruns_Notification (int lp_part, int lp_diff, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(gv_speedruns.lv_mainFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Part" + IntToString(lp_part) + "/Diff" + IntToString(lp_diff) + "/Player" + IntToString(lp_player))));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(lp_player), "Notification");
}

int gf_Votekick_GetKickDialogID (int lp_dialogItem) {
    // Automatic Variable Declarations
    const int autoEE2E089E_ae = 6;
    int autoEE2E089E_var;

    // Implementation
    autoEE2E089E_var = 1;
    for ( ; autoEE2E089E_var <= autoEE2E089E_ae; autoEE2E089E_var += 1 ) {
        if ((lp_dialogItem == gv_votekick.lv_kickButtons[autoEE2E089E_var])) {
            return autoEE2E089E_var;
        }

    }
    return -1;
}

void gf_Votekick_Reset () {
    // Automatic Variable Declarations
    playergroup auto6C9DE4F6_g;
    int auto6C9DE4F6_var;

    // Implementation
    auto6C9DE4F6_g = gv_startingPlayerGroup;
    auto6C9DE4F6_var = -1;
    while (true) {
        auto6C9DE4F6_var = PlayerGroupNextPlayer(auto6C9DE4F6_g, auto6C9DE4F6_var);
        if (auto6C9DE4F6_var < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_votekick.lv_kickButtons[auto6C9DE4F6_var], (TextWithColor(PlayerName(auto6C9DE4F6_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6C9DE4F6_var, false))) + StringToText(" (") + IntToText(gv_votekick.lv_votesCombined[auto6C9DE4F6_var]) + StringToText("/") + IntToText(gv_votekick.lv_votesRequired) + StringToText(")")), gv_startingPlayerGroup);
        gv_votekick.lv_firstTimeInitialized[auto6C9DE4F6_var] = false;
    }
}

void gf_OptionsInterface_SetOptions (int lp_playerID) {
    // Variable Declarations
    int lv_tmpInt;
    int lv_tmpInt2;

    // Automatic Variable Declarations
    int autoC085E0AA_ae;
    const int autoC085E0AA_ai = 1;
    int autoA94AB8B5_ae;
    const int autoA94AB8B5_ai = 1;

    // Variable Initialization
    lv_tmpInt2 = DialogControlGetItemCount(gv_options.lv_heroSelection_Pulldown, lp_playerID);

    // Implementation
    autoC085E0AA_ae = lv_tmpInt2;
    lv_tmpInt = 1;
    for ( ; ( (autoC085E0AA_ai >= 0 && lv_tmpInt <= autoC085E0AA_ae) || (autoC085E0AA_ai < 0 && lv_tmpInt >= autoC085E0AA_ae) ) ; lv_tmpInt += autoC085E0AA_ai ) {
        if ((gv_options.lv_heroSelection_HeroListIndex[lp_playerID][lv_tmpInt] == gv_options.lv_heroSelection_Hero[lp_playerID])) {
            DialogControlSelectItem(gv_options.lv_heroSelection_Pulldown, PlayerGroupSingle(lp_playerID), lv_tmpInt);
            break;
        }

    }
    if ((lv_tmpInt > lv_tmpInt2)) {
        if ((gv_options.lv_heroSelection_Flag[lp_playerID] == true)) {
            if ((DialogControlIsVisible(gv_heroSelection.lv_hero_Button[gv_options.lv_heroSelection_Hero[lp_playerID]], lp_playerID) == true)) {
                gf_HeroSelect_SelectHero(lp_playerID, gv_options.lv_heroSelection_Hero[lp_playerID]);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_playerID), c_messageAreaChat, StringExternal("Trig/Options/AutoHeroSelection/LockedHero"));
                gf_HeroSelect_SelectHero(lp_playerID, 0);
            }
        }

        gv_options.lv_heroSelection_Hero[lp_playerID] = 0;
        DialogControlSelectItem(gv_options.lv_heroSelection_Pulldown, PlayerGroupSingle(lp_playerID), 0);
    }

    if ((gv_options.lv_heroSelection_Flag[lp_playerID] == true)) {
        libNtve_gf_SetDialogItemChecked(gv_options.lv_heroSelection_Checkbox, true, PlayerGroupSingle(lp_playerID));
    }
    else {
        libNtve_gf_SetDialogItemChecked(gv_options.lv_heroSelection_Checkbox, false, PlayerGroupSingle(lp_playerID));
    }
    autoA94AB8B5_ae = (gv_options_ControlGroup_Amount - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoA94AB8B5_ai >= 0 && lv_tmpInt <= autoA94AB8B5_ae) || (autoA94AB8B5_ai < 0 && lv_tmpInt >= autoA94AB8B5_ae) ) ; lv_tmpInt += autoA94AB8B5_ai ) {
        DialogControlSelectItem(gv_options.lv_controlGroup_Pulldown[lv_tmpInt], PlayerGroupSingle(lp_playerID), gv_options.lv_controlGroup_Group[lv_tmpInt][lp_playerID]);
        if ((gv_options.lv_controlGroup_Flag[lv_tmpInt][lp_playerID] == true)) {
            libNtve_gf_SetDialogItemChecked(gv_options.lv_controlGroup_Checkbox[lv_tmpInt], true, PlayerGroupSingle(lp_playerID));
        }
        else {
            libNtve_gf_SetDialogItemChecked(gv_options.lv_controlGroup_Checkbox[lv_tmpInt], false, PlayerGroupSingle(lp_playerID));
        }
    }
}

int gf_OptionsInterface_ControlGroups_GetCheckboxID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto431B8C44_ae;
    const int auto431B8C44_ai = 1;

    // Variable Initialization

    // Implementation
    auto431B8C44_ae = (gv_options_ControlGroup_Amount - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto431B8C44_ai >= 0 && lv_tmpInt <= auto431B8C44_ae) || (auto431B8C44_ai < 0 && lv_tmpInt >= auto431B8C44_ae) ) ; lv_tmpInt += auto431B8C44_ai ) {
        if ((lp_dialogItem == gv_options.lv_controlGroup_Checkbox[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    return -1;
}

int gf_OptionsInterface_ControlGroups_GetPulldownID (int lp_dialogItem) {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto30FDFAF7_ae;
    const int auto30FDFAF7_ai = 1;

    // Variable Initialization

    // Implementation
    auto30FDFAF7_ae = (gv_options_ControlGroup_Amount - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto30FDFAF7_ai >= 0 && lv_tmpInt <= auto30FDFAF7_ae) || (auto30FDFAF7_ai < 0 && lv_tmpInt >= auto30FDFAF7_ae) ) ; lv_tmpInt += auto30FDFAF7_ai ) {
        if ((lp_dialogItem == gv_options.lv_controlGroup_Pulldown[lv_tmpInt])) {
            return lv_tmpInt;
        }

    }
    return -1;
}

void gf_Init_BuggedModels () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateActorAtPoint("SeekerMissileTimer", PointFromId(521895522));
    ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
}

void gf_HiveUpgrade () {
    // Automatic Variable Declarations
    int autoABF37260_val;

    // Implementation
    autoABF37260_val = gv_baseHiveStatus;
    if (autoABF37260_val == 2) {
        UnitBehaviorRemove(gv_baseHive, "BaseHiveLevel1", 1);
        UnitBehaviorAddPlayer(gv_baseHive, "BaseHiveLevel2", gv_basePlayer, 1);
        gf_Reward_AuraArmor(gv_hiveAuraStats.lv_armorp2);
        gf_Reward_AuraDmg(gv_hiveAuraStats.lv_dmgp2);
        gf_Reward_AuraEnergyRegen(gv_hiveAuraStats.lv_energyregp2);
        gf_Reward_AuraLifeRegen(gv_hiveAuraStats.lv_liferegp2);
        gf_Reward_AuraAttackSpeed(gv_hiveAuraStats.lv_atkspdp2);
        gf_Reward_AuraTimeScale(gv_hiveAuraStats.lv_timescalep2);
        gf_Reward_HiveArmor(3.0);
    }
    else if (autoABF37260_val == 3) {
        UnitBehaviorRemove(gv_baseHive, "BaseHiveLevel2", 1);
        UnitBehaviorAddPlayer(gv_baseHive, "BaseHiveLevel3", gv_basePlayer, 1);
    }
    else {
    }
}

void gf_GainPoints () {
    // Automatic Variable Declarations
    int auto3FA7E231_val;
    playergroup auto36E01B4B_g;
    int auto36E01B4B_var;
    playergroup auto753054F8_g;
    int auto753054F8_var;

    // Implementation
    gv_enemy_ActivePart.lv_obejctiveDefeatedCount += 1;
    if ((gv_difficultyVariables.lv_points == 1)) {
        UIDisplayMessage(gv_playerGroup, c_messageAreaSubtitle, (StringExternal("Trig/Bosskilled/OnePoint/Pre") + IntToText(gv_enemy_ActivePart.lv_obejctiveDefeatedCount) + StringExternal("Trig/Bosskilled/OnePoint/Mid1") + IntToText(gv_enemy_ActivePart.lv_objectiveCount) + StringExternal("Trig/Bosskilled/OnePoint/Post")));
    }
    else {
        UIDisplayMessage(gv_playerGroup, c_messageAreaSubtitle, (StringExternal("Trig/Bosskilled/Pre") + IntToText(gv_enemy_ActivePart.lv_obejctiveDefeatedCount) + StringExternal("Trig/Bosskilled/Mid1") + IntToText(gv_enemy_ActivePart.lv_objectiveCount) + StringExternal("Trig/Bosskilled/Mid2") + IntToText(gv_difficultyVariables.lv_points) + StringExternal("Trig/Bosskilled/Post")));
    }
    ObjectiveSetName(gv_objectives.lv_bosses, (StringExternal("Trig/Objectives/Main/Pre") + IntToText(gv_enemy_ActivePart.lv_obejctiveDefeatedCount) + StringExternal("Trig/Objectives/Main/Mid") + IntToText(gv_enemy_ActivePart.lv_objectiveCount) + StringExternal("Trig/Objectives/Main/Post")));
    if ((gv_enemy_ActivePart.lv_obejctiveDefeatedCount == gv_enemy_ActivePart.lv_objectiveCount)) {
        ObjectiveSetState(gv_objectives.lv_bosses, c_objectiveStateCompleted);
        auto3FA7E231_val = gv_partActive;
        if (auto3FA7E231_val == 1) {
            gf_TerranWinCheckAcv();
            if ((gv_partTerran.lv_observer.lv_alive == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/ObserverDead"));
                auto36E01B4B_g = gv_playerGroup;
                auto36E01B4B_var = -1;
                while (true) {
                    auto36E01B4B_var = PlayerGroupNextPlayer(auto36E01B4B_g, auto36E01B4B_var);
                    if (auto36E01B4B_var < 0) { break; }
                    UnitBehaviorAddPlayer(gv_baseOverlord[auto36E01B4B_var], "TerranPartTransitionBuff", auto36E01B4B_var, 1);
                }
            }
            else {
                gf_ObserverHintHandler();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/ObserverAlive"));
            }
        }
        else if (auto3FA7E231_val == 2) {
            gf_ProtossWinCheckAcv();
        }
        else {
        }
        gv_partActive += 1;
    }

    auto753054F8_g = gv_playerGroup;
    auto753054F8_var = -1;
    while (true) {
        auto753054F8_var = PlayerGroupNextPlayer(auto753054F8_g, auto753054F8_var);
        if (auto753054F8_var < 0) { break; }
        gv_playerStats[auto753054F8_var].lv_points += gv_difficultyVariables.lv_points;
        gf_AcvPoints_UnlockCheck(auto753054F8_var);
        gf_Save(auto753054F8_var);
    }
    if ((gv_partActive > gv_maxAmountParts)) {
        gf_WinEndGame();
    }

}

void gf_TerranWinCheckAcv () {
    // Variable Declarations
    const int lv_part = 0;

    // Automatic Variable Declarations
    playergroup auto519A7485_g;
    int auto519A7485_var;
    int autoF96A9060_val;
    playergroup autoC0D64C41_g;
    int autoC0D64C41_var;
    int autoF0015B77_val;
    playergroup auto500C7F71_g;
    int auto500C7F71_var;
    int auto8DFA6AFA_val;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/WinP1/Message"));
    if ((gv_playerAmountStart == 1)) {
        auto519A7485_g = gv_playerGroup;
        auto519A7485_var = -1;
        while (true) {
            auto519A7485_var = PlayerGroupNextPlayer(auto519A7485_g, auto519A7485_var);
            if (auto519A7485_var < 0) { break; }
            if (((gv_playerStats[auto519A7485_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] == 0) || (gv_playerStats[auto519A7485_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
                gv_playerStats[auto519A7485_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
                gf_Speedruns_UpdateTimeSolo((lv_part + 1), gv_difficulty, auto519A7485_var, gv_playerStats[auto519A7485_var].lv_difficultyTimeSolo[gv_difficulty][lv_part], true);
                autoF96A9060_val = gv_difficulty;
                if (autoF96A9060_val == 0) {
                    gf_Acv_DiffSolo_Terran_Easy_Check(auto519A7485_var);
                }
                else if (autoF96A9060_val == 1) {
                    gf_Acv_DiffSolo_Terran_Normal_Check(auto519A7485_var);
                }
                else if (autoF96A9060_val == 2) {
                    gf_Acv_DiffSolo_Terran_Hard_Check(auto519A7485_var);
                }
                else if (autoF96A9060_val == 3) {
                    gf_Acv_DiffSolo_Terran_Brutal_Check(auto519A7485_var);
                }
                else if (autoF96A9060_val == 4) {
                    gf_Acv_DiffDuo_Terran_Insane_Check(auto519A7485_var);
                }
                else if (autoF96A9060_val == 5) {
                    gf_Acv_DiffSolo_Terran_Hardcore_Check(auto519A7485_var);
                }
                else {
                }
            }

        }
    }

    if ((gv_playerAmountStart == 2) && (gv_difficulty >= 4)) {
        autoC0D64C41_g = gv_playerGroup;
        autoC0D64C41_var = -1;
        while (true) {
            autoC0D64C41_var = PlayerGroupNextPlayer(autoC0D64C41_g, autoC0D64C41_var);
            if (autoC0D64C41_var < 0) { break; }
            if (((gv_playerStats[autoC0D64C41_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] == 0) || (gv_playerStats[autoC0D64C41_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
                gv_playerStats[autoC0D64C41_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
                gf_Speedruns_UpdateTimeSolo((lv_part + 1), gv_difficulty, autoC0D64C41_var, gv_playerStats[autoC0D64C41_var].lv_difficultyTimeSolo[gv_difficulty][lv_part], true);
                autoF0015B77_val = gv_difficulty;
                if (autoF0015B77_val == 4) {
                    gf_Acv_DiffDuo_Terran_Insane_Check(autoC0D64C41_var);
                }
                else if (autoF0015B77_val == 5) {
                    gf_Acv_DiffSolo_Terran_Hardcore_Check(autoC0D64C41_var);
                }
                else {
                }
            }

        }
    }

    auto500C7F71_g = gv_playerGroup;
    auto500C7F71_var = -1;
    while (true) {
        auto500C7F71_var = PlayerGroupNextPlayer(auto500C7F71_g, auto500C7F71_var);
        if (auto500C7F71_var < 0) { break; }
        if (((gv_playerStats[auto500C7F71_var].lv_difficultyTime[gv_difficulty][lv_part] == 0) || (gv_playerStats[auto500C7F71_var].lv_difficultyTime[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
            gv_playerStats[auto500C7F71_var].lv_difficultyTime[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
            gf_Speedruns_UpdateTimeTeam((lv_part + 1), gv_difficulty, auto500C7F71_var, gv_playerStats[auto500C7F71_var].lv_difficultyTime[gv_difficulty][lv_part], true);
            auto8DFA6AFA_val = gv_difficulty;
            if (auto8DFA6AFA_val == 0) {
                gf_Acv_Diff_Terran_Easy_Check(auto500C7F71_var);
            }
            else if (auto8DFA6AFA_val == 1) {
                gf_Acv_Diff_Terran_Normal_Check(auto500C7F71_var);
            }
            else if (auto8DFA6AFA_val == 2) {
                gf_Acv_Diff_Terran_Hard_Check(auto500C7F71_var);
            }
            else if (auto8DFA6AFA_val == 3) {
                gf_Acv_Diff_Terran_Brutal_Check(auto500C7F71_var);
            }
            else if (auto8DFA6AFA_val == 4) {
                gf_Acv_Diff_Terran_Insane_Check(auto500C7F71_var);
            }
            else if (auto8DFA6AFA_val == 5) {
                gf_Acv_Diff_Terran_Hardcore_Check(auto500C7F71_var);
            }
            else {
            }
        }

        if ((gv_flawlessFlag == true) && (gv_playerStats[auto500C7F71_var].lv_flawlessTerran[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
            gv_playerStats[auto500C7F71_var].lv_flawlessTerran[gv_difficulty] = true;
            gf_Acv_Flawless_T_Rewards(auto500C7F71_var, gv_difficulty);
            gf_Acv_Flawless_T_UI(auto500C7F71_var);
            gf_AcvInterface_SendNotification(auto500C7F71_var, 1, "FlawlessP1");
            UIDisplayMessage(PlayerGroupSingle(auto500C7F71_var), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Flawless"));
        }

        if ((gv_difficultyVariables.lv_points >= 1)) {
            gv_playerStats[auto500C7F71_var].lv_winsTerran += 1;
            gf_Acv_Win_T_UnlockCheck(auto500C7F71_var);
        }

    }
}

void gf_ProtossWinCheckAcv () {
    // Variable Declarations
    const int lv_part = 1;

    // Automatic Variable Declarations
    playergroup auto96975E93_g;
    int auto96975E93_var;
    int auto315C6E6F_val;
    playergroup auto685679F4_g;
    int auto685679F4_var;
    int auto33DA53C9_val;
    playergroup autoB061F849_g;
    int autoB061F849_var;
    int autoDA921F13_val;
    playergroup auto7BF70A10_g;
    int auto7BF70A10_var;
    int autoBB1E1A48_val;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/WinP2/Message"));
    if ((gv_playerAmountStart == 1)) {
        auto96975E93_g = gv_playerGroup;
        auto96975E93_var = -1;
        while (true) {
            auto96975E93_var = PlayerGroupNextPlayer(auto96975E93_g, auto96975E93_var);
            if (auto96975E93_var < 0) { break; }
            if (((gv_playerStats[auto96975E93_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] == 0) || (gv_playerStats[auto96975E93_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
                gv_playerStats[auto96975E93_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
                gf_Speedruns_UpdateTimeSolo((lv_part + 1), gv_difficulty, auto96975E93_var, gv_playerStats[auto96975E93_var].lv_difficultyTimeSolo[gv_difficulty][lv_part], true);
                auto315C6E6F_val = gv_difficulty;
                if (auto315C6E6F_val == 0) {
                    gf_Acv_DiffSolo_Protoss_Easy_Check(auto96975E93_var);
                }
                else if (auto315C6E6F_val == 1) {
                    gf_Acv_DiffSolo_Protoss_Normal_Check(auto96975E93_var);
                }
                else if (auto315C6E6F_val == 2) {
                    gf_Acv_DiffSolo_Protoss_Hard_Check(auto96975E93_var);
                }
                else if (auto315C6E6F_val == 3) {
                    gf_Acv_DiffDuo_Protoss_Brutal_Check(auto96975E93_var);
                }
                else if (auto315C6E6F_val == 4) {
                    gf_Acv_DiffTrio_Protoss_Insane_Check(auto96975E93_var);
                }
                else if (auto315C6E6F_val == 5) {
                    gf_Acv_DiffSolo_Protoss_Hardcore_Check(auto96975E93_var);
                }
                else {
                }
            }

        }
    }

    if ((gv_playerAmountStart == 2) && (gv_difficulty >= 3)) {
        auto685679F4_g = gv_playerGroup;
        auto685679F4_var = -1;
        while (true) {
            auto685679F4_var = PlayerGroupNextPlayer(auto685679F4_g, auto685679F4_var);
            if (auto685679F4_var < 0) { break; }
            if (((gv_playerStats[auto685679F4_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] == 0) || (gv_playerStats[auto685679F4_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
                gv_playerStats[auto685679F4_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
                gf_Speedruns_UpdateTimeSolo((lv_part + 1), gv_difficulty, auto685679F4_var, gv_playerStats[auto685679F4_var].lv_difficultyTimeSolo[gv_difficulty][lv_part], true);
                auto33DA53C9_val = gv_difficulty;
                if (auto33DA53C9_val == 3) {
                    gf_Acv_DiffDuo_Protoss_Brutal_Check(auto685679F4_var);
                }
                else if (auto33DA53C9_val == 4) {
                    gf_Acv_DiffTrio_Protoss_Insane_Check(auto685679F4_var);
                }
                else if (auto33DA53C9_val == 5) {
                    gf_Acv_DiffSolo_Protoss_Hardcore_Check(auto685679F4_var);
                }
                else {
                }
            }

        }
    }

    if ((gv_playerAmountStart == 3) && (gv_difficulty >= 4)) {
        autoB061F849_g = gv_playerGroup;
        autoB061F849_var = -1;
        while (true) {
            autoB061F849_var = PlayerGroupNextPlayer(autoB061F849_g, autoB061F849_var);
            if (autoB061F849_var < 0) { break; }
            if (((gv_playerStats[autoB061F849_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] == 0) || (gv_playerStats[autoB061F849_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
                gv_playerStats[autoB061F849_var].lv_difficultyTimeSolo[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
                gf_Speedruns_UpdateTimeSolo((lv_part + 1), gv_difficulty, autoB061F849_var, gv_playerStats[autoB061F849_var].lv_difficultyTimeSolo[gv_difficulty][lv_part], true);
                autoDA921F13_val = gv_difficulty;
                if (autoDA921F13_val == 4) {
                    gf_Acv_DiffTrio_Protoss_Insane_Check(autoB061F849_var);
                }
                else if (autoDA921F13_val == 5) {
                    gf_Acv_DiffSolo_Protoss_Hardcore_Check(autoB061F849_var);
                }
                else {
                }
            }

        }
    }

    auto7BF70A10_g = gv_playerGroup;
    auto7BF70A10_var = -1;
    while (true) {
        auto7BF70A10_var = PlayerGroupNextPlayer(auto7BF70A10_g, auto7BF70A10_var);
        if (auto7BF70A10_var < 0) { break; }
        if (((gv_playerStats[auto7BF70A10_var].lv_difficultyTime[gv_difficulty][lv_part] == 0) || (gv_playerStats[auto7BF70A10_var].lv_difficultyTime[gv_difficulty][lv_part] > FloorI(GameGetMissionTime())))) {
            gv_playerStats[auto7BF70A10_var].lv_difficultyTime[gv_difficulty][lv_part] = FloorI(GameGetMissionTime());
            gf_Speedruns_UpdateTimeTeam((lv_part + 1), gv_difficulty, auto7BF70A10_var, gv_playerStats[auto7BF70A10_var].lv_difficultyTime[gv_difficulty][lv_part], true);
            autoBB1E1A48_val = gv_difficulty;
            if (autoBB1E1A48_val == 0) {
                gf_Acv_Diff_Protoss_Easy_Check(auto7BF70A10_var);
            }
            else if (autoBB1E1A48_val == 1) {
                gf_Acv_Diff_Protoss_Normal_Check(auto7BF70A10_var);
            }
            else if (autoBB1E1A48_val == 2) {
                gf_Acv_Diff_Protoss_Hard_Check(auto7BF70A10_var);
            }
            else if (autoBB1E1A48_val == 3) {
                gf_Acv_Diff_Protoss_Brutal_Check(auto7BF70A10_var);
            }
            else if (autoBB1E1A48_val == 4) {
                gf_Acv_Diff_Protoss_Insane_Check(auto7BF70A10_var);
            }
            else if (autoBB1E1A48_val == 5) {
                gf_Acv_Diff_Protoss_Hardcore_Check(auto7BF70A10_var);
            }
            else {
            }
        }

        if ((gv_flawlessFlag == true) && (gv_playerStats[auto7BF70A10_var].lv_flawlessProtoss[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
            gv_playerStats[auto7BF70A10_var].lv_flawlessProtoss[gv_difficulty] = true;
            gf_Acv_Flawless_P_Rewards(auto7BF70A10_var, gv_difficulty);
            gf_Acv_Flawless_P_UI(auto7BF70A10_var);
            gf_AcvInterface_SendNotification(auto7BF70A10_var, 2, "FlawlessP2");
            UIDisplayMessage(PlayerGroupSingle(auto7BF70A10_var), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Flawless"));
        }

        if ((gv_difficultyVariables.lv_points >= 1)) {
            gv_playerStats[auto7BF70A10_var].lv_winsProtoss += 1;
            gf_Acv_Win_P_UnlockCheck(auto7BF70A10_var);
        }

    }
}

void gf_WinEndGame () {
    // Automatic Variable Declarations
    unitgroup auto87FE1427_g;
    int auto87FE1427_u;
    unit auto87FE1427_var;
    playergroup auto5F389BAD_g;
    int auto5F389BAD_var;
    playergroup auto212322D9_g;
    int auto212322D9_var;

    // Implementation
    TriggerEnable(gt_Protoss_Spawns, false);
    UnitPauseAll(true);
    auto87FE1427_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87FE1427_u = UnitGroupCount(auto87FE1427_g, c_unitCountAll);
    for (;; auto87FE1427_u -= 1) {
        auto87FE1427_var = UnitGroupUnitFromEnd(auto87FE1427_g, auto87FE1427_u);
        if (auto87FE1427_var == null) { break; }
        UnitSetState(auto87FE1427_var, c_unitStateInvulnerable, true);
    }
    Wait(4.0, c_timeReal);
    auto5F389BAD_g = gv_playerGroup;
    auto5F389BAD_var = -1;
    while (true) {
        auto5F389BAD_var = PlayerGroupNextPlayer(auto5F389BAD_g, auto5F389BAD_var);
        if (auto5F389BAD_var < 0) { break; }
        gf_Save(auto5F389BAD_var);
        GameOver(auto5F389BAD_var, c_gameOverVictory, true, true);
    }
    auto212322D9_g = gv_spectatingPlayerGroup;
    auto212322D9_var = -1;
    while (true) {
        auto212322D9_var = PlayerGroupNextPlayer(auto212322D9_g, auto212322D9_var);
        if (auto212322D9_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_playerGroup, auto212322D9_var) == false)) {
            gf_Save(auto212322D9_var);
            GameOver(auto212322D9_var, c_gameOverDefeat, true, true);
        }

    }
}

void gf_RemoveActivePlayer (int lp_playerID) {
    // Variable Declarations
    int lv_tmpInt;
    fixed lv_biomass;
    bool lv_tmpBool;

    // Automatic Variable Declarations
    playergroup autoAD7F4C77_g;
    int autoAD7F4C77_var;
    playergroup autoCECF43BA_g;
    int auto6A5A6442_val;
    unitgroup auto01C6716C_g;
    int auto01C6716C_u;
    unit auto01C6716C_var;
    playergroup auto8097292E_g;
    int auto8097292E_var;
    unitgroup auto93A60DBF_g;
    int auto93A60DBF_u;
    unit auto93A60DBF_var;
    playergroup autoDC1D0A8A_g;
    int autoDC1D0A8A_var;
    playergroup autoF2D6041F_g;
    int autoF2D6041F_var;

    // Variable Initialization
    lv_tmpBool = true;

    // Implementation
    gv_playerStats[lp_playerID].lv_active = false;
    DialogControlSetEnabled(gv_statsInterface.lv_stats[lp_playerID], gv_startingPlayerGroup, false);
    PlayerGroupRemove(gv_playerGroup, lp_playerID);
    gv_playerAmount = PlayerGroupCount(gv_playerGroup);
    if ((gv_playerAmount == 0)) {
        TimerPause(gv_spawnTimer, true);
        TimerPause(gv_idleTimer, true);
    }

    autoAD7F4C77_g = gv_startingPlayerGroup;
    autoAD7F4C77_var = -1;
    while (true) {
        autoAD7F4C77_var = PlayerGroupNextPlayer(autoAD7F4C77_g, autoAD7F4C77_var);
        if (autoAD7F4C77_var < 0) { break; }
        DialogControlSetEnabled(gv_votekick.lv_kickButtons[autoAD7F4C77_var], PlayerGroupSingle(lp_playerID), false);
        gv_votekick.lv_votesCombined[autoAD7F4C77_var] = 0;
        autoCECF43BA_g = gv_startingPlayerGroup;
        lv_tmpInt = -1;
        while (true) {
            lv_tmpInt = PlayerGroupNextPlayer(autoCECF43BA_g, lv_tmpInt);
            if (lv_tmpInt < 0) { break; }
            gv_votekick.lv_votes[autoAD7F4C77_var][lv_tmpInt] = false;
        }
    }
    auto6A5A6442_val = gv_playerAmount;
    if (auto6A5A6442_val == 1) {
        gv_votekick.lv_votesRequired = 1;
    }
    else if (auto6A5A6442_val == 2) {
        gv_votekick.lv_votesRequired = 2;
    }
    else if (auto6A5A6442_val == 3) {
        gv_votekick.lv_votesRequired = 2;
    }
    else if (auto6A5A6442_val == 4) {
        gv_votekick.lv_votesRequired = 3;
    }
    else if (auto6A5A6442_val == 5) {
        gv_votekick.lv_votesRequired = 3;
    }
    else if (auto6A5A6442_val == 6) {
        gv_votekick.lv_votesRequired = 4;
    }
    else {
    }
    if ((PlayerGroupCount(gv_playerGroup) <= 2) && (PlayerGroupCount(gv_spectatingPlayerGroup) == 0)) {
        DialogControlSetEnabled(gv_menu.lv_votekick_Button, gv_startingPlayerGroup, false);
        libNtve_gf_SetDialogItemTooltip(gv_menu.lv_votekick_Button, StringExternal("Trig/Menu/VotekickRequirement"), gv_startingPlayerGroup);
        DialogControlSetVisible(gv_votekick.lv_mainFrame, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetEnabled(gv_menu.lv_votekick_Button, gv_startingPlayerGroup, true);
        libNtve_gf_SetDialogItemTooltip(gv_menu.lv_votekick_Button, StringToText(""), gv_startingPlayerGroup);
        gf_Votekick_Reset();
    }
    auto01C6716C_g = UnitGroup(null, lp_playerID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto01C6716C_u = UnitGroupCount(auto01C6716C_g, c_unitCountAll);
    for (;; auto01C6716C_u -= 1) {
        auto01C6716C_var = UnitGroupUnitFromEnd(auto01C6716C_g, auto01C6716C_u);
        if (auto01C6716C_var == null) { break; }
        UnitKill(auto01C6716C_var);
    }
    lv_biomass = PlayerGetPropertyFixed(lp_playerID, c_playerPropMinerals);
    PlayerModifyPropertyFixed(lp_playerID, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(lp_playerID, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    auto8097292E_g = gv_playerGroup;
    auto8097292E_var = -1;
    while (true) {
        auto8097292E_var = PlayerGroupNextPlayer(auto8097292E_g, auto8097292E_var);
        if (auto8097292E_var < 0) { break; }
        PlayerModifyPropertyFixed(auto8097292E_var, c_playerPropMinerals, c_playerPropOperAdd, (lv_biomass / gv_playerAmount));
    }
    Wait(1.0, c_timeGame);
    auto93A60DBF_g = UnitGroup(null, lp_playerID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto93A60DBF_u = UnitGroupCount(auto93A60DBF_g, c_unitCountAll);
    for (;; auto93A60DBF_u -= 1) {
        auto93A60DBF_var = UnitGroupUnitFromEnd(auto93A60DBF_g, auto93A60DBF_u);
        if (auto93A60DBF_var == null) { break; }
        UnitRemove(auto93A60DBF_var);
    }
    if ((gv_gameStarted == false)) {
        PlayerSetColorIndex(lp_playerID, 10, false);
        DialogControlHookup(gv_heroSelection.lv_playerShowcase[lp_playerID], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("PlayerName"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(PlayerName(lp_playerID), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerID, false))), PlayerGroupAll());
        gf_HeroSelect_Showcase_SetRank(lp_playerID);
        if ((gv_heroSelection.lv_player_IsReady[lp_playerID] == true)) {
            gv_heroSelection.lv_ready_Counter -= 1;
            autoDC1D0A8A_g = gv_playerGroup;
            autoDC1D0A8A_var = -1;
            while (true) {
                autoDC1D0A8A_var = PlayerGroupNextPlayer(autoDC1D0A8A_g, autoDC1D0A8A_var);
                if (autoDC1D0A8A_var < 0) { break; }
                libNtve_gf_SetAlliance(lp_playerID, autoDC1D0A8A_var, libNtve_ge_AllianceSetting_Neutral);
            }
        }

        if ((gv_heroSelection.lv_ready_Counter == gv_playerAmount)) {
            if ((gv_heroSelection.lv_customDiffHost == lp_playerID)) {
                if (gf_HeroSelect_CustomDiff_AllInputsValid()) {
                    gf_HeroSelect_Finish();
                    gv_heroSelection.lv_timer = 0;
                }
                else {
                    gf_HeroSelect_CustomDiff_NewHostAfterLeave(PlayerGroupPlayer(gv_playerGroup, 1));
                }
            }
            else {
                gf_HeroSelect_Finish();
                gv_heroSelection.lv_timer = 0;
            }
        }
        else {
            if ((gv_heroSelection.lv_customDiffHost == lp_playerID)) {
                lv_tmpBool = true;
                autoF2D6041F_g = gv_playerGroup;
                autoF2D6041F_var = -1;
                while (true) {
                    autoF2D6041F_var = PlayerGroupNextPlayer(autoF2D6041F_g, autoF2D6041F_var);
                    if (autoF2D6041F_var < 0) { break; }
                    if ((lv_tmpBool == true) && (gv_heroSelection.lv_player_IsReady[autoF2D6041F_var] == false)) {
                        lv_tmpBool = false;
                        gf_HeroSelect_CustomDiff_NewHostAfterLeave(autoF2D6041F_var);
                    }

                }
            }
            else {
                PlayerGroupRemove(gv_heroSelection.lv_customDiffNotHostPlayerGroup, lp_playerID);
            }
        }
    }

}

void gf_IncreaseUpgradeCount (fixed lp_increasebase) {
    // Automatic Variable Declarations
    playergroup auto54FAD081_g;
    int auto54FAD081_var;

    // Implementation
    gv_upgradeCountDecimal += (lp_increasebase * gv_difficultyVariables.lv_upgradeCountFactor);
    gv_upgradeCountRounded = RoundI(gv_upgradeCountDecimal);
    if ((gv_upgradeCountRounded > 100)) {
        gv_upgradeCountRounded = 100;
    }

    auto54FAD081_g = gv_playerGroup;
    auto54FAD081_var = -1;
    while (true) {
        auto54FAD081_var = PlayerGroupNextPlayer(auto54FAD081_g, auto54FAD081_var);
        if (auto54FAD081_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto54FAD081_var, "UnlockDmgArmorCount", gv_upgradeCountRounded);
    }
}

void gf_AddExp (unit lp_unit, fixed lp_amount) {
    // Variable Declarations
    const fixed lv_expTotal = 96383.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitXPTotal(lp_unit) < lv_expTotal)) {
        UnitSetPropertyFixed(lp_unit, c_unitPropXP, (UnitXPTotal(lp_unit) + lp_amount));
        if ((UnitXPTotal(lp_unit) > lv_expTotal)) {
            UnitSetPropertyFixed(lp_unit, c_unitPropXP, lv_expTotal);
        }

    }

}

void gf_Terran_Exp_KillIncome (string lp_killedUnitType, int lp_enemyType) {
    // Variable Declarations
    const fixed lv_expTotal = 96383.0;
    const int lv_expShareRange = 6;
    fixed lv_exp;

    // Automatic Variable Declarations
    unitgroup autoF474DFC3_g;
    int autoF474DFC3_u;
    unit autoF474DFC3_var;

    // Variable Initialization
    lv_exp = gf_Terran_Exp_BaseExpList(lp_killedUnitType);

    // Implementation
    lv_exp *= gv_difficultyVariables.lv_expMult;
    lv_exp /= 1.5;
    if ((lp_enemyType == 1)) {
        lv_exp *= gv_partTerran.lv_junker_Exp_Mult;
    }
    else {
        if ((lp_enemyType == 2)) {
            lv_exp *= gv_partTerran.lv_blackOps_Exp_Mult;
        }

    }
    autoF474DFC3_g = gv_heroUnitGroup;
    autoF474DFC3_u = UnitGroupCount(autoF474DFC3_g, c_unitCountAll);
    for (;; autoF474DFC3_u -= 1) {
        autoF474DFC3_var = UnitGroupUnitFromEnd(autoF474DFC3_g, autoF474DFC3_u);
        if (autoF474DFC3_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoF474DFC3_var) == false)) {
            gf_AddExp(autoF474DFC3_var, ((lv_exp * gv_playerStats[UnitGetOwner(autoF474DFC3_var)].lv_expBonusMult) + gv_playerStats[UnitGetOwner(autoF474DFC3_var)].lv_expBonusAdd));
        }

    }
}

fixed gf_Terran_Exp_BaseExpList (string lp_unitType) {
    // Automatic Variable Declarations
    string autoC4824D6D_val;

    // Implementation
    autoC4824D6D_val = lp_unitType;
    if (autoC4824D6D_val == "HellionTank2") {
        return 500.0;
    }
    else if (autoC4824D6D_val == "Thor") {
        return 500.0;
    }
    else if (autoC4824D6D_val == "PlanetaryFortress") {
        return 500.0;
    }
    else if (autoC4824D6D_val == "OrbitalCommand") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "OrbitalCommand2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Cyclone2") {
        return 6.5;
    }
    else if (autoC4824D6D_val == "Ghost2") {
        return 8.0;
    }
    else if (autoC4824D6D_val == "Hellion2") {
        return 5.5;
    }
    else if (autoC4824D6D_val == "Marauder2") {
        return 8.0;
    }
    else if (autoC4824D6D_val == "Marine2") {
        return 4.5;
    }
    else if (autoC4824D6D_val == "Reaper2") {
        return 5.5;
    }
    else if (autoC4824D6D_val == "SiegeTank2") {
        return 9.0;
    }
    else if (autoC4824D6D_val == "SiegeTankSieged2") {
        return 20.0;
    }
    else if (autoC4824D6D_val == "Viking2") {
        return 10.0;
    }
    else if (autoC4824D6D_val == "WidowMine2") {
        return 35.0;
    }
    else if (autoC4824D6D_val == "Barracks") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "EngineeringBay") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Factory") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "FusionCore") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "GhostAcademy") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Starport") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Armory") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "HERCCompound") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Bunker") {
        return 40.0;
    }
    else if (autoC4824D6D_val == "AutoTurret") {
        return 30.0;
    }
    else if (autoC4824D6D_val == "SupplyDepot2") {
        return 15.0;
    }
    else if (autoC4824D6D_val == "SupplyDepotLowered2") {
        return 15.0;
    }
    else if (autoC4824D6D_val == "Cyclone22") {
        return 7.0;
    }
    else if (autoC4824D6D_val == "Ghost3") {
        return 8.0;
    }
    else if (autoC4824D6D_val == "Hellion22") {
        return 6.0;
    }
    else if (autoC4824D6D_val == "Marauder22") {
        return 8.5;
    }
    else if (autoC4824D6D_val == "Marine22") {
        return 5.0;
    }
    else if (autoC4824D6D_val == "Reaper22") {
        return 6.0;
    }
    else if (autoC4824D6D_val == "SiegeTank22") {
        return 9.5;
    }
    else if (autoC4824D6D_val == "SiegeTankSieged22") {
        return 24.0;
    }
    else if (autoC4824D6D_val == "Viking22") {
        return 11.0;
    }
    else if (autoC4824D6D_val == "WidowMine22") {
        return 35.0;
    }
    else if (autoC4824D6D_val == "Barracks2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "EngineeringBay2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Factory2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "FusionCore2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "GhostAcademy2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Starport2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Armory2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "HERCCompound2") {
        return 50.0;
    }
    else if (autoC4824D6D_val == "Bunker2") {
        return 40.0;
    }
    else if (autoC4824D6D_val == "AutoTurret2") {
        return 30.0;
    }
    else if (autoC4824D6D_val == "SupplyDepot22") {
        return 15.0;
    }
    else if (autoC4824D6D_val == "SupplyDepotLowered22") {
        return 15.0;
    }
    else {
        return 0.0;
    }
}

void gf_Protoss_Exp_KillIncome (string lp_killedUnitType, int lp_enemyType) {
    // Variable Declarations
    const fixed lv_expTotal = 96383.0;
    const int lv_expShareRange = 6;
    fixed lv_exp;

    // Automatic Variable Declarations
    unitgroup autoE6A44061_g;
    int autoE6A44061_u;
    unit autoE6A44061_var;

    // Variable Initialization
    lv_exp = gf_Protoss_Biomass_BaseExpList(lp_killedUnitType);

    // Implementation
    lv_exp *= gv_difficultyVariables.lv_expMult;
    lv_exp /= 1.5;
    if ((lp_enemyType == 1)) {
        lv_exp *= gv_partProtoss.lv_mech_Exp_Mult;
    }
    else {
        if ((lp_enemyType == 2)) {
            lv_exp *= gv_partProtoss.lv_psi_Exp_Mult;
        }
        else {
            if ((lp_enemyType == 3)) {
                lv_exp *= ((gv_partProtoss.lv_mech_Exp_Mult + gv_partProtoss.lv_psi_Exp_Mult) / 2.0);
            }

        }
    }
    autoE6A44061_g = gv_heroUnitGroup;
    autoE6A44061_u = UnitGroupCount(autoE6A44061_g, c_unitCountAll);
    for (;; autoE6A44061_u -= 1) {
        autoE6A44061_var = UnitGroupUnitFromEnd(autoE6A44061_g, autoE6A44061_u);
        if (autoE6A44061_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoE6A44061_var) == false)) {
            gf_AddExp(autoE6A44061_var, ((lv_exp * gv_playerStats[UnitGetOwner(autoE6A44061_var)].lv_expBonusMult) + gv_playerStats[UnitGetOwner(autoE6A44061_var)].lv_expBonusAdd));
        }

    }
}

fixed gf_Protoss_Exp_BaseExpList (string lp_unitType) {
    // Automatic Variable Declarations
    string auto5BD10001_val;

    // Implementation
    auto5BD10001_val = lp_unitType;
    if (auto5BD10001_val == "TransportPrism") {
        return 50.0;
    }
    else if (auto5BD10001_val == "TransportEscort") {
        return 75.0;
    }
    else if (auto5BD10001_val == "VoidMine") {
        return 20.0;
    }
    else if (auto5BD10001_val == "Atlantis") {
        return 500.0;
    }
    else if (auto5BD10001_val == "Madness") {
        return 500.0;
    }
    else if (auto5BD10001_val == "Lightning") {
        return 250.0;
    }
    else if (auto5BD10001_val == "Thunder") {
        return 250.0;
    }
    else if (auto5BD10001_val == "ObeliskStandard") {
        return 12.0;
    }
    else if (auto5BD10001_val == "ObeliskStandardOpen") {
        return 12.0;
    }
    else if (auto5BD10001_val == "MonolithAncient") {
        return 30.0;
    }
    else if (auto5BD10001_val == "MonolithNerazim") {
        return 30.0;
    }
    else if (auto5BD10001_val == "MonolithStandard") {
        return 30.0;
    }
    else if (auto5BD10001_val == "PhotonCannonAncient") {
        return 25.0;
    }
    else if (auto5BD10001_val == "PhotonCannonPurifier") {
        return 25.0;
    }
    else if (auto5BD10001_val == "PhotonCannonStandard") {
        return 25.0;
    }
    else if (auto5BD10001_val == "PhotonCannonTaldarim") {
        return 25.0;
    }
    else if (auto5BD10001_val == "PylonAncient") {
        return 20.0;
    }
    else if (auto5BD10001_val == "PylonJudicator") {
        return 20.0;
    }
    else if (auto5BD10001_val == "PylonNerazim") {
        return 20.0;
    }
    else if (auto5BD10001_val == "PylonPurifier") {
        return 20.0;
    }
    else if (auto5BD10001_val == "PylonStandard") {
        return 20.0;
    }
    else if (auto5BD10001_val == "PylonTaldarim") {
        return 20.0;
    }
    else if (auto5BD10001_val == "VoidContainmentAncient") {
        return 40.0;
    }
    else if (auto5BD10001_val == "VoidContainmentNerazim") {
        return 40.0;
    }
    else if (auto5BD10001_val == "VoidContainmentStandard") {
        return 40.0;
    }
    else if (auto5BD10001_val == "VoidContainmentTaldarim") {
        return 40.0;
    }
    else if (auto5BD10001_val == "DisruptorAncient") {
        return 2.0;
    }
    else if (auto5BD10001_val == "DisruptorStandard") {
        return 2.0;
    }
    else if (auto5BD10001_val == "DarkTemplarAncient") {
        return 4.0;
    }
    else if (auto5BD10001_val == "DarkTemplarTaldarim2") {
        return 4.0;
    }
    else if (auto5BD10001_val == "SentryPurifier2") {
        return 5.0;
    }
    else if (auto5BD10001_val == "SentryNerazim") {
        return 5.0;
    }
    else if (auto5BD10001_val == "AdeptAncient") {
        return 5.0;
    }
    else if (auto5BD10001_val == "AdeptTaldarim") {
        return 5.0;
    }
    else if (auto5BD10001_val == "AdeptShadow") {
        return 2.0;
    }
    else if (auto5BD10001_val == "DragoonPurifier") {
        return 3.0;
    }
    else if (auto5BD10001_val == "DragoonStandard") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ZealotAncient") {
        return 2.5;
    }
    else if (auto5BD10001_val == "ZealotNerazim") {
        return 2.5;
    }
    else if (auto5BD10001_val == "ZealotPurifier2") {
        return 2.5;
    }
    else if (auto5BD10001_val == "ZealotStandard") {
        return 2.5;
    }
    else if (auto5BD10001_val == "ZealotTaldarim") {
        return 2.5;
    }
    else if (auto5BD10001_val == "ColossusAncient") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ColossusPurifier2") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ColossusTaldarim2") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ImmortalAncient") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ImmortalPurifier") {
        return 3.0;
    }
    else if (auto5BD10001_val == "ArchonPurifier") {
        return 4.0;
    }
    else if (auto5BD10001_val == "ArchonAncient") {
        return 4.0;
    }
    else if (auto5BD10001_val == "StalkerPurifier2") {
        return 2.0;
    }
    else if (auto5BD10001_val == "StalkerTaldarim") {
        return 2.0;
    }
    else if (auto5BD10001_val == "CyberneticsCoreAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "CyberneticsCoreStandard") {
        return 35.0;
    }
    else if (auto5BD10001_val == "DarkShrineAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "DarkShrineTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "ForgePurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "ForgeTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "GatewayAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "GatewayPurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "GatewayStandard") {
        return 35.0;
    }
    else if (auto5BD10001_val == "GatewayTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "NexusAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "NexusNerazim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "NexusPurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "NexusStandard") {
        return 35.0;
    }
    else if (auto5BD10001_val == "NexusTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "RoboticsBayAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "RoboticsBayPurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "RoboticsBayTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "RoboticsFacilityAncient") {
        return 35.0;
    }
    else if (auto5BD10001_val == "RoboticsFacilityPurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "TemplarArchiveStandard") {
        return 35.0;
    }
    else if (auto5BD10001_val == "TemplarArchiveTaldarim") {
        return 35.0;
    }
    else if (auto5BD10001_val == "TwilightCouncilPurifier") {
        return 35.0;
    }
    else if (auto5BD10001_val == "TwilightCouncilTaldarim") {
        return 35.0;
    }
    else {
        return 0.0;
    }
}

trigger auto_gf_Terran_Biomass_KillIncome_Trigger = null;
string auto_gf_Terran_Biomass_KillIncome_lp_killedUnitType;
point auto_gf_Terran_Biomass_KillIncome_lp_positionKilledUnit;
int auto_gf_Terran_Biomass_KillIncome_lp_enemyType;

void gf_Terran_Biomass_KillIncome (string lp_killedUnitType, point lp_positionKilledUnit, int lp_enemyType) {
    auto_gf_Terran_Biomass_KillIncome_lp_killedUnitType = lp_killedUnitType;
    auto_gf_Terran_Biomass_KillIncome_lp_positionKilledUnit = lp_positionKilledUnit;
    auto_gf_Terran_Biomass_KillIncome_lp_enemyType = lp_enemyType;

    if (auto_gf_Terran_Biomass_KillIncome_Trigger == null) {
        auto_gf_Terran_Biomass_KillIncome_Trigger = TriggerCreate("auto_gf_Terran_Biomass_KillIncome_TriggerFunc");
    }

    TriggerExecute(auto_gf_Terran_Biomass_KillIncome_Trigger, false, false);
}

bool auto_gf_Terran_Biomass_KillIncome_TriggerFunc (bool testConds, bool runActions) {
    string lp_killedUnitType = auto_gf_Terran_Biomass_KillIncome_lp_killedUnitType;
    point lp_positionKilledUnit = auto_gf_Terran_Biomass_KillIncome_lp_positionKilledUnit;
    int lp_enemyType = auto_gf_Terran_Biomass_KillIncome_lp_enemyType;

    int init_i;

    // Variable Declarations
    fixed lv_income;
    int[gv_maxAmountPlayers + 1] lv_textTag;

    // Automatic Variable Declarations
    playergroup auto9CAA98A5_g;
    int auto9CAA98A5_var;
    playergroup auto385A28A5_g;
    int auto385A28A5_var;

    // Variable Initialization
    lv_income = gf_Terran_Biomass_BaseIncomeList(lp_killedUnitType);
    for (init_i = 0; init_i <= gv_maxAmountPlayers; init_i += 1) {
        lv_textTag[init_i] = c_textTagNone;
    }

    // Implementation
    lv_income *= gv_difficultyVariables.lv_biomassMult;
    if ((lp_enemyType == 1)) {
        lv_income *= gv_partTerran.lv_junker_Biomass_Mult;
    }
    else {
        if ((lp_enemyType == 2)) {
            lv_income *= gv_partTerran.lv_blackOps_Biomass_Mult;
        }

    }
    auto9CAA98A5_g = gv_playerGroup;
    auto9CAA98A5_var = -1;
    while (true) {
        auto9CAA98A5_var = PlayerGroupNextPlayer(auto9CAA98A5_g, auto9CAA98A5_var);
        if (auto9CAA98A5_var < 0) { break; }
        TextTagCreate(TextWithColor((StringToText("+") + FixedToText(((lv_income * gv_playerStats[auto9CAA98A5_var].lv_biomassBonusMult) + gv_playerStats[auto9CAA98A5_var].lv_biomassBonusAdd), 2)), Color(0.00, 80.78, 0.00)), 24, lp_positionKilledUnit, 1.0, true, false, PlayerGroupSingle(auto9CAA98A5_var));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        lv_textTag[auto9CAA98A5_var] = TextTagLastCreated();
        PlayerModifyPropertyFixed(auto9CAA98A5_var, c_playerPropMinerals, c_playerPropOperAdd, ((lv_income * gv_playerStats[auto9CAA98A5_var].lv_biomassBonusMult) + gv_playerStats[auto9CAA98A5_var].lv_biomassBonusAdd));
    }
    Wait(3.5, c_timeGame);
    auto385A28A5_g = gv_playerGroup;
    auto385A28A5_var = -1;
    while (true) {
        auto385A28A5_var = PlayerGroupNextPlayer(auto385A28A5_g, auto385A28A5_var);
        if (auto385A28A5_var < 0) { break; }
        TextTagDestroy(lv_textTag[auto385A28A5_var]);
    }
    return true;
}

fixed gf_Terran_Biomass_BaseIncomeList (string lp_unitType) {
    // Automatic Variable Declarations
    string auto8C51F003_val;

    // Implementation
    auto8C51F003_val = lp_unitType;
    if (auto8C51F003_val == "HellionTank2") {
        return 500.0;
    }
    else if (auto8C51F003_val == "Thor") {
        return 500.0;
    }
    else if (auto8C51F003_val == "PlanetaryFortress") {
        return 500.0;
    }
    else if (auto8C51F003_val == "OrbitalCommand") {
        return 40.0;
    }
    else if (auto8C51F003_val == "OrbitalCommand2") {
        return 40.0;
    }
    else if (auto8C51F003_val == "Cyclone2") {
        return 3.0;
    }
    else if (auto8C51F003_val == "Ghost2") {
        return 3.0;
    }
    else if (auto8C51F003_val == "Hellion2") {
        return 3.0;
    }
    else if (auto8C51F003_val == "Marauder2") {
        return 3.5;
    }
    else if (auto8C51F003_val == "Marine2") {
        return 2.0;
    }
    else if (auto8C51F003_val == "Reaper2") {
        return 2.0;
    }
    else if (auto8C51F003_val == "SiegeTank2") {
        return 3.0;
    }
    else if (auto8C51F003_val == "SiegeTankSieged2") {
        return 10.0;
    }
    else if (auto8C51F003_val == "Viking2") {
        return 4.0;
    }
    else if (auto8C51F003_val == "WidowMine2") {
        return 20.0;
    }
    else if (auto8C51F003_val == "Barracks") {
        return 80.0;
    }
    else if (auto8C51F003_val == "EngineeringBay") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Factory") {
        return 80.0;
    }
    else if (auto8C51F003_val == "FusionCore") {
        return 80.0;
    }
    else if (auto8C51F003_val == "GhostAcademy") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Starport") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Armory") {
        return 80.0;
    }
    else if (auto8C51F003_val == "HERCCompound") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Bunker") {
        return 35.0;
    }
    else if (auto8C51F003_val == "AutoTurret") {
        return 25.0;
    }
    else if (auto8C51F003_val == "SupplyDepot2") {
        return 15.0;
    }
    else if (auto8C51F003_val == "SupplyDepotLowered2") {
        return 15.0;
    }
    else if (auto8C51F003_val == "Cyclone22") {
        return 3.0;
    }
    else if (auto8C51F003_val == "Ghost3") {
        return 4.0;
    }
    else if (auto8C51F003_val == "Hellion22") {
        return 3.0;
    }
    else if (auto8C51F003_val == "Marauder22") {
        return 4.0;
    }
    else if (auto8C51F003_val == "Marine22") {
        return 2.0;
    }
    else if (auto8C51F003_val == "Reaper22") {
        return 3.0;
    }
    else if (auto8C51F003_val == "SiegeTank22") {
        return 4.0;
    }
    else if (auto8C51F003_val == "SiegeTankSieged22") {
        return 12.0;
    }
    else if (auto8C51F003_val == "Viking22") {
        return 5.0;
    }
    else if (auto8C51F003_val == "WidowMine22") {
        return 20.0;
    }
    else if (auto8C51F003_val == "Barracks2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "EngineeringBay2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Factory2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "FusionCore2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "GhostAcademy2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Starport2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Armory2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "HERCCompound2") {
        return 80.0;
    }
    else if (auto8C51F003_val == "Bunker2") {
        return 35.0;
    }
    else if (auto8C51F003_val == "AutoTurret2") {
        return 25.0;
    }
    else if (auto8C51F003_val == "SupplyDepot22") {
        return 15.0;
    }
    else if (auto8C51F003_val == "SupplyDepotLowered22") {
        return 15.0;
    }
    else {
        return 0.0;
    }
}

trigger auto_gf_Protoss_Biomass_KillIncome_Trigger = null;
string auto_gf_Protoss_Biomass_KillIncome_lp_killedUnitType;
point auto_gf_Protoss_Biomass_KillIncome_lp_positionKilledUnit;
int auto_gf_Protoss_Biomass_KillIncome_lp_enemyType;

void gf_Protoss_Biomass_KillIncome (string lp_killedUnitType, point lp_positionKilledUnit, int lp_enemyType) {
    auto_gf_Protoss_Biomass_KillIncome_lp_killedUnitType = lp_killedUnitType;
    auto_gf_Protoss_Biomass_KillIncome_lp_positionKilledUnit = lp_positionKilledUnit;
    auto_gf_Protoss_Biomass_KillIncome_lp_enemyType = lp_enemyType;

    if (auto_gf_Protoss_Biomass_KillIncome_Trigger == null) {
        auto_gf_Protoss_Biomass_KillIncome_Trigger = TriggerCreate("auto_gf_Protoss_Biomass_KillIncome_TriggerFunc");
    }

    TriggerExecute(auto_gf_Protoss_Biomass_KillIncome_Trigger, false, false);
}

bool auto_gf_Protoss_Biomass_KillIncome_TriggerFunc (bool testConds, bool runActions) {
    string lp_killedUnitType = auto_gf_Protoss_Biomass_KillIncome_lp_killedUnitType;
    point lp_positionKilledUnit = auto_gf_Protoss_Biomass_KillIncome_lp_positionKilledUnit;
    int lp_enemyType = auto_gf_Protoss_Biomass_KillIncome_lp_enemyType;

    int init_i;

    // Variable Declarations
    fixed lv_income;
    int[gv_maxAmountPlayers + 1] lv_textTag;

    // Automatic Variable Declarations
    playergroup autoBDACDB30_g;
    int autoBDACDB30_var;
    playergroup auto54F52BDC_g;
    int auto54F52BDC_var;

    // Variable Initialization
    lv_income = gf_Protoss_Biomass_BaseExpList(lp_killedUnitType);
    for (init_i = 0; init_i <= gv_maxAmountPlayers; init_i += 1) {
        lv_textTag[init_i] = c_textTagNone;
    }

    // Implementation
    lv_income *= gv_difficultyVariables.lv_biomassMult;
    if ((lp_enemyType == 1)) {
        lv_income *= gv_partProtoss.lv_mech_Biomass_Mult;
    }
    else {
        if ((lp_enemyType == 2)) {
            lv_income *= gv_partProtoss.lv_psi_Biomass_Mult;
        }
        else {
            if ((lp_enemyType == 3)) {
                lv_income *= ((gv_partProtoss.lv_mech_Biomass_Mult + gv_partProtoss.lv_psi_Biomass_Mult) / 2.0);
            }

        }
    }
    autoBDACDB30_g = gv_playerGroup;
    autoBDACDB30_var = -1;
    while (true) {
        autoBDACDB30_var = PlayerGroupNextPlayer(autoBDACDB30_g, autoBDACDB30_var);
        if (autoBDACDB30_var < 0) { break; }
        TextTagCreate(TextWithColor((StringToText("+") + FixedToText(((lv_income * gv_playerStats[autoBDACDB30_var].lv_biomassBonusMult) + gv_playerStats[autoBDACDB30_var].lv_biomassBonusAdd), 2)), Color(0.00, 80.78, 0.00)), 24, lp_positionKilledUnit, 1.0, true, false, PlayerGroupSingle(autoBDACDB30_var));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        lv_textTag[autoBDACDB30_var] = TextTagLastCreated();
        PlayerModifyPropertyFixed(autoBDACDB30_var, c_playerPropMinerals, c_playerPropOperAdd, ((lv_income * gv_playerStats[autoBDACDB30_var].lv_biomassBonusMult) + gv_playerStats[autoBDACDB30_var].lv_biomassBonusAdd));
    }
    Wait(3.5, c_timeGame);
    auto54F52BDC_g = gv_playerGroup;
    auto54F52BDC_var = -1;
    while (true) {
        auto54F52BDC_var = PlayerGroupNextPlayer(auto54F52BDC_g, auto54F52BDC_var);
        if (auto54F52BDC_var < 0) { break; }
        TextTagDestroy(lv_textTag[auto54F52BDC_var]);
    }
    return true;
}

fixed gf_Protoss_Biomass_BaseExpList (string lp_unitType) {
    // Automatic Variable Declarations
    string autoCEB590DE_val;

    // Implementation
    autoCEB590DE_val = lp_unitType;
    if (autoCEB590DE_val == "TransportPrism") {
        return 125.0;
    }
    else if (autoCEB590DE_val == "TransportEscort") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "VoidMine") {
        return 20.0;
    }
    else if (autoCEB590DE_val == "Atlantis") {
        return 500.0;
    }
    else if (autoCEB590DE_val == "Madness") {
        return 500.0;
    }
    else if (autoCEB590DE_val == "Lightning") {
        return 250.0;
    }
    else if (autoCEB590DE_val == "Thunder") {
        return 250.0;
    }
    else if (autoCEB590DE_val == "ObeliskStandard") {
        return 12.0;
    }
    else if (autoCEB590DE_val == "ObeliskStandardOpen") {
        return 12.0;
    }
    else if (autoCEB590DE_val == "MonolithAncient") {
        return 25.0;
    }
    else if (autoCEB590DE_val == "MonolithNerazim") {
        return 25.0;
    }
    else if (autoCEB590DE_val == "MonolithStandard") {
        return 25.0;
    }
    else if (autoCEB590DE_val == "PhotonCannonAncient") {
        return 20.0;
    }
    else if (autoCEB590DE_val == "PhotonCannonPurifier") {
        return 20.0;
    }
    else if (autoCEB590DE_val == "PhotonCannonStandard") {
        return 20.0;
    }
    else if (autoCEB590DE_val == "PhotonCannonTaldarim") {
        return 20.0;
    }
    else if (autoCEB590DE_val == "PylonAncient") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "PylonJudicator") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "PylonNerazim") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "PylonPurifier") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "PylonStandard") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "PylonTaldarim") {
        return 15.0;
    }
    else if (autoCEB590DE_val == "VoidContainmentAncient") {
        return 30.0;
    }
    else if (autoCEB590DE_val == "VoidContainmentNerazim") {
        return 30.0;
    }
    else if (autoCEB590DE_val == "VoidContainmentStandard") {
        return 30.0;
    }
    else if (autoCEB590DE_val == "VoidContainmentTaldarim") {
        return 30.0;
    }
    else if (autoCEB590DE_val == "DisruptorAncient") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "DisruptorStandard") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "DarkTemplarAncient") {
        return 6.0;
    }
    else if (autoCEB590DE_val == "DarkTemplarTaldarim2") {
        return 6.0;
    }
    else if (autoCEB590DE_val == "SentryPurifier2") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "SentryNerazim") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "AdeptAncient") {
        return 4.0;
    }
    else if (autoCEB590DE_val == "AdeptTaldarim") {
        return 4.0;
    }
    else if (autoCEB590DE_val == "AdeptShadow") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "DragoonPurifier") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "DragoonStandard") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "ZealotAncient") {
        return 3.0;
    }
    else if (autoCEB590DE_val == "ZealotNerazim") {
        return 3.0;
    }
    else if (autoCEB590DE_val == "ZealotPurifier2") {
        return 3.0;
    }
    else if (autoCEB590DE_val == "ZealotStandard") {
        return 3.0;
    }
    else if (autoCEB590DE_val == "ZealotTaldarim") {
        return 3.0;
    }
    else if (autoCEB590DE_val == "ColossusAncient") {
        return 1.5;
    }
    else if (autoCEB590DE_val == "ColossusPurifier2") {
        return 1.5;
    }
    else if (autoCEB590DE_val == "ColossusTaldarim2") {
        return 1.5;
    }
    else if (autoCEB590DE_val == "ImmortalAncient") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "ImmortalPurifier") {
        return 1.0;
    }
    else if (autoCEB590DE_val == "ArchonPurifier") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "ArchonAncient") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "StalkerPurifier2") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "StalkerTaldarim") {
        return 2.0;
    }
    else if (autoCEB590DE_val == "CyberneticsCoreAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "CyberneticsCoreStandard") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "DarkShrineAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "DarkShrineTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "ForgePurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "ForgeTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "GatewayAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "GatewayPurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "GatewayStandard") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "GatewayTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "NexusAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "NexusNerazim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "NexusPurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "NexusStandard") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "NexusTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "RoboticsBayAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "RoboticsBayPurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "RoboticsBayTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "RoboticsFacilityAncient") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "RoboticsFacilityPurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "TemplarArchiveStandard") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "TemplarArchiveTaldarim") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "TwilightCouncilPurifier") {
        return 50.0;
    }
    else if (autoCEB590DE_val == "TwilightCouncilTaldarim") {
        return 50.0;
    }
    else {
        return 0.0;
    }
}

void gf_Init_Essences_LarvaSpawns () {
    // Variable Declarations
    point[22] lv_spawnPoints;
    point lv_tmpPoint;
    int lv_spawnsMax;
    int lv_tmpInt;
    int lv_tmpIntLoop;

    // Automatic Variable Declarations
    int auto9B209C55_ae;
    const int auto9B209C55_ai = 1;

    // Variable Initialization
    lv_spawnsMax = 21;

    // Implementation
    lv_spawnPoints[0] = PointFromId(529173540);
    lv_spawnPoints[1] = PointFromId(118371054);
    lv_spawnPoints[2] = PointFromId(1636103039);
    lv_spawnPoints[3] = PointFromId(684048646);
    lv_spawnPoints[4] = PointFromId(464617947);
    lv_spawnPoints[5] = PointFromId(1842548853);
    lv_spawnPoints[6] = PointFromId(321685276);
    lv_spawnPoints[7] = PointFromId(1941979065);
    lv_spawnPoints[8] = PointFromId(630963875);
    lv_spawnPoints[9] = PointFromId(716481849);
    lv_spawnPoints[10] = PointFromId(424498470);
    lv_spawnPoints[11] = PointFromId(1038710699);
    lv_spawnPoints[12] = PointFromId(1044508911);
    lv_spawnPoints[13] = PointFromId(1406500159);
    lv_spawnPoints[14] = PointFromId(652747070);
    lv_spawnPoints[15] = PointFromId(242006757);
    lv_spawnPoints[16] = PointFromId(2131083693);
    lv_spawnPoints[17] = PointFromId(1789464848);
    lv_spawnPoints[18] = PointFromId(1693672930);
    lv_spawnPoints[19] = PointFromId(1643292988);
    lv_spawnPoints[20] = PointFromId(1294434793);

    auto9B209C55_ae = (gv_difficultyVariables.lv_essenceAmount - 1);
    lv_tmpIntLoop = 0;
    for ( ; ( (auto9B209C55_ai >= 0 && lv_tmpIntLoop <= auto9B209C55_ae) || (auto9B209C55_ai < 0 && lv_tmpIntLoop >= auto9B209C55_ae) ) ; lv_tmpIntLoop += auto9B209C55_ai ) {
        lv_tmpInt = RandomInt(0, (lv_spawnsMax - (lv_tmpIntLoop + 1)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Larva2", 0, gv_collectiblePlayerEnemyNeutral, lv_spawnPoints[lv_tmpInt]);
        lv_spawnPoints[lv_tmpInt] = lv_spawnPoints[(lv_spawnsMax - (lv_tmpIntLoop + 1))];
    }
}

void gf_Init_Essences_LarvaSpawns_Protoss () {
    // Variable Declarations
    const int lv_spawnsMax = 10;
    point[lv_spawnsMax + 1] lv_spawnPoints;
    point lv_tmpPoint;
    int lv_tmpInt;
    int lv_tmpIntLoop;

    // Automatic Variable Declarations
    int auto9F2DDB3F_ae;
    const int auto9F2DDB3F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_spawnPoints[0] = PointFromId(1975857108);
    lv_spawnPoints[1] = PointFromId(296068383);
    lv_spawnPoints[2] = PointFromId(663792485);
    lv_spawnPoints[3] = PointFromId(546768816);
    lv_spawnPoints[4] = PointFromId(924001281);
    lv_spawnPoints[5] = PointFromId(561716525);
    lv_spawnPoints[6] = PointFromId(159189400);
    lv_spawnPoints[7] = PointFromId(958488363);
    lv_spawnPoints[8] = PointFromId(411093926);
    lv_spawnPoints[9] = PointFromId(1030208542);

    auto9F2DDB3F_ae = (gv_difficultyVariables.lv_essenceAmount - 1);
    lv_tmpIntLoop = 0;
    for ( ; ( (auto9F2DDB3F_ai >= 0 && lv_tmpIntLoop <= auto9F2DDB3F_ae) || (auto9F2DDB3F_ai < 0 && lv_tmpIntLoop >= auto9F2DDB3F_ae) ) ; lv_tmpIntLoop += auto9F2DDB3F_ai ) {
        lv_tmpInt = RandomInt(0, (lv_spawnsMax - (lv_tmpIntLoop + 1)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Larva2", 0, 0, lv_spawnPoints[lv_tmpInt]);
        lv_spawnPoints[lv_tmpInt] = lv_spawnPoints[(lv_spawnsMax - (lv_tmpIntLoop + 1))];
    }
}

void gf_Init_Scientists () {
    // Variable Declarations
    int lv_tmpIntLoop;
    point[6] lv_scientists_Spawns;
    int lv_spawnsMax;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto53BE6A43_ae;
    const int auto53BE6A43_ai = 1;

    // Variable Initialization
    lv_spawnsMax = 5;

    // Implementation
    lv_scientists_Spawns[0] = PointFromId(1598645966);
    lv_scientists_Spawns[1] = PointFromId(1954396637);
    lv_scientists_Spawns[2] = PointFromId(553499220);
    lv_scientists_Spawns[3] = PointFromId(1756650619);
    lv_scientists_Spawns[4] = PointFromId(125942519);
    auto53BE6A43_ae = (gv_difficultyVariables.lv_scientistsAmount - 1);
    lv_tmpIntLoop = 0;
    for ( ; ( (auto53BE6A43_ai >= 0 && lv_tmpIntLoop <= auto53BE6A43_ae) || (auto53BE6A43_ai < 0 && lv_tmpIntLoop >= auto53BE6A43_ae) ) ; lv_tmpIntLoop += auto53BE6A43_ai ) {
        lv_tmpInt = RandomInt(0, (lv_spawnsMax - (lv_tmpIntLoop + 1)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scientist", 0, gv_collectiblePlayerEnemyAllied, lv_scientists_Spawns[lv_tmpInt]);
        lv_scientists_Spawns[lv_tmpInt] = lv_scientists_Spawns[(lv_spawnsMax - (lv_tmpIntLoop + 1))];
    }
}

void gf_PsiOrbs_Spawn () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_difficultyVariables.lv_psiOrbSpawns == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TransportPrism", 0, gv_enemyPlayer, PointFromId(1804715968));
    }

}

void gf_Init_PartVariables () {
    // Automatic Variable Declarations
    int auto20863F3E_val;
    unitgroup auto20B2B9CC_g;
    int auto20B2B9CC_u;
    unit auto20B2B9CC_var;
    unitgroup autoE7C3D24E_g;
    int autoE7C3D24E_u;
    unit autoE7C3D24E_var;
    unitgroup auto9D6B3E64_g;
    int auto9D6B3E64_u;
    unit auto9D6B3E64_var;
    unitgroup auto0B0048B7_g;
    int auto0B0048B7_u;
    unit auto0B0048B7_var;
    unitgroup autoFAB5B66D_g;
    int autoFAB5B66D_u;
    unit autoFAB5B66D_var;
    unitgroup auto217E4CEB_g;
    int auto217E4CEB_u;
    unit auto217E4CEB_var;
    unitgroup auto0671AF80_g;
    int auto0671AF80_u;
    unit auto0671AF80_var;
    unitgroup autoAD83C02C_g;
    int autoAD83C02C_u;
    unit autoAD83C02C_var;
    unitgroup autoDAE4B42C_g;
    int autoDAE4B42C_u;
    unit autoDAE4B42C_var;
    unitgroup autoE4E2EA5B_g;
    int autoE4E2EA5B_u;
    unit autoE4E2EA5B_var;
    unitgroup auto59E05F0C_g;
    int auto59E05F0C_u;
    unit auto59E05F0C_var;
    unitgroup autoFA51E02E_g;
    int autoFA51E02E_u;
    unit autoFA51E02E_var;
    unitgroup auto708174A1_g;
    int auto708174A1_u;
    unit auto708174A1_var;
    playergroup auto12C74B86_g;
    int auto12C74B86_var;
    playergroup autoC4CD3F6B_g;
    int autoC4CD3F6B_var;

    // Implementation
    auto20863F3E_val = gv_partActive;
    if (auto20863F3E_val == 1) {
        gv_baseHive = UnitFromId(1645005027);
        gv_baseHiveStatus = 1;
        gv_enemy_ActivePart.lv_region = RegionFromId(3);
        gv_enemy_ActivePart.lv_base = RegionFromId(10);
        gv_enemy_ActivePart.lv_bounds = RegionFromId(2);
        gv_enemy_ActivePart.lv_attackPoint = PointFromId(1876197528);
        gv_enemy_ActivePart.lv_playerSpawnPoints[1] = PointFromId(1940962760);
        gv_enemy_ActivePart.lv_playerSpawnPoints[2] = PointFromId(1078311853);
        gv_enemy_ActivePart.lv_playerSpawnPoints[3] = PointFromId(564215223);
        gv_enemy_ActivePart.lv_playerSpawnPoints[4] = PointFromId(1760827904);
        gv_enemy_ActivePart.lv_playerSpawnPoints[5] = PointFromId(1948093798);
        gv_enemy_ActivePart.lv_playerSpawnPoints[6] = PointFromId(1754733255);
        gv_enemy_ActivePart.lv_objectiveCount = 3;
        GameSetLighting("Zerus", 0.0);
        auto20B2B9CC_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto20B2B9CC_u = UnitGroupCount(auto20B2B9CC_g, c_unitCountAll);
        for (;; auto20B2B9CC_u -= 1) {
            auto20B2B9CC_var = UnitGroupUnitFromEnd(auto20B2B9CC_g, auto20B2B9CC_u);
            if (auto20B2B9CC_var == null) { break; }
            if ((UnitHasBehavior2(auto20B2B9CC_var, "SpawnerJunker") == true)) {
                UnitGroupAdd(gv_partTerran.lv_junker_First_Spawner, auto20B2B9CC_var);
            }

        }
        autoE7C3D24E_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE7C3D24E_u = UnitGroupCount(autoE7C3D24E_g, c_unitCountAll);
        for (;; autoE7C3D24E_u -= 1) {
            autoE7C3D24E_var = UnitGroupUnitFromEnd(autoE7C3D24E_g, autoE7C3D24E_u);
            if (autoE7C3D24E_var == null) { break; }
            if ((UnitHasBehavior2(autoE7C3D24E_var, "SpawnerJunker") == true)) {
                UnitGroupAdd(gv_partTerran.lv_junker_Second_Spawner, autoE7C3D24E_var);
            }

        }
        auto9D6B3E64_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(13), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9D6B3E64_u = UnitGroupCount(auto9D6B3E64_g, c_unitCountAll);
        for (;; auto9D6B3E64_u -= 1) {
            auto9D6B3E64_var = UnitGroupUnitFromEnd(auto9D6B3E64_g, auto9D6B3E64_u);
            if (auto9D6B3E64_var == null) { break; }
            if ((UnitHasBehavior2(auto9D6B3E64_var, "SpawnerJunker") == true)) {
                UnitGroupAdd(gv_partTerran.lv_junker_Third_Spawner, auto9D6B3E64_var);
            }

        }
        auto0B0048B7_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(14), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0B0048B7_u = UnitGroupCount(auto0B0048B7_g, c_unitCountAll);
        for (;; auto0B0048B7_u -= 1) {
            auto0B0048B7_var = UnitGroupUnitFromEnd(auto0B0048B7_g, auto0B0048B7_u);
            if (auto0B0048B7_var == null) { break; }
            if ((UnitHasBehavior2(auto0B0048B7_var, "SpawnerBlackOps") == true)) {
                UnitGroupAdd(gv_partTerran.lv_blackOps_First_Spawner, auto0B0048B7_var);
            }

        }
        autoFAB5B66D_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(15), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFAB5B66D_u = UnitGroupCount(autoFAB5B66D_g, c_unitCountAll);
        for (;; autoFAB5B66D_u -= 1) {
            autoFAB5B66D_var = UnitGroupUnitFromEnd(autoFAB5B66D_g, autoFAB5B66D_u);
            if (autoFAB5B66D_var == null) { break; }
            if ((UnitHasBehavior2(autoFAB5B66D_var, "SpawnerBlackOps") == true)) {
                UnitGroupAdd(gv_partTerran.lv_blackOps_Second_Spawner, autoFAB5B66D_var);
            }

        }
        auto217E4CEB_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto217E4CEB_u = UnitGroupCount(auto217E4CEB_g, c_unitCountAll);
        for (;; auto217E4CEB_u -= 1) {
            auto217E4CEB_var = UnitGroupUnitFromEnd(auto217E4CEB_g, auto217E4CEB_u);
            if (auto217E4CEB_var == null) { break; }
            if ((UnitHasBehavior2(auto217E4CEB_var, "SpawnerBlackOps") == true)) {
                UnitGroupAdd(gv_partTerran.lv_blackOps_Third_Spawner, auto217E4CEB_var);
            }

        }
        auto0671AF80_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0671AF80_u = UnitGroupCount(auto0671AF80_g, c_unitCountAll);
        for (;; auto0671AF80_u -= 1) {
            auto0671AF80_var = UnitGroupUnitFromEnd(auto0671AF80_g, auto0671AF80_u);
            if (auto0671AF80_var == null) { break; }
            if (((UnitHasBehavior2(auto0671AF80_var, "SpawnerBlackOps") == true) || (UnitHasBehavior2(auto0671AF80_var, "SpawnerJunker") == true))) {
                UnitGroupAdd(gv_partTerran.lv_mix_First_Spawner, auto0671AF80_var);
            }

        }
        gf_Init_Observer();
    }
    else if (auto20863F3E_val == 2) {
        gv_enemy_ActivePart.lv_region = RegionFromId(1);
        gv_enemy_ActivePart.lv_base = RegionFromId(28);
        gv_enemy_ActivePart.lv_bounds = RegionFromId(4);
        gv_enemy_ActivePart.lv_attackPoint = PointFromId(1828975767);
        gv_enemy_ActivePart.lv_attackWaypoint = PointFromId(1021605072);
        gv_enemy_ActivePart.lv_attackWaypointRemoverRegion = RegionFromId(26);
        gv_enemy_ActivePart.lv_playerSpawnPoints[1] = PointFromId(599024954);
        gv_enemy_ActivePart.lv_playerSpawnPoints[2] = PointFromId(1560050002);
        gv_enemy_ActivePart.lv_playerSpawnPoints[3] = PointFromId(1124697850);
        gv_enemy_ActivePart.lv_playerSpawnPoints[4] = PointFromId(1360200057);
        gv_enemy_ActivePart.lv_playerSpawnPoints[5] = PointFromId(602860224);
        gv_enemy_ActivePart.lv_playerSpawnPoints[6] = PointFromId(1418387672);
        gv_enemy_ActivePart.lv_objectiveCount = 4;
        gv_enemy_ActivePart.lv_obejctiveDefeatedCount = 0;
        GameSetLighting("Part2", 0.0);
        gv_partProtoss.lv_pylonColossus = UnitFromId(2133672802);
        autoAD83C02C_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAD83C02C_u = UnitGroupCount(autoAD83C02C_g, c_unitCountAll);
        for (;; autoAD83C02C_u -= 1) {
            autoAD83C02C_var = UnitGroupUnitFromEnd(autoAD83C02C_g, autoAD83C02C_u);
            if (autoAD83C02C_var == null) { break; }
            if ((UnitHasBehavior2(autoAD83C02C_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_mech_First_Spawner, autoAD83C02C_var);
            }

        }
        autoDAE4B42C_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(23), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDAE4B42C_u = UnitGroupCount(autoDAE4B42C_g, c_unitCountAll);
        for (;; autoDAE4B42C_u -= 1) {
            autoDAE4B42C_var = UnitGroupUnitFromEnd(autoDAE4B42C_g, autoDAE4B42C_u);
            if (autoDAE4B42C_var == null) { break; }
            if ((UnitHasBehavior2(autoDAE4B42C_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_mech_Second_Spawner, autoDAE4B42C_var);
            }

        }
        autoE4E2EA5B_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(24), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE4E2EA5B_u = UnitGroupCount(autoE4E2EA5B_g, c_unitCountAll);
        for (;; autoE4E2EA5B_u -= 1) {
            autoE4E2EA5B_var = UnitGroupUnitFromEnd(autoE4E2EA5B_g, autoE4E2EA5B_u);
            if (autoE4E2EA5B_var == null) { break; }
            if ((UnitHasBehavior2(autoE4E2EA5B_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_psi_First_Spawner, autoE4E2EA5B_var);
            }

        }
        auto59E05F0C_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(25), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto59E05F0C_u = UnitGroupCount(auto59E05F0C_g, c_unitCountAll);
        for (;; auto59E05F0C_u -= 1) {
            auto59E05F0C_var = UnitGroupUnitFromEnd(auto59E05F0C_g, auto59E05F0C_u);
            if (auto59E05F0C_var == null) { break; }
            if ((UnitHasBehavior2(auto59E05F0C_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_psi_Second_Spawner, auto59E05F0C_var);
            }

        }
        autoFA51E02E_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(33), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFA51E02E_u = UnitGroupCount(autoFA51E02E_g, c_unitCountAll);
        for (;; autoFA51E02E_u -= 1) {
            autoFA51E02E_var = UnitGroupUnitFromEnd(autoFA51E02E_g, autoFA51E02E_u);
            if (autoFA51E02E_var == null) { break; }
            if ((UnitHasBehavior2(autoFA51E02E_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_psi_Third_Spawner, autoFA51E02E_var);
            }

        }
        auto708174A1_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(27), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto708174A1_u = UnitGroupCount(auto708174A1_g, c_unitCountAll);
        for (;; auto708174A1_u -= 1) {
            auto708174A1_var = UnitGroupUnitFromEnd(auto708174A1_g, auto708174A1_u);
            if (auto708174A1_var == null) { break; }
            if ((UnitHasBehavior2(auto708174A1_var, "EnemyPSpawner") == true)) {
                UnitGroupAdd(gv_partProtoss.lv_mix_First_Spawner, auto708174A1_var);
            }

        }
        auto12C74B86_g = PlayerGroupAll();
        auto12C74B86_var = -1;
        while (true) {
            auto12C74B86_var = PlayerGroupNextPlayer(auto12C74B86_g, auto12C74B86_var);
            if (auto12C74B86_var < 0) { break; }
            VisFillArea(auto12C74B86_var, RegionFromId(27), c_fillTypeFogged, false);
        }
    }
    else {
    }
    CameraSetBounds(gv_startingPlayerGroup, gv_enemy_ActivePart.lv_bounds, true);
    autoC4CD3F6B_g = gv_startingPlayerGroup;
    autoC4CD3F6B_var = -1;
    while (true) {
        autoC4CD3F6B_var = PlayerGroupNextPlayer(autoC4CD3F6B_g, autoC4CD3F6B_var);
        if (autoC4CD3F6B_var < 0) { break; }
        VisRevealerCreate(autoC4CD3F6B_var, gv_enemy_ActivePart.lv_base);
        gv_enemy_ActivePart.lv_baseRevealer[autoC4CD3F6B_var] = VisRevealerLastCreated();
        CameraPan(autoC4CD3F6B_var, UnitGetPosition(gv_baseHive), 0.0, -1, 10.0, false);
    }
}

void gf_FillBunkers () {
    // Automatic Variable Declarations
    unitgroup autoBFEBC216_g;
    int autoBFEBC216_u;
    unit autoBFEBC216_var;

    // Implementation
    autoBFEBC216_g = UnitGroup(null, gv_enemyPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFEBC216_u = UnitGroupCount(autoBFEBC216_g, c_unitCountAll);
    for (;; autoBFEBC216_u -= 1) {
        autoBFEBC216_var = UnitGroupUnitFromEnd(autoBFEBC216_g, autoBFEBC216_u);
        if (autoBFEBC216_var == null) { break; }
        if ((UnitGetType(autoBFEBC216_var) == "Bunker")) {
            UnitCargoCreate(autoBFEBC216_var, "Marine2", 4);
        }
        else {
            if ((UnitGetType(autoBFEBC216_var) == "Bunker2")) {
                UnitCargoCreate(autoBFEBC216_var, "Marine22", 4);
            }

        }
    }
}

int gf_Terran_GetEnemyType (string lp_unitType) {
    // Automatic Variable Declarations
    string autoD236D2B5_val;

    // Implementation
    autoD236D2B5_val = lp_unitType;
    if (autoD236D2B5_val == "OrbitalCommand") {
        return 1;
    }
    else if (autoD236D2B5_val == "OrbitalCommand2") {
        return 2;
    }
    else if (autoD236D2B5_val == "Cyclone2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Ghost2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Hellion2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Marauder2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Marine2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Reaper2") {
        return 1;
    }
    else if (autoD236D2B5_val == "SiegeTank2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Viking2") {
        return 1;
    }
    else if (autoD236D2B5_val == "WidowMine2") {
        return 1;
    }
    else if (autoD236D2B5_val == "Barracks") {
        return 1;
    }
    else if (autoD236D2B5_val == "EngineeringBay") {
        return 1;
    }
    else if (autoD236D2B5_val == "Factory") {
        return 1;
    }
    else if (autoD236D2B5_val == "FusionCore") {
        return 1;
    }
    else if (autoD236D2B5_val == "GhostAcademy") {
        return 1;
    }
    else if (autoD236D2B5_val == "Starport") {
        return 1;
    }
    else if (autoD236D2B5_val == "Armory") {
        return 1;
    }
    else if (autoD236D2B5_val == "HERCCompound") {
        return 1;
    }
    else if (autoD236D2B5_val == "Bunker") {
        return 1;
    }
    else if (autoD236D2B5_val == "AutoTurret") {
        return 1;
    }
    else if (autoD236D2B5_val == "Cyclone22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Ghost3") {
        return 2;
    }
    else if (autoD236D2B5_val == "Hellion22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Marauder22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Marine22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Reaper22") {
        return 2;
    }
    else if (autoD236D2B5_val == "SiegeTank22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Viking22") {
        return 2;
    }
    else if (autoD236D2B5_val == "WidowMine22") {
        return 2;
    }
    else if (autoD236D2B5_val == "Barracks2") {
        return 2;
    }
    else if (autoD236D2B5_val == "EngineeringBay2") {
        return 2;
    }
    else if (autoD236D2B5_val == "Factory2") {
        return 2;
    }
    else if (autoD236D2B5_val == "FusionCore2") {
        return 2;
    }
    else if (autoD236D2B5_val == "GhostAcademy2") {
        return 2;
    }
    else if (autoD236D2B5_val == "Starport2") {
        return 2;
    }
    else if (autoD236D2B5_val == "Armory2") {
        return 2;
    }
    else if (autoD236D2B5_val == "HERCCompound2") {
        return 2;
    }
    else if (autoD236D2B5_val == "Bunker2") {
        return 2;
    }
    else if (autoD236D2B5_val == "AutoTurret2") {
        return 2;
    }
    else {
        return 0;
    }
}

trigger auto_gf_Terran_SpawnerDied_Trigger = null;
unit auto_gf_Terran_SpawnerDied_lp_dyingBuilding;
unit auto_gf_Terran_SpawnerDied_lp_killingUnit;

void gf_Terran_SpawnerDied (unit lp_dyingBuilding, unit lp_killingUnit) {
    auto_gf_Terran_SpawnerDied_lp_dyingBuilding = lp_dyingBuilding;
    auto_gf_Terran_SpawnerDied_lp_killingUnit = lp_killingUnit;

    if (auto_gf_Terran_SpawnerDied_Trigger == null) {
        auto_gf_Terran_SpawnerDied_Trigger = TriggerCreate("auto_gf_Terran_SpawnerDied_TriggerFunc");
    }

    TriggerExecute(auto_gf_Terran_SpawnerDied_Trigger, false, false);
}

bool auto_gf_Terran_SpawnerDied_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dyingBuilding = auto_gf_Terran_SpawnerDied_lp_dyingBuilding;
    unit lp_killingUnit = auto_gf_Terran_SpawnerDied_lp_killingUnit;

    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup autoE334DD05_g;
    int autoE334DD05_var;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    if ((UnitHasBehavior2(lp_dyingBuilding, "SpawnerJunker") == true)) {
        gv_spawnAmount += CeilingI((2.5 * gv_difficultyVariables.lv_spawnMult));
        libNtve_gf_UnitCreateFacingPoint(CeilingI((2.5 * gv_difficultyVariables.lv_spawnMult)), "WidowMine2", 0, gv_enemyPlayer, UnitGetPosition(lp_dyingBuilding), UnitGetPosition(lp_killingUnit));
    }
    else {
        gv_spawnAmount += CeilingI((2.0 * gv_difficultyVariables.lv_spawnMult));
        libNtve_gf_UnitCreateFacingPoint(CeilingI((2.0 * gv_difficultyVariables.lv_spawnMult)), "WidowMine22", 0, gv_enemyPlayer, UnitGetPosition(lp_dyingBuilding), UnitGetPosition(lp_killingUnit));
    }
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_killingUnit), c_orderQueueReplace);
    TextTagCreate(TextWithColor(StringToText("+1"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(lp_dyingBuilding), 1.5, true, false, gv_playerGroup);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    if ((gv_partTerran.lv_junker_Second == false) && (libNtve_gf_UnitGroupIsDead(gv_partTerran.lv_junker_First_Spawner) == true)) {
        gf_Junker_Secend_Open();
    }

    if ((gv_partTerran.lv_junker_Third == false) && (libNtve_gf_UnitGroupIsDead(gv_partTerran.lv_junker_Second_Spawner) == true)) {
        gf_Junker_Third_Open();
    }

    if ((gv_partTerran.lv_blackOps_Second == false) && (libNtve_gf_UnitGroupIsDead(gv_partTerran.lv_blackOps_First_Spawner) == true)) {
        gf_BlackOps_Second_Open();
    }

    if ((gv_partTerran.lv_blackOps_Third == false) && (libNtve_gf_UnitGroupIsDead(gv_partTerran.lv_blackOps_Second_Spawner) == true)) {
        gf_BlackOps_Third_Open();
    }

    autoE334DD05_g = gv_playerGroup;
    autoE334DD05_var = -1;
    while (true) {
        autoE334DD05_var = PlayerGroupNextPlayer(autoE334DD05_g, autoE334DD05_var);
        if (autoE334DD05_var < 0) { break; }
        PlayerModifyPropertyInt(autoE334DD05_var, c_playerPropVespene, c_playerPropOperAdd, 1);
    }
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

void gf_Terran_PartTransition () {
    // Automatic Variable Declarations
    unitgroup autoFCFAC63C_g;
    int autoFCFAC63C_u;
    unit autoFCFAC63C_var;
    playergroup autoA2D4F189_g;
    int autoA2D4F189_var;
    unitgroup autoB895D1B1_g;
    int autoB895D1B1_u;
    unit autoB895D1B1_var;
    string autoD7A84AD9_val;
    unitgroup autoABD79CCF_g;
    int autoABD79CCF_u;
    unit autoABD79CCF_var;
    playergroup autoCEB672C9_g;
    int autoCEB672C9_var;
    unitgroup autoE9E89482_g;
    int autoE9E89482_u;
    unit autoE9E89482_var;
    unitgroup autoA01FD28C_g;
    int autoA01FD28C_u;
    unit autoA01FD28C_var;

    // Implementation
    autoFCFAC63C_g = UnitGroup(null, c_playerAny, gv_enemy_ActivePart.lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFCFAC63C_u = UnitGroupCount(autoFCFAC63C_g, c_unitCountAll);
    for (;; autoFCFAC63C_u -= 1) {
        autoFCFAC63C_var = UnitGroupUnitFromEnd(autoFCFAC63C_g, autoFCFAC63C_u);
        if (autoFCFAC63C_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoFCFAC63C_var, true);
        libNtve_gf_MakeUnitUncommandable(autoFCFAC63C_var, true);
        UnitIssueOrder(autoFCFAC63C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    autoA2D4F189_g = gv_playerGroup;
    autoA2D4F189_var = -1;
    while (true) {
        autoA2D4F189_var = PlayerGroupNextPlayer(autoA2D4F189_g, autoA2D4F189_var);
        if (autoA2D4F189_var < 0) { break; }
        autoB895D1B1_g = UnitGroup(null, autoA2D4F189_var, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoB895D1B1_u = UnitGroupCount(autoB895D1B1_g, c_unitCountAll);
        for (;; autoB895D1B1_u -= 1) {
            autoB895D1B1_var = UnitGroupUnitFromEnd(autoB895D1B1_g, autoB895D1B1_u);
            if (autoB895D1B1_var == null) { break; }
            autoD7A84AD9_val = UnitGetType(autoB895D1B1_var);
            if (autoD7A84AD9_val == "Bowler") {
                UnitBehaviorAddPlayer(autoB895D1B1_var, "TerranPartTransitionFly", UnitGetOwner(autoB895D1B1_var), 1);
            }
            else if (autoD7A84AD9_val == "LurkerBurrowed") {
            }
            else if (autoD7A84AD9_val == "BaseOverlord") {
                UnitBehaviorAddPlayer(autoB895D1B1_var, "TerranPartTransitionFly", UnitGetOwner(autoB895D1B1_var), 1);
            }
            else {
                UnitBehaviorAddPlayer(autoB895D1B1_var, "TerranPartTransitionBurrow", UnitGetOwner(autoB895D1B1_var), 1);
            }
        }
    }
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_baseHive) == true)) {
        UnitSetPosition(gv_baseHive, PointFromId(1983983055), false);
        gv_baseHiveStatus += 1;
        gf_HiveUpgrade();
        libNtve_gf_MakeUnitInvulnerable(gv_baseHive, false);
        libNtve_gf_MakeUnitUncommandable(gv_baseHive, false);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hive2", 0, gv_basePlayer, PointFromId(1983983055));
        gv_baseHive = UnitLastCreated();
        TriggerEnable(gt_HiveDies, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/PartTransition/NewHive"));
        autoABD79CCF_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(521895522), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoABD79CCF_u = UnitGroupCount(autoABD79CCF_g, c_unitCountAll);
        for (;; autoABD79CCF_u -= 1) {
            autoABD79CCF_var = UnitGroupUnitFromEnd(autoABD79CCF_g, autoABD79CCF_u);
            if (autoABD79CCF_var == null) { break; }
            if ((UnitGetType(autoABD79CCF_var) == "HeroDummyHiveDead")) {
                UnitRemove(autoABD79CCF_var);
            }

        }
    }
    gf_Init_PartVariables();
    gf_Init_Essences_LarvaSpawns_Protoss();
    gf_Objectives_Protoss();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/PartTransition/Upgrades"));
    gf_IncreaseUpgradeCount(10.0);
    autoCEB672C9_g = gv_playerGroup;
    autoCEB672C9_var = -1;
    while (true) {
        autoCEB672C9_var = PlayerGroupNextPlayer(autoCEB672C9_g, autoCEB672C9_var);
        if (autoCEB672C9_var < 0) { break; }
        gf_AddExp(gv_heroUnits[autoCEB672C9_var], gv_playerStats[autoCEB672C9_var].lv_startEXPp2);
        PlayerModifyPropertyFixed(autoCEB672C9_var, c_playerPropMinerals, c_playerPropOperAdd, gv_playerStats[autoCEB672C9_var].lv_startBiomassP2);
        autoE9E89482_g = UnitGroup(null, autoCEB672C9_var, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoE9E89482_u = UnitGroupCount(autoE9E89482_g, c_unitCountAll);
        for (;; autoE9E89482_u -= 1) {
            autoE9E89482_var = UnitGroupUnitFromEnd(autoE9E89482_g, autoE9E89482_u);
            if (autoE9E89482_var == null) { break; }
            UnitSetPosition(autoE9E89482_var, gv_enemy_ActivePart.lv_playerSpawnPoints[autoCEB672C9_var], false);
            libNtve_gf_MakeUnitInvulnerable(autoE9E89482_var, false);
            libNtve_gf_MakeUnitUncommandable(autoE9E89482_var, false);
        }
    }
    autoA01FD28C_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA01FD28C_u = UnitGroupCount(autoA01FD28C_g, c_unitCountAll);
    for (;; autoA01FD28C_u -= 1) {
        autoA01FD28C_var = UnitGroupUnitFromEnd(autoA01FD28C_g, autoA01FD28C_u);
        if (autoA01FD28C_var == null) { break; }
        UnitRemove(autoA01FD28C_var);
    }
    gv_spawnAmount = 0;
    TriggerEnable(gt_Terran_Spawns, false);
    TriggerEnable(gt_Terran_KillTriggerBase, false);
    TriggerEnable(gt_Protoss_Spawns, true);
    TriggerEnable(gt_Protoss_KillTriggerBase, true);
    TriggerEnable(gt_PartProtoss_BossSpawner_Madness, true);
    TriggerEnable(gt_PartProtoss_BossSpawner_TagTeam, true);
    TriggerEnable(gt_PartProtoss_BossSpawner_Atlantis, true);
    TriggerEnable(gt_Mech_Second_ObeliskKill, true);
    TriggerEnable(gt_Psi_Second_ObeliskKill, true);
    TriggerEnable(gt_Psi_Third_ObeliskKill, true);
}

void gf_Init_Observer () {
    // Variable Declarations
    int lv_tmpInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (true) {
    }

    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(1162988358);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(535760881);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(1612547492);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(58530727);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(2115821999);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(823127719);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(698205601);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(313304928);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(985254680);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(659391474);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_waypoints[lv_tmpInt] = PointFromId(113148492);
    lv_tmpInt += 1;
    gv_partTerran.lv_observer.lv_currentWaypoint = RandomInt(0, (gv_observer_AmountWaypoints - 1));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ObserverStandard", 0, gv_collectiblePlayerEnemyNeutral, gv_partTerran.lv_observer.lv_waypoints[gv_partTerran.lv_observer.lv_currentWaypoint]);
    gv_partTerran.lv_observer.lv_unit = UnitLastCreated();
    TriggerExecute(gt_Observer_Stationary, false, false);
}

trigger auto_gf_ObserverHintHandler_Trigger = null;

void gf_ObserverHintHandler () {
    if (auto_gf_ObserverHintHandler_Trigger == null) {
        auto_gf_ObserverHintHandler_Trigger = TriggerCreate("auto_gf_ObserverHintHandler_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObserverHintHandler_Trigger, false, false);
}

bool auto_gf_ObserverHintHandler_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_observerlocation;
    point lv_pickedcenter;
    int lv_radius;
    unit lv_hintunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(120.0, c_timeGame);
    if ((gv_partTerran.lv_observer.lv_alive == true)) {
        lv_radius = 47;
        lv_observerlocation = UnitGetPosition(gv_partTerran.lv_observer.lv_unit);
        lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
        while ((RegionContainsPoint(gv_enemy_ActivePart.lv_bounds, lv_pickedcenter) == false)) {
            lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ObserverMinimapHint", c_unitCreateIgnorePlacement, gv_collectiblePlayerEnemyNeutral, lv_pickedcenter);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Observer/Hint"));
        lv_hintunit = UnitLastCreated();
        gf_ObserverHintShow(lv_hintunit, 1);
        Wait(60.0, c_timeGame);
        if ((gv_partTerran.lv_observer.lv_alive == true)) {
            lv_radius = 37;
            lv_observerlocation = UnitGetPosition(gv_partTerran.lv_observer.lv_unit);
            lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
            while ((RegionContainsPoint(gv_enemy_ActivePart.lv_bounds, lv_pickedcenter) == false)) {
                lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
            }
            UnitSetPosition(lv_hintunit, lv_pickedcenter, false);
            gf_ObserverHintShow(lv_hintunit, 2);
            Wait(60.0, c_timeGame);
            if ((gv_partTerran.lv_observer.lv_alive == true)) {
                lv_radius = 27;
                lv_observerlocation = UnitGetPosition(gv_partTerran.lv_observer.lv_unit);
                lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                while ((RegionContainsPoint(gv_enemy_ActivePart.lv_bounds, lv_pickedcenter) == false)) {
                    lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                }
                UnitSetPosition(lv_hintunit, lv_pickedcenter, false);
                gf_ObserverHintShow(lv_hintunit, 3);
                Wait(60.0, c_timeGame);
                if ((gv_partTerran.lv_observer.lv_alive == true)) {
                    lv_radius = 17;
                    lv_observerlocation = UnitGetPosition(gv_partTerran.lv_observer.lv_unit);
                    lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                    while ((RegionContainsPoint(gv_enemy_ActivePart.lv_bounds, lv_pickedcenter) == false)) {
                        lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                    }
                    UnitSetPosition(lv_hintunit, lv_pickedcenter, false);
                    gf_ObserverHintShow(lv_hintunit, 4);
                    Wait(60.0, c_timeGame);
                    lv_radius = 10;
                    while ((gv_partTerran.lv_observer.lv_alive == true)) {
                        lv_observerlocation = UnitGetPosition(gv_partTerran.lv_observer.lv_unit);
                        lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                        while ((RegionContainsPoint(gv_enemy_ActivePart.lv_bounds, lv_pickedcenter) == false)) {
                            lv_pickedcenter = RegionRandomPoint(RegionCircle(lv_observerlocation, lv_radius));
                        }
                        lv_hintunit = UnitLastCreated();
                        UnitSetPosition(lv_hintunit, lv_pickedcenter, false);
                        gf_ObserverHintShow(lv_hintunit, 5);
                        Wait(60.0, c_timeGame);
                    }
                }

            }

        }

        UnitKill(lv_hintunit);
    }

    return true;
}

trigger auto_gf_ObserverHintShow_Trigger = null;
unit auto_gf_ObserverHintShow_lp_hintunit;
int auto_gf_ObserverHintShow_lp_hint;

void gf_ObserverHintShow (unit lp_hintunit, int lp_hint) {
    auto_gf_ObserverHintShow_lp_hintunit = lp_hintunit;
    auto_gf_ObserverHintShow_lp_hint = lp_hint;

    if (auto_gf_ObserverHintShow_Trigger == null) {
        auto_gf_ObserverHintShow_Trigger = TriggerCreate("auto_gf_ObserverHintShow_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObserverHintShow_Trigger, false, false);
}

bool auto_gf_ObserverHintShow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hintunit = auto_gf_ObserverHintShow_lp_hintunit;
    int lp_hint = auto_gf_ObserverHintShow_lp_hint;

    // Automatic Variable Declarations
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_hintunit), libNtve_gf_Signal(("Hint" + IntToString(lp_hint))));
    Wait(7.5, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lp_hintunit), libNtve_gf_Signal("Clear"));
    return true;
}

string gf_Terran_SpawnsList_UnitType (string lp_spawner) {
    // Automatic Variable Declarations
    string auto1398122F_val;

    // Implementation
    auto1398122F_val = lp_spawner;
    if (auto1398122F_val == "Barracks") {
        return "Marine2";
    }
    else if (auto1398122F_val == "EngineeringBay") {
        return "Marauder2";
    }
    else if (auto1398122F_val == "GhostAcademy") {
        return "Ghost2";
    }
    else if (auto1398122F_val == "HERCCompound") {
        return "Reaper2";
    }
    else if (auto1398122F_val == "Factory") {
        return "Hellion2";
    }
    else if (auto1398122F_val == "FusionCore") {
        return "Cyclone2";
    }
    else if (auto1398122F_val == "Starport") {
        return "Viking2";
    }
    else if (auto1398122F_val == "Armory") {
        return "SiegeTank2";
    }
    else if (auto1398122F_val == "Barracks2") {
        return "Marine22";
    }
    else if (auto1398122F_val == "EngineeringBay2") {
        return "Marauder22";
    }
    else if (auto1398122F_val == "GhostAcademy2") {
        return "Ghost3";
    }
    else if (auto1398122F_val == "HERCCompound2") {
        return "Reaper22";
    }
    else if (auto1398122F_val == "Factory2") {
        return "Hellion22";
    }
    else if (auto1398122F_val == "FusionCore2") {
        return "Cyclone22";
    }
    else if (auto1398122F_val == "Starport2") {
        return "Viking22";
    }
    else if (auto1398122F_val == "Armory2") {
        return "SiegeTank22";
    }
    else {
        return "";
    }
}

fixed gf_Terran_SpawnsList_Amount (string lp_spawner) {
    // Automatic Variable Declarations
    string auto9CEF766D_val;

    // Implementation
    auto9CEF766D_val = lp_spawner;
    if (auto9CEF766D_val == "Barracks") {
        return 5.0;
    }
    else if (auto9CEF766D_val == "EngineeringBay") {
        return 2;
    }
    else if (auto9CEF766D_val == "GhostAcademy") {
        return 1;
    }
    else if (auto9CEF766D_val == "HERCCompound") {
        return 2;
    }
    else if (auto9CEF766D_val == "Factory") {
        return 3;
    }
    else if (auto9CEF766D_val == "FusionCore") {
        return 1.25;
    }
    else if (auto9CEF766D_val == "Starport") {
        return 2;
    }
    else if (auto9CEF766D_val == "Armory") {
        return 2;
    }
    else if (auto9CEF766D_val == "Barracks2") {
        return 4.0;
    }
    else if (auto9CEF766D_val == "EngineeringBay2") {
        return 1.75;
    }
    else if (auto9CEF766D_val == "GhostAcademy2") {
        return 1.3;
    }
    else if (auto9CEF766D_val == "HERCCompound2") {
        return 1.5;
    }
    else if (auto9CEF766D_val == "Factory2") {
        return 2.25;
    }
    else if (auto9CEF766D_val == "FusionCore2") {
        return 1.0;
    }
    else if (auto9CEF766D_val == "Starport2") {
        return 1.5;
    }
    else if (auto9CEF766D_val == "Armory2") {
        return 2.0;
    }
    else {
        return 1;
    }
}

void gf_Junker_Secend_Open () {
    // Automatic Variable Declarations
    unitgroup auto269AD43B_g;
    int auto269AD43B_u;
    unit auto269AD43B_var;

    // Implementation
    TriggerEnable(gt_Junker_Second_DepotKill, false);
    gv_partTerran.lv_junker_Second = true;
    gv_partTerran.lv_junker_Biomass_Mult *= 1.15;
    gv_partTerran.lv_junker_Exp_Mult *= 1.15;
    gf_Junker_Upgrade_Armor(1.1);
    gf_Junker_Upgrade_Life(1.1);
    gf_Junker_Upgrade_Dmg(1.1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Junker"));
    auto269AD43B_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto269AD43B_u = UnitGroupCount(auto269AD43B_g, c_unitCountAll);
    for (;; auto269AD43B_u -= 1) {
        auto269AD43B_var = UnitGroupUnitFromEnd(auto269AD43B_g, auto269AD43B_u);
        if (auto269AD43B_var == null) { break; }
        if ((UnitGetType(auto269AD43B_var) == "SupplyDepot2")) {
            UnitIssueOrder(auto269AD43B_var, Order(AbilityCommand("SupplyDepotLower2", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(2.0);
}

void gf_Junker_Third_Open () {
    // Automatic Variable Declarations
    unitgroup autoEB494FDF_g;
    int autoEB494FDF_u;
    unit autoEB494FDF_var;

    // Implementation
    TriggerEnable(gt_Junker_Third_DepotKill, false);
    gv_partTerran.lv_junker_Third = true;
    gv_partTerran.lv_junker_Biomass_Mult *= 1.15;
    gv_partTerran.lv_junker_Exp_Mult *= 1.15;
    gf_Junker_Upgrade_Armor(1.1);
    gf_Junker_Upgrade_Life(1.1);
    gf_Junker_Upgrade_Dmg(1.1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Junker"));
    autoEB494FDF_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB494FDF_u = UnitGroupCount(autoEB494FDF_g, c_unitCountAll);
    for (;; autoEB494FDF_u -= 1) {
        autoEB494FDF_var = UnitGroupUnitFromEnd(autoEB494FDF_g, autoEB494FDF_u);
        if (autoEB494FDF_var == null) { break; }
        if ((UnitGetType(autoEB494FDF_var) == "SupplyDepot2")) {
            UnitIssueOrder(autoEB494FDF_var, Order(AbilityCommand("SupplyDepotLower2", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(3.0);
}

void gf_BlackOps_Second_Open () {
    // Automatic Variable Declarations
    unitgroup auto71DF367A_g;
    int auto71DF367A_u;
    unit auto71DF367A_var;

    // Implementation
    TriggerEnable(gt_BlackOps_Second_DepotKill, false);
    gv_partTerran.lv_blackOps_Second = true;
    gv_partTerran.lv_blackOps_Biomass_Mult *= 1.15;
    gv_partTerran.lv_blackOps_Exp_Mult *= 1.15;
    gf_BlackOps_Upgrade_Armor(1.1);
    gf_BlackOps_Upgrade_Dmg(1.1);
    gf_BlackOps_Upgrade_Life(1.1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/BlackOps"));
    auto71DF367A_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71DF367A_u = UnitGroupCount(auto71DF367A_g, c_unitCountAll);
    for (;; auto71DF367A_u -= 1) {
        auto71DF367A_var = UnitGroupUnitFromEnd(auto71DF367A_g, auto71DF367A_u);
        if (auto71DF367A_var == null) { break; }
        if ((UnitGetType(auto71DF367A_var) == "SupplyDepot22")) {
            UnitIssueOrder(auto71DF367A_var, Order(AbilityCommand("SupplyDepotLower22", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(2.0);
}

void gf_BlackOps_Third_Open () {
    // Automatic Variable Declarations
    unitgroup autoFFAE7F40_g;
    int autoFFAE7F40_u;
    unit autoFFAE7F40_var;

    // Implementation
    TriggerEnable(gt_BlackOps_Third_DepotKill, false);
    gv_partTerran.lv_blackOps_Third = true;
    gv_partTerran.lv_blackOps_Biomass_Mult *= 1.15;
    gv_partTerran.lv_blackOps_Exp_Mult *= 1.15;
    gf_BlackOps_Upgrade_Armor(1.1);
    gf_BlackOps_Upgrade_Dmg(1.1);
    gf_BlackOps_Upgrade_Life(1.1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/BlackOps"));
    autoFFAE7F40_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFFAE7F40_u = UnitGroupCount(autoFFAE7F40_g, c_unitCountAll);
    for (;; autoFFAE7F40_u -= 1) {
        autoFFAE7F40_var = UnitGroupUnitFromEnd(autoFFAE7F40_g, autoFFAE7F40_u);
        if (autoFFAE7F40_var == null) { break; }
        if ((UnitGetType(autoFFAE7F40_var) == "SupplyDepot22")) {
            UnitIssueOrder(autoFFAE7F40_var, Order(AbilityCommand("SupplyDepotLower22", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(3.0);
}

void gf_Junker_Upgrade_Life (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
}

void gf_Junker_Upgrade_Armor (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
}

void gf_Junker_Upgrade_Dmg (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogEffect, "CycloneWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "GhostWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "HellionWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "CrucioShockCannonBlast2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "MarauderWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "MarineWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "ReaperWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "TankWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "VikingWeaponDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "WidowMineSuicideDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "AutoTurret", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogWeapon, "CycloneWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "GhostWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "HellionWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "MarauderWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "MarineWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "ReaperWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "CrucioShockCannon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "TankWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "VikingWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "WidowMineWeapon", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "AutoTurret", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
}

void gf_BlackOps_Upgrade_Life (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost3", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost3", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport2", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport2", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered22", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered22", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
}

void gf_BlackOps_Upgrade_Armor (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Cyclone22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost3", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Ghost3", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Hellion22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marauder22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Marine22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Reaper22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTank22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Viking22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "WidowMine22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SiegeTankSieged22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Armory2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "AutoTurret2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Barracks2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Bunker2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "EngineeringBay2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Factory2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "FusionCore2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "GhostAcademy2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "OrbitalCommand2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "HERCCompound2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport2", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "Starport2", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepot22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered22", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "SupplyDepotLowered22", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
}

void gf_BlackOps_Upgrade_Dmg (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogEffect, "CycloneWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "GhostWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "HellionWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "CrucioShockCannonBlast22", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "MarauderWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "MarineWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "ReaperWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "TankWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "VikingWeaponDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "WidowMineSuicideDmg2", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "AutoTurretDmg", "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogWeapon, "CycloneWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "GhostWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "HellionWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "MarauderWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "MarineWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "ReaperWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "CrucioShockCannon22", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "TankWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "VikingWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "WidowMineWeapon2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "AutoTurret2", "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
}

int gf_Protoss_GetEnemyType (string lp_unitType) {
    // Automatic Variable Declarations
    string autoE4806272_val;

    // Implementation
    autoE4806272_val = lp_unitType;
    if (autoE4806272_val == "VoidMine") {
        return 3;
    }
    else if (autoE4806272_val == "ObeliskStandard") {
        return 3;
    }
    else if (autoE4806272_val == "ObeliskStandardOpen") {
        return 3;
    }
    else if (autoE4806272_val == "MonolithAncient") {
        return 1;
    }
    else if (autoE4806272_val == "MonolithNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "MonolithStandard") {
        return 1;
    }
    else if (autoE4806272_val == "PhotonCannonAncient") {
        return 1;
    }
    else if (autoE4806272_val == "PhotonCannonPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "PhotonCannonStandard") {
        return 2;
    }
    else if (autoE4806272_val == "PhotonCannonTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "PylonAncient") {
        return 1;
    }
    else if (autoE4806272_val == "PylonJudicator") {
        return 2;
    }
    else if (autoE4806272_val == "PylonNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "PylonPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "PylonStandard") {
        return 1;
    }
    else if (autoE4806272_val == "PylonTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "VoidContainmentAncient") {
        return 1;
    }
    else if (autoE4806272_val == "VoidContainmentNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "VoidContainmentStandard") {
        return 1;
    }
    else if (autoE4806272_val == "VoidContainmentTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "DisruptorAncient") {
        return 1;
    }
    else if (autoE4806272_val == "DisruptorStandard") {
        return 1;
    }
    else if (autoE4806272_val == "DarkTemplarAncient") {
        return 2;
    }
    else if (autoE4806272_val == "DarkTemplarTaldarim2") {
        return 2;
    }
    else if (autoE4806272_val == "SentryPurifier2") {
        return 1;
    }
    else if (autoE4806272_val == "SentryNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "AdeptAncient") {
        return 2;
    }
    else if (autoE4806272_val == "AdeptTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "AdeptShadow") {
        return 1;
    }
    else if (autoE4806272_val == "DragoonPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "DragoonStandard") {
        return 1;
    }
    else if (autoE4806272_val == "ZealotAncient") {
        return 2;
    }
    else if (autoE4806272_val == "ZealotNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "ZealotPurifier2") {
        return 1;
    }
    else if (autoE4806272_val == "ZealotStandard") {
        return 2;
    }
    else if (autoE4806272_val == "ZealotTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "ColossusAncient") {
        return 1;
    }
    else if (autoE4806272_val == "ColossusPurifier2") {
        return 1;
    }
    else if (autoE4806272_val == "ColossusTaldarim2") {
        return 2;
    }
    else if (autoE4806272_val == "ImmortalAncient") {
        return 1;
    }
    else if (autoE4806272_val == "ImmortalPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "ArchonPurifier") {
        return 2;
    }
    else if (autoE4806272_val == "ArchonAncient") {
        return 2;
    }
    else if (autoE4806272_val == "StalkerPurifier2") {
        return 1;
    }
    else if (autoE4806272_val == "StalkerTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "CyberneticsCoreAncient") {
        return 1;
    }
    else if (autoE4806272_val == "CyberneticsCoreStandard") {
        return 1;
    }
    else if (autoE4806272_val == "DarkShrineAncient") {
        return 2;
    }
    else if (autoE4806272_val == "DarkShrineTaldarim") {
        return 1;
    }
    else if (autoE4806272_val == "ForgePurifier") {
        return 2;
    }
    else if (autoE4806272_val == "ForgeTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "GatewayAncient") {
        return 2;
    }
    else if (autoE4806272_val == "GatewayPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "GatewayStandard") {
        return 1;
    }
    else if (autoE4806272_val == "GatewayTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "NexusAncient") {
        return 1;
    }
    else if (autoE4806272_val == "NexusNerazim") {
        return 2;
    }
    else if (autoE4806272_val == "NexusPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "NexusStandard") {
        return 2;
    }
    else if (autoE4806272_val == "NexusTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "RoboticsBayAncient") {
        return 1;
    }
    else if (autoE4806272_val == "RoboticsBayPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "RoboticsBayTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "RoboticsFacilityAncient") {
        return 1;
    }
    else if (autoE4806272_val == "RoboticsFacilityPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "TemplarArchiveStandard") {
        return 2;
    }
    else if (autoE4806272_val == "TemplarArchiveTaldarim") {
        return 2;
    }
    else if (autoE4806272_val == "TwilightCouncilPurifier") {
        return 1;
    }
    else if (autoE4806272_val == "TwilightCouncilTaldarim") {
        return 2;
    }
    else {
        return 0;
    }
}

trigger auto_gf_Protoss_SpawnerDied_Trigger = null;
unit auto_gf_Protoss_SpawnerDied_lp_dyingBuilding;
unit auto_gf_Protoss_SpawnerDied_lp_killingUnit;

void gf_Protoss_SpawnerDied (unit lp_dyingBuilding, unit lp_killingUnit) {
    auto_gf_Protoss_SpawnerDied_lp_dyingBuilding = lp_dyingBuilding;
    auto_gf_Protoss_SpawnerDied_lp_killingUnit = lp_killingUnit;

    if (auto_gf_Protoss_SpawnerDied_Trigger == null) {
        auto_gf_Protoss_SpawnerDied_Trigger = TriggerCreate("auto_gf_Protoss_SpawnerDied_TriggerFunc");
    }

    TriggerExecute(auto_gf_Protoss_SpawnerDied_Trigger, false, false);
}

bool auto_gf_Protoss_SpawnerDied_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dyingBuilding = auto_gf_Protoss_SpawnerDied_lp_dyingBuilding;
    unit lp_killingUnit = auto_gf_Protoss_SpawnerDied_lp_killingUnit;

    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup auto12CD1607_g;
    int auto12CD1607_var;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    gv_spawnAmount += CeilingI((2.0 * gv_difficultyVariables.lv_spawnMult));
    libNtve_gf_UnitCreateFacingPoint(CeilingI((2.0 * gv_difficultyVariables.lv_spawnMult)), "VoidMine", 0, gv_enemyPlayer, UnitGetPosition(lp_dyingBuilding), UnitGetPosition(lp_killingUnit));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_killingUnit), c_orderQueueReplace);
    TextTagCreate(TextWithColor(StringToText("+1"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(lp_dyingBuilding), 1.5, true, false, gv_playerGroup);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    if ((gv_partProtoss.lv_mech_Second == false) && (libNtve_gf_UnitGroupIsDead(gv_partProtoss.lv_mech_First_Spawner) == true)) {
        gf_Mech_Secend_Open();
    }

    if ((gv_partProtoss.lv_psi_Second == false) && (libNtve_gf_UnitGroupIsDead(gv_partProtoss.lv_psi_First_Spawner) == true)) {
        gf_Psi_Second_Open();
    }

    if ((gv_partProtoss.lv_psi_Third == false) && (libNtve_gf_UnitGroupIsDead(gv_partProtoss.lv_psi_Second_Spawner) == true)) {
        gf_Psi_Third_Open();
    }

    auto12CD1607_g = gv_playerGroup;
    auto12CD1607_var = -1;
    while (true) {
        auto12CD1607_var = PlayerGroupNextPlayer(auto12CD1607_g, auto12CD1607_var);
        if (auto12CD1607_var < 0) { break; }
        PlayerModifyPropertyInt(auto12CD1607_var, c_playerPropVespene, c_playerPropOperAdd, 1);
    }
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

string gf_Protoss_SpawnsList_UnitType (string lp_spawner) {
    // Automatic Variable Declarations
    string auto4BF6394A_val;

    // Implementation
    auto4BF6394A_val = lp_spawner;
    if (auto4BF6394A_val == "CyberneticsCoreAncient") {
        return "DisruptorAncient";
    }
    else if (auto4BF6394A_val == "CyberneticsCoreStandard") {
        return "DisruptorStandard";
    }
    else if (auto4BF6394A_val == "DarkShrineAncient") {
        return "DarkTemplarAncient";
    }
    else if (auto4BF6394A_val == "DarkShrineTaldarim") {
        return "DarkTemplarTaldarim2";
    }
    else if (auto4BF6394A_val == "ForgePurifier") {
        return "SentryPurifier2";
    }
    else if (auto4BF6394A_val == "ForgeTaldarim") {
        return "SentryNerazim";
    }
    else if (auto4BF6394A_val == "GatewayAncient") {
        return "AdeptAncient";
    }
    else if (auto4BF6394A_val == "GatewayPurifier") {
        return "DragoonPurifier";
    }
    else if (auto4BF6394A_val == "GatewayStandard") {
        return "DragoonStandard";
    }
    else if (auto4BF6394A_val == "GatewayTaldarim") {
        return "AdeptTaldarim";
    }
    else if (auto4BF6394A_val == "NexusAncient") {
        return "ZealotAncient";
    }
    else if (auto4BF6394A_val == "NexusNerazim") {
        return "ZealotNerazim";
    }
    else if (auto4BF6394A_val == "NexusPurifier") {
        return "ZealotPurifier2";
    }
    else if (auto4BF6394A_val == "NexusStandard") {
        return "ZealotStandard";
    }
    else if (auto4BF6394A_val == "NexusTaldarim") {
        return "ZealotTaldarim";
    }
    else if (auto4BF6394A_val == "RoboticsBayAncient") {
        return "ColossusAncient";
    }
    else if (auto4BF6394A_val == "RoboticsBayPurifier") {
        return "ColossusPurifier2";
    }
    else if (auto4BF6394A_val == "RoboticsBayTaldarim") {
        return "ColossusTaldarim2";
    }
    else if (auto4BF6394A_val == "RoboticsFacilityAncient") {
        return "ImmortalAncient";
    }
    else if (auto4BF6394A_val == "RoboticsFacilityPurifier") {
        return "ImmortalPurifier";
    }
    else if (auto4BF6394A_val == "TemplarArchiveStandard") {
        return "ArchonPurifier";
    }
    else if (auto4BF6394A_val == "TemplarArchiveAncient") {
        return "ArchonAncient";
    }
    else if (auto4BF6394A_val == "TwilightCouncilPurifier") {
        return "StalkerPurifier2";
    }
    else if (auto4BF6394A_val == "TwilightCouncilTaldarim") {
        return "StalkerTaldarim";
    }
    else {
        return "";
    }
}

fixed gf_Protoss_SpawnsList_Amount (string lp_spawner) {
    // Automatic Variable Declarations
    string autoFEB19DC9_val;

    // Implementation
    autoFEB19DC9_val = lp_spawner;
    if (autoFEB19DC9_val == "DisruptorAncient") {
        return 0.8;
    }
    else if (autoFEB19DC9_val == "DisruptorStandard") {
        return 0.8;
    }
    else if (autoFEB19DC9_val == "DarkTemplarAncient") {
        return 0.9;
    }
    else if (autoFEB19DC9_val == "DarkTemplarTaldarim2") {
        return 0.9;
    }
    else if (autoFEB19DC9_val == "SentryPurifier2") {
        return 0.6;
    }
    else if (autoFEB19DC9_val == "SentryNerazim") {
        return 0.6;
    }
    else if (autoFEB19DC9_val == "AdeptAncient") {
        return 2.0;
    }
    else if (autoFEB19DC9_val == "AdeptTaldarim") {
        return 2.0;
    }
    else if (autoFEB19DC9_val == "DragoonPurifier") {
        return 1.5;
    }
    else if (autoFEB19DC9_val == "DragoonStandard") {
        return 1.5;
    }
    else if (autoFEB19DC9_val == "ZealotAncient") {
        return 2.5;
    }
    else if (autoFEB19DC9_val == "ZealotNerazim") {
        return 2.5;
    }
    else if (autoFEB19DC9_val == "ZealotPurifier2") {
        return 2.5;
    }
    else if (autoFEB19DC9_val == "ZealotStandard") {
        return 2.5;
    }
    else if (autoFEB19DC9_val == "ZealotTaldarim") {
        return 2.5;
    }
    else if (autoFEB19DC9_val == "ColossusAncient") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "ColossusPurifier2") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "ColossusTaldarim2") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "ImmortalAncient") {
        return 1.5;
    }
    else if (autoFEB19DC9_val == "ImmortalPurifier") {
        return 1.5;
    }
    else if (autoFEB19DC9_val == "ArchonPurifier") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "ArchonAncient") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "StalkerPurifier2") {
        return 1.0;
    }
    else if (autoFEB19DC9_val == "StalkerTaldarim") {
        return 1.0;
    }
    else {
        return 0.0;
    }
}

void gf_Mech_Secend_Open () {
    // Automatic Variable Declarations
    unitgroup autoE423475B_g;
    int autoE423475B_u;
    unit autoE423475B_var;

    // Implementation
    TriggerEnable(gt_Mech_Second_ObeliskKill, false);
    gv_partProtoss.lv_mech_Second = true;
    gv_partProtoss.lv_mech_Biomass_Mult *= 1.225;
    gv_partProtoss.lv_mech_Exp_Mult *= 1.225;
    gf_Mech_Upgrade_LifeShieldArmor(1.075);
    gf_Mech_Upgrade_Dmg(1.075);
    gf_UpgradeVoidMine(1.025);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Mech"));
    autoE423475B_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE423475B_u = UnitGroupCount(autoE423475B_g, c_unitCountAll);
    for (;; autoE423475B_u -= 1) {
        autoE423475B_var = UnitGroupUnitFromEnd(autoE423475B_g, autoE423475B_u);
        if (autoE423475B_var == null) { break; }
        if ((UnitGetType(autoE423475B_var) == "ObeliskStandard")) {
            UnitIssueOrder(autoE423475B_var, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(2.0);
}

void gf_Psi_Second_Open () {
    // Automatic Variable Declarations
    unitgroup auto5D99EC2A_g;
    int auto5D99EC2A_u;
    unit auto5D99EC2A_var;

    // Implementation
    TriggerEnable(gt_Psi_Second_ObeliskKill, false);
    gv_partProtoss.lv_psi_Second = true;
    gv_partProtoss.lv_psi_Biomass_Mult *= 1.15;
    gv_partProtoss.lv_psi_Exp_Mult *= 1.15;
    gf_Psi_Upgrade_Dmg(1.05);
    gf_Psi_Upgrade_LifeShieldArmor(1.05);
    gf_UpgradeVoidMine(1.025);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Psi"));
    auto5D99EC2A_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D99EC2A_u = UnitGroupCount(auto5D99EC2A_g, c_unitCountAll);
    for (;; auto5D99EC2A_u -= 1) {
        auto5D99EC2A_var = UnitGroupUnitFromEnd(auto5D99EC2A_g, auto5D99EC2A_u);
        if (auto5D99EC2A_var == null) { break; }
        if ((UnitGetType(auto5D99EC2A_var) == "ObeliskStandard")) {
            UnitIssueOrder(auto5D99EC2A_var, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(2.0);
}

void gf_Psi_Third_Open () {
    // Automatic Variable Declarations
    unitgroup auto49E22667_g;
    int auto49E22667_u;
    unit auto49E22667_var;

    // Implementation
    TriggerEnable(gt_Psi_Third_ObeliskKill, false);
    gv_partProtoss.lv_psi_Third = true;
    gv_partProtoss.lv_psi_Biomass_Mult *= 1.15;
    gv_partProtoss.lv_psi_Exp_Mult *= 1.15;
    gf_Psi_Upgrade_Dmg(1.05);
    gf_Psi_Upgrade_LifeShieldArmor(1.05);
    gf_UpgradeVoidMine(1.025);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Psi"));
    auto49E22667_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto49E22667_u = UnitGroupCount(auto49E22667_g, c_unitCountAll);
    for (;; auto49E22667_u -= 1) {
        auto49E22667_var = UnitGroupUnitFromEnd(auto49E22667_g, auto49E22667_u);
        if (auto49E22667_var == null) { break; }
        if ((UnitGetType(auto49E22667_var) == "ObeliskStandard")) {
            UnitIssueOrder(auto49E22667_var, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        }

    }
    gf_IncreaseUpgradeCount(2.0);
}

void gf_Mix_First_Opener_Check () {
    // Automatic Variable Declarations
    // Implementation
    gv_partProtoss.lv_mix_First_OpenerCount += 1;
    if ((gv_partProtoss.lv_mix_First_OpenerCount == 3)) {
        gf_Mix_First_Open();
        gf_PsiOrbs_Spawn();
    }

}

void gf_Mix_First_Open () {
    // Automatic Variable Declarations
    // Implementation
    gv_partProtoss.lv_mix_First = true;
    gv_partProtoss.lv_psi_Biomass_Mult *= 1.15;
    gv_partProtoss.lv_psi_Exp_Mult *= 1.15;
    gv_partProtoss.lv_mech_Biomass_Mult *= 1.225;
    gv_partProtoss.lv_mech_Exp_Mult *= 1.225;
    gf_Mech_Upgrade_LifeShieldArmor(1.075);
    gf_Mech_Upgrade_Dmg(1.075);
    gf_UpgradeVoidMine(1.025);
    gf_Psi_Upgrade_Dmg(1.05);
    gf_Psi_Upgrade_LifeShieldArmor(1.05);
    gf_UpgradeVoidMine(1.025);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Facility"));
    UnitIssueOrder(UnitFromId(2146047430), Order(AbilityCommand("ProtossDoorNOpen", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1932654700), Order(AbilityCommand("ProtossDoorNOpen", 0)), c_orderQueueReplace);
    gf_IncreaseUpgradeCount(4.0);
}

void gf_Mech_Upgrade_LifeShieldArmor (fixed lp_multiplier) {
    int init_i;

    // Variable Declarations
    const int lv_amountEntries = 34;
    const int lv_amountTypes = 5;
    string[lv_amountEntries + 1] lv_entry;
    string[lv_amountTypes + 1] lv_type;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto6C761382_ae;
    const int auto6C761382_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_amountEntries; init_i += 1) {
        lv_entry[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_amountTypes; init_i += 1) {
        lv_type[init_i] = "";
    }

    // Implementation
    lv_type[0] = "Ancient";
    lv_type[1] = "Purifier";
    lv_type[2] = "Standard";
    lv_type[3] = "Taldarim";
    lv_type[4] = "Nerazim";
    lv_entry[lv_tmpInt] = ("CyberneticsCore" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("CyberneticsCore" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Forge" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Gateway" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Gateway" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Nexus" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Nexus" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("RoboticsBay" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("RoboticsBay" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("RoboticsFacility" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("RoboticsFacility" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("TwilightCouncil" + lv_type[1]);
    lv_tmpInt += 1;

    lv_entry[lv_tmpInt] = ("Colossus" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Colossus" + "Purifier2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Disruptor" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Disruptor" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Dragoon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Dragoon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Immortal" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Immortal" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Sentry" + "Purifier2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Stalker" + "Purifier2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + "Purifier2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = "ObeliskStandard";
    lv_tmpInt += 1;

    auto6C761382_ae = (lv_amountEntries - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto6C761382_ai >= 0 && lv_tmpInt <= auto6C761382_ae) || (auto6C761382_ai < 0 && lv_tmpInt >= auto6C761382_ae) ) ; lv_tmpInt += auto6C761382_ai ) {
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldsMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldsStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    }
}

void gf_Mech_Upgrade_Dmg (fixed lp_multiplier) {
    int init_i;

    // Variable Declarations
    const int lv_amountEntries = 21;
    const int lv_amountTypes = 5;
    string[lv_amountEntries + 1] lv_entry;
    string[lv_amountTypes + 1] lv_type;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int autoABA863C7_ae;
    const int autoABA863C7_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_amountEntries; init_i += 1) {
        lv_entry[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_amountTypes; init_i += 1) {
        lv_type[init_i] = "";
    }

    // Implementation
    lv_type[0] = "Ancient";
    lv_type[1] = "Purifier";
    lv_type[2] = "Standard";
    lv_type[3] = "Taldarim";
    lv_type[4] = "Nerazim";
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[2]);
    lv_tmpInt += 1;

    lv_entry[lv_tmpInt] = ("Colossus" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Colossus" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Disruptor" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Disruptor" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Dragoon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Dragoon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Immortal" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Immortal" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Sentry" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Stalker" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[1]);
    lv_tmpInt += 1;

    autoABA863C7_ae = (lv_amountEntries - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoABA863C7_ai >= 0 && lv_tmpInt <= autoABA863C7_ae) || (autoABA863C7_ai < 0 && lv_tmpInt >= autoABA863C7_ae) ) ; lv_tmpInt += autoABA863C7_ai ) {
        CatalogFieldValueModify(c_gameCatalogEffect, (lv_entry[lv_tmpInt] + "WeaponDmg"), "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogWeapon, (lv_entry[lv_tmpInt] + "Weapon"), "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    }
}

void gf_Psi_Upgrade_LifeShieldArmor (fixed lp_multiplier) {
    int init_i;

    // Variable Declarations
    const int lv_amountEntries = 36;
    const int lv_amountTypes = 5;
    string[lv_amountEntries + 1] lv_entry;
    string[lv_amountTypes + 1] lv_type;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int autoA772B959_ae;
    const int autoA772B959_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_amountEntries; init_i += 1) {
        lv_entry[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_amountTypes; init_i += 1) {
        lv_type[init_i] = "";
    }

    // Implementation
    lv_type[0] = "Ancient";
    lv_type[1] = "Purifier";
    lv_type[2] = "Standard";
    lv_type[3] = "Taldarim";
    lv_type[4] = "Nerazim";
    lv_entry[lv_tmpInt] = ("CyberneticsCore" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("CyberneticsCore" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkShrine" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkShrine" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Forge" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Gateway" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Gateway" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Nexus" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Nexus" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Nexus" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + "Judicator");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("RoboticsBay" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("TemplarArchive" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("TemplarArchive" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("TwilightCouncil" + lv_type[3]);
    lv_tmpInt += 1;

    lv_entry[lv_tmpInt] = ("Adept" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Adept" + "Shadow");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Adept" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Archon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Archon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Colossus" + "Taldarim2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkTemplar" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkTemplar" + "Taldarim2");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Sentry" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Stalker" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = "ObeliskStandard";
    lv_tmpInt += 1;

    autoA772B959_ae = (lv_amountEntries - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoA772B959_ai >= 0 && lv_tmpInt <= autoA772B959_ae) || (autoA772B959_ai < 0 && lv_tmpInt >= autoA772B959_ae) ) ; lv_tmpInt += autoA772B959_ai ) {
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldsMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldsStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, lv_entry[lv_tmpInt], "ShieldArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    }
}

void gf_Psi_Upgrade_Dmg (fixed lp_multiplier) {
    int init_i;

    // Variable Declarations
    const int lv_amountEntries = 21;
    const int lv_amountTypes = 5;
    string[lv_amountEntries + 1] lv_entry;
    string[lv_amountTypes + 1] lv_type;
    int lv_tmpInt;

    // Automatic Variable Declarations
    int auto8F31DCCA_ae;
    const int auto8F31DCCA_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_amountEntries; init_i += 1) {
        lv_entry[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_amountTypes; init_i += 1) {
        lv_type[init_i] = "";
    }

    // Implementation
    lv_type[0] = "Ancient";
    lv_type[1] = "Purifier";
    lv_type[2] = "Standard";
    lv_type[3] = "Taldarim";
    lv_type[4] = "Nerazim";
    lv_entry[lv_tmpInt] = ("Monolith" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("PhotonCannon" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Pylon" + "Judicator");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("VoidContainment" + lv_type[4]);
    lv_tmpInt += 1;

    lv_entry[lv_tmpInt] = ("Adept" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Adept" + "Shadow");
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Adept" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Archon" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Archon" + lv_type[1]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Colossus" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkTemplar" + lv_type[0]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("DarkTemplar" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Sentry" + lv_type[4]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Stalker" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[2]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[3]);
    lv_tmpInt += 1;
    lv_entry[lv_tmpInt] = ("Zealot" + lv_type[4]);
    lv_tmpInt += 1;

    auto8F31DCCA_ae = (lv_amountEntries - 1);
    lv_tmpInt = 0;
    for ( ; ( (auto8F31DCCA_ai >= 0 && lv_tmpInt <= auto8F31DCCA_ae) || (auto8F31DCCA_ai < 0 && lv_tmpInt >= auto8F31DCCA_ae) ) ; lv_tmpInt += auto8F31DCCA_ai ) {
        CatalogFieldValueModify(c_gameCatalogEffect, (lv_entry[lv_tmpInt] + "WeaponDmg"), "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogWeapon, (lv_entry[lv_tmpInt] + "Weapon"), "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    }
}

void gf_UpgradeVoidMine (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldsMax", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldsStart", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldArmor", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldArmorLevel", gv_enemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, ("VoidMine" + "WeaponDmg"), "Amount", gv_enemyPlayer, FixedToString(lp_multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogWeapon, ("VoidMine" + "Weapon"), "Level", gv_enemyPlayer, "1", c_upgradeOperationAdd);
}

void gf_PartProtoss_BossSpawner_Madness_InitVars () {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_spawners[0], UnitFromId(1588768702));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_spawners[0], UnitFromId(1198586738));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_spawners[1], UnitFromId(221841446));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_spawners[1], UnitFromId(225136776));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_spawners[2], UnitFromId(67106696));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_cannons, UnitFromId(1584024246));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_cannons, UnitFromId(788308302));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_healers, UnitFromId(657393947));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_healers, UnitFromId(440466605));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_voidContainments, UnitFromId(982299933));
    UnitGroupAdd(gv_partProtoss.lv_madnessVars.lv_voidContainments, UnitFromId(229526702));
    gv_partProtoss.lv_madnessVars.lv_minibosses[0] = "AdeptTalon";
    gv_partProtoss.lv_madnessVars.lv_minibosses[1] = "HighTemplarTalon";
    gv_partProtoss.lv_madnessVars.lv_minibosses[2] = "HighTemplarCrystalwingTalon";
    TriggerEnable(gt_MadnessVitalsMonitor, true);
    TriggerEnable(gt_MadnessTimer, true);
    Wait(2.0, c_timeGame);
    gf_MadnessActivateSet(RandomInt(0, 2));
}

void gf_MadnessPhaseTransition () {
    // Automatic Variable Declarations
    // Implementation
    gv_partProtoss.lv_madnessVars.lv_phase += 1;
}

void gf_MadnessActivateSet (int lp_setID) {
    // Automatic Variable Declarations
    unitgroup autoE856BE3B_g;
    int autoE856BE3B_u;
    unit autoE856BE3B_var;
    int auto9FB75430_val;
    unitgroup auto37986521_g;
    int auto37986521_u;
    unit auto37986521_var;
    unitgroup auto0DC6F49A_g;
    int auto0DC6F49A_u;
    unit auto0DC6F49A_var;
    unitgroup auto91662A4D_g;
    int auto91662A4D_u;
    unit auto91662A4D_var;

    // Implementation
    gv_partProtoss.lv_madnessVars.lv_activeSet = lp_setID;
    autoE856BE3B_g = gv_partProtoss.lv_madnessVars.lv_spawners[lp_setID];
    autoE856BE3B_u = UnitGroupCount(autoE856BE3B_g, c_unitCountAll);
    for (;; autoE856BE3B_u -= 1) {
        autoE856BE3B_var = UnitGroupUnitFromEnd(autoE856BE3B_g, autoE856BE3B_u);
        if (autoE856BE3B_var == null) { break; }
        UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), autoE856BE3B_var), c_orderQueueAddToFront);
    }
    auto9FB75430_val = lp_setID;
    if (auto9FB75430_val == 0) {
        auto37986521_g = gv_partProtoss.lv_madnessVars.lv_cannons;
        auto37986521_u = UnitGroupCount(auto37986521_g, c_unitCountAll);
        for (;; auto37986521_u -= 1) {
            auto37986521_var = UnitGroupUnitFromEnd(auto37986521_g, auto37986521_u);
            if (auto37986521_var == null) { break; }
            UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), auto37986521_var), c_orderQueueReplace);
        }
        UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), UnitGroupRandomUnit(gv_partProtoss.lv_madnessVars.lv_healers, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (auto9FB75430_val == 1) {
        auto0DC6F49A_g = gv_partProtoss.lv_madnessVars.lv_healers;
        auto0DC6F49A_u = UnitGroupCount(auto0DC6F49A_g, c_unitCountAll);
        for (;; auto0DC6F49A_u -= 1) {
            auto0DC6F49A_var = UnitGroupUnitFromEnd(auto0DC6F49A_g, auto0DC6F49A_u);
            if (auto0DC6F49A_var == null) { break; }
            UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), auto0DC6F49A_var), c_orderQueueReplace);
        }
        UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), UnitGroupRandomUnit(gv_partProtoss.lv_madnessVars.lv_voidContainments, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (auto9FB75430_val == 2) {
        auto91662A4D_g = gv_partProtoss.lv_madnessVars.lv_voidContainments;
        auto91662A4D_u = UnitGroupCount(auto91662A4D_g, c_unitCountAll);
        for (;; auto91662A4D_u -= 1) {
            auto91662A4D_var = UnitGroupUnitFromEnd(auto91662A4D_g, auto91662A4D_u);
            if (auto91662A4D_var == null) { break; }
            UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), auto91662A4D_var), c_orderQueueReplace);
        }
        UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), UnitGroupRandomUnit(gv_partProtoss.lv_madnessVars.lv_cannons, c_unitCountAlive)), c_orderQueueReplace);
        UnitIssueOrder(gv_partProtoss.lv_madness, OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), UnitGroupRandomUnit(gv_partProtoss.lv_madnessVars.lv_healers, c_unitCountAlive)), c_orderQueueReplace);
    }
    else {
    }
}

void gf_MadnessClearArena () {
    // Automatic Variable Declarations
    unitgroup auto4AF635CA_g;
    int auto4AF635CA_u;
    unit auto4AF635CA_var;
    unitgroup autoD4271935_g;
    int autoD4271935_u;
    unit autoD4271935_var;
    unitgroup auto84C66ECE_g;
    int auto84C66ECE_u;
    unit auto84C66ECE_var;
    unitgroup auto47428AB2_g;
    int auto47428AB2_u;
    unit auto47428AB2_var;
    unitgroup auto1634991E_g;
    int auto1634991E_u;
    unit auto1634991E_var;
    unitgroup autoF4A48670_g;
    int autoF4A48670_u;
    unit autoF4A48670_var;

    // Implementation
    auto4AF635CA_g = gv_partProtoss.lv_madnessVars.lv_spawners[0];
    auto4AF635CA_u = UnitGroupCount(auto4AF635CA_g, c_unitCountAll);
    for (;; auto4AF635CA_u -= 1) {
        auto4AF635CA_var = UnitGroupUnitFromEnd(auto4AF635CA_g, auto4AF635CA_u);
        if (auto4AF635CA_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", auto4AF635CA_var, 0.0);
    }
    autoD4271935_g = gv_partProtoss.lv_madnessVars.lv_spawners[1];
    autoD4271935_u = UnitGroupCount(autoD4271935_g, c_unitCountAll);
    for (;; autoD4271935_u -= 1) {
        autoD4271935_var = UnitGroupUnitFromEnd(autoD4271935_g, autoD4271935_u);
        if (autoD4271935_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", autoD4271935_var, 0.0);
    }
    auto84C66ECE_g = gv_partProtoss.lv_madnessVars.lv_spawners[2];
    auto84C66ECE_u = UnitGroupCount(auto84C66ECE_g, c_unitCountAll);
    for (;; auto84C66ECE_u -= 1) {
        auto84C66ECE_var = UnitGroupUnitFromEnd(auto84C66ECE_g, auto84C66ECE_u);
        if (auto84C66ECE_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", auto84C66ECE_var, 0.0);
    }
    auto47428AB2_g = gv_partProtoss.lv_madnessVars.lv_cannons;
    auto47428AB2_u = UnitGroupCount(auto47428AB2_g, c_unitCountAll);
    for (;; auto47428AB2_u -= 1) {
        auto47428AB2_var = UnitGroupUnitFromEnd(auto47428AB2_g, auto47428AB2_u);
        if (auto47428AB2_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", auto47428AB2_var, 0.0);
    }
    auto1634991E_g = gv_partProtoss.lv_madnessVars.lv_healers;
    auto1634991E_u = UnitGroupCount(auto1634991E_g, c_unitCountAll);
    for (;; auto1634991E_u -= 1) {
        auto1634991E_var = UnitGroupUnitFromEnd(auto1634991E_g, auto1634991E_u);
        if (auto1634991E_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", auto1634991E_var, 0.0);
    }
    autoF4A48670_g = gv_partProtoss.lv_madnessVars.lv_voidContainments;
    autoF4A48670_u = UnitGroupCount(autoF4A48670_g, c_unitCountAll);
    for (;; autoF4A48670_u -= 1) {
        autoF4A48670_var = UnitGroupUnitFromEnd(autoF4A48670_g, autoF4A48670_u);
        if (autoF4A48670_var == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", autoF4A48670_var, 0.0);
    }
}

int gf_MadnessReturnNotLastSetID () {
    // Variable Declarations
    int lv_tmp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tmp = RandomInt(0, 1);

    // Implementation
    if ((lv_tmp == gv_partProtoss.lv_madnessVars.lv_activeSet)) {
        return 2;
    }
    else {
        return lv_tmp;
    }
}

void gf_CopyVitals (unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_target, c_unitPropLifeMax, UnitGetPropertyFixed(lp_source, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropShieldsMax, UnitGetPropertyFixed(lp_source, c_unitPropShieldsMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropEnergyMax, UnitGetPropertyFixed(lp_source, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropLife, UnitGetPropertyFixed(lp_source, c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropShields, UnitGetPropertyFixed(lp_source, c_unitPropShields, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropEnergy, UnitGetPropertyFixed(lp_source, c_unitPropEnergy, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_target, c_unitPropKills, UnitGetPropertyFixed(lp_source, c_unitPropKills, c_unitPropCurrent));
}

bool gf_DevPlayer (int lp_playerid) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_DevCristall(lp_playerid) || gf_DevScythe(lp_playerid))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_DevCristall (int lp_playerid) {
    // Variable Declarations
    string lv_handle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = PlayerHandle(lp_playerid);

    // Implementation
    if (((lv_handle == "2-S2-1-1066242") || (lv_handle == "1-S2-1-4330213") || (lv_handle == "3-S2-1-7096262"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_DevScythe (int lp_playerid) {
    // Variable Declarations
    string lv_handle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = PlayerHandle(lp_playerid);

    // Implementation
    if (((lv_handle == "2-S2-1-7526206"))) {
        return true;
    }
    else {
        return false;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInitialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmpplayer;
    text lv_tmpText;
    playergroup lv_notnewplayers;

    // Automatic Variable Declarations
    string auto66B4B8D0_val;
    playergroup auto6D4FCAE5_g;
    int auto6D4FCAE5_var;
    playergroup auto0B45B538_g;
    int auto0B45B538_var;

    // Variable Initialization
    lv_notnewplayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto66B4B8D0_val = GameAttributeGameValue("1");
    if (auto66B4B8D0_val == "0002") {
        gv_gameMode = "Classic";
    }
    else if (auto66B4B8D0_val == "0001") {
        gv_gameMode = "Tutorial";
    }
    else if (auto66B4B8D0_val == "0003") {
        gv_gameMode = "CustomDiff";
    }
    else {
    }
    if ((GameIsTestMap(false) == true)) {
        gv_gameMode = "CustomDiff";
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(gv_gameMode));
    }

    GameSetMissionTimePaused(true);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    gf_Init_HeroList();
    gf_Init_AcvRequirements();
    gf_Init_BuggedModels();
    gf_Init_activePlayers();
    gv_partActive = 1;
    gf_Init_PartVariables();
    gf_Init_HeroSelection();
    gf_Init_SSF_CustomUI();
    gf_FillBunkers();
    gf_Init_Bankfile();
    gf_Init_CustomDefeatDialog();
    gf_Init_TradeMenu();
    gf_Init_Leaderbord();
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    auto6D4FCAE5_g = gv_startingPlayerGroup;
    auto6D4FCAE5_var = -1;
    while (true) {
        auto6D4FCAE5_var = PlayerGroupNextPlayer(auto6D4FCAE5_g, auto6D4FCAE5_var);
        if (auto6D4FCAE5_var < 0) { break; }
        PlayerOptionOverride(auto6D4FCAE5_var, "simplecommandcard", "0");
        lv_tmpText = (lv_tmpText + PlayerName(auto6D4FCAE5_var) + StringToText(": ") + StringToText(PlayerHandle(auto6D4FCAE5_var)) + StringToText("<n/>"));
    }
    lv_tmpText = (lv_tmpText + StringToText("<n/>v") + FixedToText(gv_version, 2));
    HelpPanelAddHint(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringToText("Handles"), libNtve_ge_TipType_NormalTip), lv_tmpText, "Assets\\Textures\\btn-tips-hacking.dds");
    TipAlertPanelClear(PlayerGroupAll());
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringToText("Credits"), libNtve_ge_TipType_NormalTip), StringToText("<s val=\"aazHelpPanelTip_SubHeader\">Bug Hunting:</s><n/>Shadows @SSF Discord (actively hunting for bugs and abuses)<n/>and all the other testers, especially those who tested part 2 before release<n/><n/><n/><s val=\"aazHelpPanelTip_SubHeader\">Suggestions:</s><n/>Scythe @SSF Discord (joining development of part 2)<n/>and all the other people who sent me suggestions<n/><n/><n/><s val=\"aazHelpPanelTip_SubHeader\">Assets:</s><n/>WingedArchon @sc2mapster.com (Purple protoss faction units)<n/>Gumba @sc2mapster.com (Wireframes for cybernetics & mercanaries)<n/>Alleyvsc2 @sc2mapster.com (Fixed Malash model)<n/><n/><s val=\"aazHelpPanelTip_SubHeader\">Other:</s><n/>Skunk's loading screen layout file and layout tutorial<n/>Talv's sc2 layout tool<n/>Sc2Mapster Community (Forum, Wiki and Discord) creating tutorials and answering questions  "), StringToText("Credits"), "Assets\\Textures\\btn-tips-hacking.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Trig/HelpMenu/FAQ/Title"), libNtve_ge_TipType_NormalTip), StringExternal("Trig/HelpMenu/FAQ/Content"), StringExternal("Trig/HelpMenu/FAQ/Title"), "Assets\\Textures\\btn-unit-zerg-roach_collection.dds");
    lv_notnewplayers = PlayerGroupCopy(gv_playerGroup);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_newPlayers, lv_notnewplayers);
    TipAlertPanelClear(lv_notnewplayers);
    if ((gv_gameMode == "Tutorial")) {
        gf_InitTutorial();
    }
    else {
        if ((gv_playerAmount == 1)) {
            auto0B45B538_g = gv_playerGroup;
            auto0B45B538_var = -1;
            while (true) {
                auto0B45B538_var = PlayerGroupNextPlayer(auto0B45B538_g, auto0B45B538_var);
                if (auto0B45B538_var < 0) { break; }
                lv_tmpplayer = auto0B45B538_var;
            }
            if ((gv_playerStats[lv_tmpplayer].lv_tutorialCompleted == false)) {
                gf_InitAskTutorial();
            }
            else {
                gf_InitNotTutorial();
            }
        }
        else {
            gf_InitNotTutorial();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BankPeriodicSave
//--------------------------------------------------------------------------------------------------
bool gt_BankPeriodicSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAF4E9880_g;
    int autoAF4E9880_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF4E9880_g = gv_playerGroup;
    autoAF4E9880_var = -1;
    while (true) {
        autoAF4E9880_var = PlayerGroupNextPlayer(autoAF4E9880_g, autoAF4E9880_var);
        if (autoAF4E9880_var < 0) { break; }
        gf_Save(autoAF4E9880_var);
        Wait(0.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankPeriodicSave_Init () {
    gt_BankPeriodicSave = TriggerCreate("gt_BankPeriodicSave_Func");
    TriggerEnable(gt_BankPeriodicSave, false);
    TriggerAddEventTimer(gt_BankPeriodicSave, gv_saveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ManualSave
//--------------------------------------------------------------------------------------------------
bool gt_ManualSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Save(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManualSave_Init () {
    gt_ManualSave = TriggerCreate("gt_ManualSave_Func");
    TriggerAddEventChatMessage(gt_ManualSave, c_playerAny, "-save", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_HeroButtonHandler
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_HeroButtonHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroID = gf_HeroSelect_GetHeroButtonID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_heroID >= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HeroSelect_SelectHero(EventPlayer(), lv_heroID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_HeroButtonHandler_Init () {
    gt_HeroSelect_HeroButtonHandler = TriggerCreate("gt_HeroSelect_HeroButtonHandler_Func");
    TriggerAddEventDialogControl(gt_HeroSelect_HeroButtonHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_ReadyButtonHandler
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_ReadyButtonHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tmpInt;
    int lv_playerID;

    // Automatic Variable Declarations
    int autoA13CAE29_ae;
    const int autoA13CAE29_ai = 1;
    int autoC60E2CE9_ae;
    const int autoC60E2CE9_ai = 1;

    // Variable Initialization
    lv_playerID = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroSelection.lv_ready_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(lv_playerID), false);
    DialogControlSendAnimationEvent(gv_heroSelection.lv_playerShowcase[lv_playerID], PlayerGroupAll(), "PlayerReady");
    autoA13CAE29_ae = (gv_maxHeroList - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoA13CAE29_ai >= 0 && lv_tmpInt <= autoA13CAE29_ae) || (autoA13CAE29_ai < 0 && lv_tmpInt >= autoA13CAE29_ae) ) ; lv_tmpInt += autoA13CAE29_ai ) {
        DialogControlSetVisible(gv_heroSelection.lv_hero_Button[lv_tmpInt], PlayerGroupSingle(lv_playerID), false);
    }
    if ((gv_gameMode == "Classic")) {
        autoC60E2CE9_ae = (gv_maxAmountDifficulties - 1);
        lv_tmpInt = 0;
        for ( ; ( (autoC60E2CE9_ai >= 0 && lv_tmpInt <= autoC60E2CE9_ae) || (autoC60E2CE9_ai < 0 && lv_tmpInt >= autoC60E2CE9_ae) ) ; lv_tmpInt += autoC60E2CE9_ai ) {
            DialogControlSetEnabled(gv_heroSelection.lv_difficulty_Button[lv_tmpInt], PlayerGroupSingle(lv_playerID), false);
        }
        DialogControlSetEnabled(gv_heroSelection.lv_difficulty_Button_Any, PlayerGroupSingle(lv_playerID), false);
    }

    gv_heroSelection.lv_ready_Counter += 1;
    gv_heroSelection.lv_player_IsReady[EventPlayer()] = true;
    if ((gv_heroSelection.lv_ready_Counter == gv_playerAmount)) {
        gf_HeroSelect_Finish();
        gv_heroSelection.lv_timer = 0;
    }

    if ((EventPlayer() == gv_heroSelection.lv_customDiffHost)) {
        DialogControlHookup(gv_heroSelection.lv_mainFrame, c_triggerControlTypePanel, "GameModeCustom");
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), "Host", "False");
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputLoadButton, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), false);
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputEditBox, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), false);
        gv_heroSelection.lv_customDiffHost = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_ReadyButtonHandler_Init () {
    gt_HeroSelect_ReadyButtonHandler = TriggerCreate("gt_HeroSelect_ReadyButtonHandler_Func");
    TriggerAddEventDialogControl(gt_HeroSelect_ReadyButtonHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_DiffButtonHandler
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_DiffButtonHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerID;
    int lv_difficulty;
    text lv_text;

    // Automatic Variable Declarations
    int auto10F419AB_val;

    // Variable Initialization
    lv_playerID = EventPlayer();
    lv_difficulty = gf_HeroSelect_GetDiffButtonID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_difficulty >= -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_heroSelection.lv_player_Difficulty_Selected[lv_playerID] = lv_difficulty;
    auto10F419AB_val = lv_difficulty;
    if (auto10F419AB_val == -1) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Any");
    }
    else if (auto10F419AB_val == 0) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Easy");
    }
    else if (auto10F419AB_val == 1) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Normal");
    }
    else if (auto10F419AB_val == 2) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hard");
    }
    else if (auto10F419AB_val == 3) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Brutal");
    }
    else if (auto10F419AB_val == 4) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Insane");
    }
    else if (auto10F419AB_val == 5) {
        lv_text = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Hardcore");
    }
    else {
    }
    gf_HeroSelect_Showcase_SetDiff(EventPlayer(), lv_text);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_DiffButtonHandler_Init () {
    gt_HeroSelect_DiffButtonHandler = TriggerCreate("gt_HeroSelect_DiffButtonHandler_Func");
    TriggerAddEventDialogControl(gt_HeroSelect_DiffButtonHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_AutoSelection_ButtonHandler
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_AutoSelection_ButtonHandler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroSelection.lv_autoSelection_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_options.lv_heroSelection_Flag[EventPlayer()] == false)) {
        gv_options.lv_heroSelection_Flag[EventPlayer()] = true;
        libNtve_gf_SetDialogItemChecked(gv_options.lv_heroSelection_Checkbox, true, PlayerGroupSingle(EventPlayer()));
    }

    DialogControlSetEnabled(gv_heroSelection.lv_autoSelection_Button, PlayerGroupSingle(EventPlayer()), false);
    gv_options.lv_heroSelection_Hero[EventPlayer()] = gv_heroSelection.lv_player_Hero_Selected[EventPlayer()];
    DialogControlSelectItem(gv_options.lv_heroSelection_Pulldown, PlayerGroupSingle(EventPlayer()), (gv_heroSelection.lv_player_Hero_Selected[EventPlayer()] + 1));
    gv_options.lv_saveFlag[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_AutoSelection_ButtonHandler_Init () {
    gt_HeroSelect_AutoSelection_ButtonHandler = TriggerCreate("gt_HeroSelect_AutoSelection_ButtonHandler_Func");
    TriggerAddEventDialogControl(gt_HeroSelect_AutoSelection_ButtonHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_Timer
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_Timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_heroSelection.lv_timer -= 1;
    libNtve_gf_SetDialogItemText(gv_heroSelection.lv_timer_Label, IntToText(gv_heroSelection.lv_timer), PlayerGroupAll());
    if ((PlayerGroupCount(gv_newPlayers) != 0)) {
        libNtve_gf_SetDialogItemText(gv_tutorial.lv_timerLabel, IntToText(gv_heroSelection.lv_timer), PlayerGroupAll());
    }

    if ((gv_heroSelection.lv_timer <= 0)) {
        gf_HeroSelect_Finish();
        if ((PlayerGroupCount(gv_newPlayers) != 0)) {
            DialogControlSetVisible(gv_tutorial.lv_timerLabel, PlayerGroupAll(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_Timer_Init () {
    gt_HeroSelect_Timer = TriggerCreate("gt_HeroSelect_Timer_Func");
    TriggerEnable(gt_HeroSelect_Timer, false);
    TriggerAddEventTimePeriodic(gt_HeroSelect_Timer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_CustomDiff_Editbox Edits
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_CustomDiff_EditboxEdits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_input;
    int lv_editboxID;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_input = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    lv_editboxID = gf_HeroSelect_CustomDiff_GetEditboxID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_editboxID >= 0))) {
            return false;
        }

        if (!((EventPlayer() == gv_heroSelection.lv_customDiffHost))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemEditorValue(gv_heroSelection.lv_customDiffEditboxes[lv_editboxID], lv_input, gv_heroSelection.lv_customDiffNotHostPlayerGroup);
    if (gf_isNumber(lv_input)) {
        lv_value = StringToFixed(lv_input);
        if ((!((lv_editboxID == 0) || (lv_editboxID == 4) || (lv_editboxID == 6) || (lv_editboxID == 13) || (lv_editboxID == 14) || (lv_editboxID == 15) || (lv_editboxID == 16) || (lv_editboxID == 17)))) {
            if ((lv_value > -100.0)) {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = true;
            }
            else {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = false;
            }
        }
        else if (((lv_editboxID == 0) || (lv_editboxID == 4) || (lv_editboxID == 6))) {
            gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = true;
        }
        else if (((lv_editboxID == 13) || (lv_editboxID == 14) || (lv_editboxID == 16))) {
            if ((lv_value >= 0.0)) {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = true;
            }
            else {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = false;
            }
        }
        else if ((lv_editboxID == 15)) {
            if ((lv_value >= 0.0) && (lv_value <= 5.0) && (lv_value == Round(lv_value))) {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = true;
            }
            else {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = false;
            }
        }
        else if ((lv_editboxID == 17)) {
            if ((lv_value >= 0.0) && (lv_value == Round(lv_value))) {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = true;
            }
            else {
                gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = false;
            }
        }
    }
    else {
        gv_heroSelection.lv_customDiffValidInput[lv_editboxID] = false;
    }
    DialogControlSetAnimationState(EventDialogControl(), PlayerGroupAll(), "ValidInput", libNtve_gf_ConvertBooleanToString(gv_heroSelection.lv_customDiffValidInput[lv_editboxID]));
    if (gf_HeroSelect_CustomDiff_AllInputsValid()) {
        DialogControlSetEnabled(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), true);
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputCreateButton, gv_playerGroup, true);
        gf_HeroSelect_CustomDiff_HighlightRewardDiff(gf_HeroSelect_CustomDiff_DirectRewardDiff());
    }
    else {
        DialogControlSetEnabled(gv_heroSelection.lv_ready_Button, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), false);
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputCreateButton, gv_playerGroup, false);
        gf_HeroSelect_CustomDiff_HighlightRewardDiff(-2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_CustomDiff_EditboxEdits_Init () {
    gt_HeroSelect_CustomDiff_EditboxEdits = TriggerCreate("gt_HeroSelect_CustomDiff_EditboxEdits_Func");
    TriggerEnable(gt_HeroSelect_CustomDiff_EditboxEdits, false);
    TriggerAddEventDialogControl(gt_HeroSelect_CustomDiff_EditboxEdits, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_CustomDiff_DiffPresetHandler
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_CustomDiff_DiffPresetHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficulty;
    gs_HeroSelect_CustomDiff_DiffPreset lv_settings;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = gf_HeroSelect_CustomDiff_GetDiffPresetID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_difficulty >= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HeroSelect_CustomDiff_DiffPresetReturn(lv_settings, lv_difficulty);
    gf_HeroSelect_CustomDiff_DiffPresetSet(lv_settings);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_CustomDiff_DiffPresetHandler_Init () {
    gt_HeroSelect_CustomDiff_DiffPresetHandler = TriggerCreate("gt_HeroSelect_CustomDiff_DiffPresetHandler_Func");
    TriggerEnable(gt_HeroSelect_CustomDiff_DiffPresetHandler, false);
    TriggerAddEventDialogControl(gt_HeroSelect_CustomDiff_DiffPresetHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_CustomDiff_CustomPreset_CreateButton
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_CustomDiff_CustomPreset_CreateButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroSelection.lv_customDiffCustomPresetInputCreateButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HeroSelect_CustomDiff_CustomPreset_CreateInput(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_CustomDiff_CustomPreset_CreateButton_Init () {
    gt_HeroSelect_CustomDiff_CustomPreset_CreateButton = TriggerCreate("gt_HeroSelect_CustomDiff_CustomPreset_CreateButton_Func");
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_CreateButton, false);
    TriggerAddEventDialogControl(gt_HeroSelect_CustomDiff_CustomPreset_CreateButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_CustomDiff_CustomPreset_Input Changed
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_CustomDiff_CustomPreset_InputChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_HeroSelect_CustomDiff_DiffPreset lv_preset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroSelection.lv_customDiffCustomPresetInputEditBox))) {
            return false;
        }

        if (!((EventPlayer() == gv_heroSelection.lv_customDiffHost))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_HeroSelect_CustomDiff_CustomPreset_LoadInputandCheck(lv_preset)) {
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputLoadButton, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), true);
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputCopyClipboardButton, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), true);
    }
    else {
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputLoadButton, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), false);
        DialogControlSetEnabled(gv_heroSelection.lv_customDiffCustomPresetInputCopyClipboardButton, PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_CustomDiff_CustomPreset_InputChanged_Init () {
    gt_HeroSelect_CustomDiff_CustomPreset_InputChanged = TriggerCreate("gt_HeroSelect_CustomDiff_CustomPreset_InputChanged_Func");
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_InputChanged, false);
    TriggerAddEventDialogControl(gt_HeroSelect_CustomDiff_CustomPreset_InputChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSelect_CustomDiff_CustomPreset_LoadButton
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelect_CustomDiff_CustomPreset_LoadButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    gs_HeroSelect_CustomDiff_DiffPreset lv_settings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroSelection.lv_customDiffCustomPresetInputLoadButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_HeroSelect_CustomDiff_CustomPreset_LoadInputandCheck(lv_settings)) {
        gf_HeroSelect_CustomDiff_DiffPresetSet(lv_settings);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(gv_heroSelection.lv_customDiffHost), c_messageAreaSubtitle, StringToText("Error! Input string is not valid."));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelect_CustomDiff_CustomPreset_LoadButton_Init () {
    gt_HeroSelect_CustomDiff_CustomPreset_LoadButton = TriggerCreate("gt_HeroSelect_CustomDiff_CustomPreset_LoadButton_Func");
    TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_LoadButton, false);
    TriggerAddEventDialogControl(gt_HeroSelect_CustomDiff_CustomPreset_LoadButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CustomDefeatDialog_SpectateButton
//--------------------------------------------------------------------------------------------------
bool gt_CustomDefeatDialog_SpectateButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_customDefeatDialogVariables.lv_spectateButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_customDefeatDialogVariables.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
    gv_playerStats[EventPlayer()].lv_spectating = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomDefeatDialog_SpectateButton_Init () {
    gt_CustomDefeatDialog_SpectateButton = TriggerCreate("gt_CustomDefeatDialog_SpectateButton_Func");
    TriggerAddEventDialogControl(gt_CustomDefeatDialog_SpectateButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CustomDefeatDialog_LeaveButton
//--------------------------------------------------------------------------------------------------
bool gt_CustomDefeatDialog_LeaveButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_customDefeatDialogVariables.lv_leaveButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerStats[EventPlayer()].lv_spectating = false;
    GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    DialogSetVisible(gv_customDefeatDialogVariables.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomDefeatDialog_LeaveButton_Init () {
    gt_CustomDefeatDialog_LeaveButton = TriggerCreate("gt_CustomDefeatDialog_LeaveButton_Func");
    TriggerAddEventDialogControl(gt_CustomDefeatDialog_LeaveButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial_CloseButtonHandler (mini intoduction)
//--------------------------------------------------------------------------------------------------
bool gt_Tutorial_CloseButtonHandlerminiintoduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tutorial.lv_closeButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_tutorial.lv_smallinfo, PlayerGroupSingle(EventPlayer()), false);
    PlayerGroupRemove(gv_newPlayers, EventPlayer());
    if ((PlayerGroupCount(gv_newPlayers) == 0)) {
        TriggerEnable(gt_Tutorial_CloseButtonHandlerminiintoduction, false);
        DialogControlDestroyAll(gv_tutorial.lv_smallinfo);
        DialogDestroy(gv_tutorial.lv_smallinfo);
    }

    if ((gv_heroSelection.lv_timer >= 1)) {
        DialogControlSetVisible(gv_heroSelection.lv_mainFrame, PlayerGroupSingle(EventPlayer()), true);
        gf_HeroSelect_Showcase_SetDiff(EventPlayer(), StringToText(""));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tutorial_CloseButtonHandlerminiintoduction_Init () {
    gt_Tutorial_CloseButtonHandlerminiintoduction = TriggerCreate("gt_Tutorial_CloseButtonHandlerminiintoduction_Func");
    TriggerEnable(gt_Tutorial_CloseButtonHandlerminiintoduction, false);
    TriggerAddEventDialogControl(gt_Tutorial_CloseButtonHandlerminiintoduction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Asking Yes Button
//--------------------------------------------------------------------------------------------------
bool gt_TutorialAskingYesButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tutorial.lv_startTutorialButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_tutorial.lv_smallinfo, PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(gt_TutorialAskingYesButton, false);
    TriggerEnable(gt_TutorialAskingNoButton, false);
    DialogDestroy(gv_tutorial.lv_smallinfo);
    gf_InitTutorial();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialAskingYesButton_Init () {
    gt_TutorialAskingYesButton = TriggerCreate("gt_TutorialAskingYesButton_Func");
    TriggerEnable(gt_TutorialAskingYesButton, false);
    TriggerAddEventDialogControl(gt_TutorialAskingYesButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Asking No Button
//--------------------------------------------------------------------------------------------------
bool gt_TutorialAskingNoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tutorial.lv_closeButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_tutorial.lv_smallinfo, PlayerGroupSingle(EventPlayer()), false);
    TriggerEnable(gt_TutorialAskingYesButton, false);
    TriggerEnable(gt_TutorialAskingNoButton, false);
    DialogDestroy(gv_tutorial.lv_smallinfo);
    gf_InitNotTutorial();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialAskingNoButton_Init () {
    gt_TutorialAskingNoButton = TriggerCreate("gt_TutorialAskingNoButton_Func");
    TriggerEnable(gt_TutorialAskingNoButton, false);
    TriggerAddEventDialogControl(gt_TutorialAskingNoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Close
//--------------------------------------------------------------------------------------------------
bool gt_TutorialClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6546ACEB_val;

    // Conditions
    if (testConds) {
        if (!((gv_tutorial.lv_closeButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TutorialPause(false);
    DialogSetVisible(gv_tutorial.lv_dialog, gv_playerGroup, false);
    DialogControlSetVisible(gv_tutorial.lv_closeButton, PlayerGroupAll(), false);
    CameraLockInput(gv_tutorial.lv_player, false);
    auto6546ACEB_val = gv_tutorial.lv_stage;
    if (auto6546ACEB_val == 0) {
        gf_TutorialHero();
    }
    else if (auto6546ACEB_val == 1) {
        gf_TutorialOverlord();
    }
    else if (auto6546ACEB_val == 2) {
        gf_TutorialHive();
    }
    else if (auto6546ACEB_val == 3) {
        gf_TutorialIssueExplore();
    }
    else if (auto6546ACEB_val == 4) {
        UnitClearSelection(gv_tutorial.lv_player);
        UnitSelect(gv_heroUnits[gv_tutorial.lv_player], gv_tutorial.lv_player, true);
    }
    else if (auto6546ACEB_val == -73) {
        VisRevealerDestroy(gv_tutorial.lv_revealer);
        CameraPan(gv_tutorial.lv_player, gv_tutorial.lv_camerabefore, 1.0, -1, 10.0, false);
    }
    else if (auto6546ACEB_val == -5) {
        VisRevealerDestroy(gv_tutorial.lv_revealer);
        CameraPan(gv_tutorial.lv_player, gv_tutorial.lv_camerabefore, 1.0, -1, 10.0, false);
    }
    else if (auto6546ACEB_val == -40) {
        VisRevealerDestroy(gv_tutorial.lv_revealer);
        CameraPan(gv_tutorial.lv_player, gv_tutorial.lv_camerabefore, 1.0, -1, 10.0, false);
    }
    else if (auto6546ACEB_val == -1) {
        gf_TutorialFirstPush();
        gv_tutorial.lv_stage = 6;
    }
    else if (auto6546ACEB_val == -10) {
        gf_Save(gv_tutorial.lv_player);
        GameOver(gv_tutorial.lv_player, c_gameOverVictory, true, true);
    }
    else {
        if ((gv_tutorial.lv_tpbacktohive == false)) {
            CameraPan(gv_tutorial.lv_player, gv_tutorial.lv_camerabefore, 1.0, -1, 10.0, false);
        }

    }
    if ((gv_tutorial.lv_tpbacktohive == true)) {
        gv_tutorial.lv_tpbacktohive = false;
        UnitSetPosition(gv_heroUnits[gv_tutorial.lv_player], PointFromId(1940962760), false);
        UnitSetState(gv_heroUnits[gv_tutorial.lv_player], c_unitStateInvulnerable, false);
        UnitSetState(gv_heroUnits[gv_tutorial.lv_player], c_unitStateStunned, false);
        libNtve_gf_ShowHideUnit(gv_heroUnits[gv_tutorial.lv_player], true);
        CameraPan(gv_tutorial.lv_player, gv_enemy_ActivePart.lv_playerSpawnPoints[gv_tutorial.lv_player], 1.0, -1, 10.0, false);
    }

    gv_tutorial.lv_stage += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialClose_Init () {
    gt_TutorialClose = TriggerCreate("gt_TutorialClose_Func");
    TriggerEnable(gt_TutorialClose, false);
    TriggerAddEventDialogControl(gt_TutorialClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran_Spawns Tutorial Version
//--------------------------------------------------------------------------------------------------
bool gt_Terran_SpawnsTutorialVersion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitSpawnType;
    int lv_unitSpawnAmount;

    // Automatic Variable Declarations
    unitgroup auto2D894691_g;
    int auto2D894691_u;
    unit auto2D894691_var;
    unitgroup auto892444E1_g;
    int auto892444E1_u;
    unit auto892444E1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spawnAmount <= gv_spawnLimit)) {
        if ((gv_partTerran.lv_mix_First == true)) {
            auto2D894691_g = gv_partTerran.lv_mix_First_Spawner;
            auto2D894691_u = UnitGroupCount(auto2D894691_g, c_unitCountAll);
            for (;; auto2D894691_u -= 1) {
                auto2D894691_var = UnitGroupUnitFromEnd(auto2D894691_g, auto2D894691_u);
                if (auto2D894691_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto2D894691_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto2D894691_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto2D894691_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/SpawnLimitReached"));
        auto892444E1_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto892444E1_u = UnitGroupCount(auto892444E1_g, c_unitCountAll);
        for (;; auto892444E1_u -= 1) {
            auto892444E1_var = UnitGroupUnitFromEnd(auto892444E1_g, auto892444E1_u);
            if (auto892444E1_var == null) { break; }
            UnitBehaviorAddPlayer(auto892444E1_var, "InvulnerableOverSpawnLimit", gv_enemyPlayer, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Terran_SpawnsTutorialVersion_Init () {
    gt_Terran_SpawnsTutorialVersion = TriggerCreate("gt_Terran_SpawnsTutorialVersion_Func");
    TriggerEnable(gt_Terran_SpawnsTutorialVersion, false);
    TriggerAddEventTimer(gt_Terran_SpawnsTutorialVersion, gv_spawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial First Attack Wave Comes
//--------------------------------------------------------------------------------------------------
bool gt_TutorialFirstAttackWaveComes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_enemyPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialFirstAttackWave(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialFirstAttackWaveComes_Init () {
    gt_TutorialFirstAttackWaveComes = TriggerCreate("gt_TutorialFirstAttackWaveComes_Func");
    TriggerEnable(gt_TutorialFirstAttackWaveComes, false);
    TriggerAddEventUnitRegion(gt_TutorialFirstAttackWaveComes, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial After 2nd Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_TutorialAfter2ndAttackWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialMoneySkip();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialAfter2ndAttackWave_Init () {
    gt_TutorialAfter2ndAttackWave = TriggerCreate("gt_TutorialAfter2ndAttackWave_Func");
    TriggerEnable(gt_TutorialAfter2ndAttackWave, false);
    TriggerAddEventTimer(gt_TutorialAfter2ndAttackWave, gv_tutorial.lv_moneyskiptimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Move Out
//--------------------------------------------------------------------------------------------------
bool gt_TutorialMoveOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_tutorial.lv_player))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_tutorial.lv_stage == 4)) {
        TriggerEnable(gt_TutorialFirstAttackWaveComes, false);
        gv_tutorial.lv_stage = -1;
        gf_TutorialFirstAttackWave(EventUnit());
    }
    else {
        gf_TutorialFirstPush();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialMoveOut_Init () {
    gt_TutorialMoveOut = TriggerCreate("gt_TutorialMoveOut_Func");
    TriggerEnable(gt_TutorialMoveOut, false);
    TriggerAddEventUnitRegion(gt_TutorialMoveOut, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial First Spawner Near Dead
//--------------------------------------------------------------------------------------------------
bool gt_TutorialFirstSpawnerNearDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnit(), "SpawnerBlackOps") == true) || (UnitHasBehavior2(EventUnit(), "SpawnerJunker") == true)))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 12.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialFirstSpawner(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialFirstSpawnerNearDead_Init () {
    gt_TutorialFirstSpawnerNearDead = TriggerCreate("gt_TutorialFirstSpawnerNearDead_Func");
    TriggerEnable(gt_TutorialFirstSpawnerNearDead, false);
    TriggerAddEventUnitDamaged(gt_TutorialFirstSpawnerNearDead, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Widow Mines Killed
//--------------------------------------------------------------------------------------------------
bool gt_TutorialWidowMinesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "WidowMine22") || (UnitGetType(EventUnit()) == "WidowMine2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialSurvivedWidowMinesUseMutations(gv_baseOverlord[gv_tutorial.lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialWidowMinesKilled_Init () {
    gt_TutorialWidowMinesKilled = TriggerCreate("gt_TutorialWidowMinesKilled_Func");
    TriggerEnable(gt_TutorialWidowMinesKilled, false);
    TriggerAddEventUnitDied(gt_TutorialWidowMinesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Larva Near
//--------------------------------------------------------------------------------------------------
bool gt_TutorialLarvaNear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialLarva(gv_tutorial.lv_larva);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialLarvaNear_Init () {
    gt_TutorialLarvaNear = TriggerCreate("gt_TutorialLarvaNear_Func");
    TriggerEnable(gt_TutorialLarvaNear, false);
    TriggerAddEventUnitRegion(gt_TutorialLarvaNear, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essences_Pickup Tutorial Version
//--------------------------------------------------------------------------------------------------
bool gt_Essences_PickupTutorialVersion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(EventUnit());
    ObjectiveSetState(gv_objectives.lv_essences, c_objectiveStateCompleted);
    gf_TutorialEssencecollected(gv_heroUnits[gv_tutorial.lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Essences_PickupTutorialVersion_Init () {
    gt_Essences_PickupTutorialVersion = TriggerCreate("gt_Essences_PickupTutorialVersion_Func");
    TriggerEnable(gt_Essences_PickupTutorialVersion, false);
    TriggerAddEventUnitAbility(gt_Essences_PickupTutorialVersion, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Scientist Near
//--------------------------------------------------------------------------------------------------
bool gt_TutorialScientistNear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialScientist(gv_tutorial.lv_scientist);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialScientistNear_Init () {
    gt_TutorialScientistNear = TriggerCreate("gt_TutorialScientistNear_Func");
    TriggerEnable(gt_TutorialScientistNear, false);
    TriggerAddEventUnitRegion(gt_TutorialScientistNear, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists_OverlordCapture Tutorial Version
//--------------------------------------------------------------------------------------------------
bool gt_Scientists_OverlordCaptureTutorialVersion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCargo()) == "Scientist"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BaseOverlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(EventUnitCargo());
    gf_TutorialScientistcaptured(gv_baseOverlord[gv_tutorial.lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scientists_OverlordCaptureTutorialVersion_Init () {
    gt_Scientists_OverlordCaptureTutorialVersion = TriggerCreate("gt_Scientists_OverlordCaptureTutorialVersion_Func");
    TriggerEnable(gt_Scientists_OverlordCaptureTutorialVersion, false);
    TriggerAddEventUnitCargo(gt_Scientists_OverlordCaptureTutorialVersion, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Killed Brdge Controller
//--------------------------------------------------------------------------------------------------
bool gt_TutorialKilledBrdgeController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TutorialBridgeController(UnitFromId(973134657));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialKilledBrdgeController_Init () {
    gt_TutorialKilledBrdgeController = TriggerCreate("gt_TutorialKilledBrdgeController_Func");
    TriggerEnable(gt_TutorialKilledBrdgeController, false);
    TriggerAddEventUnitDied(gt_TutorialKilledBrdgeController, UnitRefFromUnit(UnitFromId(1799608622)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Enters Arena
//--------------------------------------------------------------------------------------------------
bool gt_TutorialEntersArena_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    gf_TutorialFortress(gv_partTerran.lv_fortress);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialEntersArena_Init () {
    gt_TutorialEntersArena = TriggerCreate("gt_TutorialEntersArena_Func");
    TriggerEnable(gt_TutorialEntersArena, false);
    TriggerAddEventUnitRegion(gt_TutorialEntersArena, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Fortress Dead
//--------------------------------------------------------------------------------------------------
bool gt_TutorialFortressDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_objectives.lv_bosses, c_objectiveStateCompleted);
    gf_TutorialFinish(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialFortressDead_Init () {
    gt_TutorialFortressDead = TriggerCreate("gt_TutorialFortressDead_Func");
    TriggerEnable(gt_TutorialFortressDead, false);
    TriggerAddEventUnitDied(gt_TutorialFortressDead, UnitRefFromVariable("gv_partTerran.lv_fortress"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Hero Dies Intercept
//--------------------------------------------------------------------------------------------------
bool gt_TutorialHeroDiesIntercept_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroUnitGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tutorial.lv_firstdeath == true)) {
        gf_TutorialHeroDies();
        gv_tutorial.lv_firstdeath = false;
        gv_tutorial.lv_tpbacktohive = true;
        UnitRevive(EventUnit());
        UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        libNtve_gf_ShowHideUnit(EventUnit(), false);
        UnitSetState(EventUnit(), c_unitStateStunned, true);
    }
    else {
        UnitRevive(EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        UnitSetPosition(EventUnit(), gv_enemy_ActivePart.lv_playerSpawnPoints[EventPlayer()], false);
        CameraPan(EventPlayer(), gv_enemy_ActivePart.lv_playerSpawnPoints[EventPlayer()], 1.0, -1, 10.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialHeroDiesIntercept_Init () {
    gt_TutorialHeroDiesIntercept = TriggerCreate("gt_TutorialHeroDiesIntercept_Func");
    TriggerEnable(gt_TutorialHeroDiesIntercept, false);
    TriggerAddEventUnitDied(gt_TutorialHeroDiesIntercept, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicStatsInterfaceUpdate
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicStatsInterfaceUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_StatsInterface_Update();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicStatsInterfaceUpdate_Init () {
    gt_PeriodicStatsInterfaceUpdate = TriggerCreate("gt_PeriodicStatsInterfaceUpdate_Func");
    TriggerEnable(gt_PeriodicStatsInterfaceUpdate, false);
    TriggerAddEventTimePeriodic(gt_PeriodicStatsInterfaceUpdate, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Votekick_KickButtonHandler
//--------------------------------------------------------------------------------------------------
bool gt_Votekick_KickButtonHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_kickPlayer;

    // Automatic Variable Declarations
    playergroup auto454D44CC_g;
    int auto454D44CC_var;

    // Variable Initialization
    lv_kickPlayer = gf_Votekick_GetKickDialogID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_kickPlayer >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_votekick.lv_votes[lv_kickPlayer][EventPlayer()] == false)) {
        gv_votekick.lv_votesCombined[lv_kickPlayer] += 1;
        gv_votekick.lv_votes[lv_kickPlayer][EventPlayer()] = true;
        libNtve_gf_SetDialogItemText(gv_votekick.lv_kickButtons[lv_kickPlayer], (TextWithColor(PlayerName(lv_kickPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_kickPlayer, false))) + StringToText(" (") + IntToText(gv_votekick.lv_votesCombined[lv_kickPlayer]) + StringToText("/") + IntToText(gv_votekick.lv_votesRequired) + StringToText(")")), gv_startingPlayerGroup);
        if ((gv_votekick.lv_firstTimeInitialized[lv_kickPlayer] == false)) {
            gv_votekick.lv_firstTimeInitialized[lv_kickPlayer] = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/Votekick/Init/Pre") + TextWithColor(PlayerName(lv_kickPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_kickPlayer, false))) + StringExternal("Trig/Votekick/Init/Post")));
        }

        if ((gv_votekick.lv_votesCombined[lv_kickPlayer] == gv_votekick.lv_votesRequired)) {
            if (gf_DevPlayer(lv_kickPlayer)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/Votekick/Admin/Pre") + TextWithColor(PlayerName(lv_kickPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_kickPlayer, false))) + StringExternal("Trig/Votekick/Admin/Post")));
                auto454D44CC_g = gv_startingPlayerGroup;
                auto454D44CC_var = -1;
                while (true) {
                    auto454D44CC_var = PlayerGroupNextPlayer(auto454D44CC_g, auto454D44CC_var);
                    if (auto454D44CC_var < 0) { break; }
                    gv_votekick.lv_votes[lv_kickPlayer][EventPlayer()] = false;
                    gv_votekick.lv_votesCombined[lv_kickPlayer] = 0;
                }
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/Votekick/Kick/Pre") + TextWithColor(PlayerName(lv_kickPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_kickPlayer, false))) + StringExternal("Trig/Votekick/Kick/Post")));
                gf_Save(lv_kickPlayer);
                GameOver(lv_kickPlayer, c_gameOverTie, false, true);
            }
        }

    }
    else {
        gv_votekick.lv_votesCombined[lv_kickPlayer] -= 1;
        gv_votekick.lv_votes[lv_kickPlayer][EventPlayer()] = false;
        libNtve_gf_SetDialogItemText(gv_votekick.lv_kickButtons[lv_kickPlayer], (TextWithColor(PlayerName(lv_kickPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_kickPlayer, false))) + StringToText(" (") + IntToText(gv_votekick.lv_votesCombined[lv_kickPlayer]) + StringToText("/") + IntToText(gv_votekick.lv_votesRequired) + StringToText(")")), gv_startingPlayerGroup);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Votekick_KickButtonHandler_Init () {
    gt_Votekick_KickButtonHandler = TriggerCreate("gt_Votekick_KickButtonHandler_Func");
    TriggerEnable(gt_Votekick_KickButtonHandler, false);
    TriggerAddEventDialogControl(gt_Votekick_KickButtonHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OptionsInterface_HeroSelection_CheckboxHandler
//--------------------------------------------------------------------------------------------------
bool gt_OptionsInterface_HeroSelection_CheckboxHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_options.lv_heroSelection_Checkbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
        gv_options.lv_heroSelection_Flag[lv_player] = true;
    }
    else {
        gv_options.lv_heroSelection_Flag[lv_player] = false;
    }
    gv_options.lv_saveFlag[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionsInterface_HeroSelection_CheckboxHandler_Init () {
    gt_OptionsInterface_HeroSelection_CheckboxHandler = TriggerCreate("gt_OptionsInterface_HeroSelection_CheckboxHandler_Func");
    TriggerEnable(gt_OptionsInterface_HeroSelection_CheckboxHandler, false);
    TriggerAddEventDialogControl(gt_OptionsInterface_HeroSelection_CheckboxHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OptionsInterface_HeroSelection_PulldownHandler
//--------------------------------------------------------------------------------------------------
bool gt_OptionsInterface_HeroSelection_PulldownHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_listIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_listIndex = DialogControlGetSelectedItem(EventDialogControl(), EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_options.lv_heroSelection_Pulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_options.lv_heroSelection_Hero[lv_player] = gv_options.lv_heroSelection_HeroListIndex[lv_player][lv_listIndex];
    DialogControlSelectItem(gv_options.lv_heroSelection_Pulldown, PlayerGroupSingle(lv_player), lv_listIndex);
    gv_options.lv_saveFlag[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionsInterface_HeroSelection_PulldownHandler_Init () {
    gt_OptionsInterface_HeroSelection_PulldownHandler = TriggerCreate("gt_OptionsInterface_HeroSelection_PulldownHandler_Func");
    TriggerEnable(gt_OptionsInterface_HeroSelection_PulldownHandler, false);
    TriggerAddEventDialogControl(gt_OptionsInterface_HeroSelection_PulldownHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OptionsInterface_ControlGroups_CheckboxHandler
//--------------------------------------------------------------------------------------------------
bool gt_OptionsInterface_ControlGroups_CheckboxHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_id = gf_OptionsInterface_ControlGroups_GetCheckboxID(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_id >= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
        gv_options.lv_controlGroup_Flag[lv_id][lv_player] = true;
    }
    else {
        gv_options.lv_controlGroup_Flag[lv_id][lv_player] = false;
    }
    gv_options.lv_saveFlag[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionsInterface_ControlGroups_CheckboxHandler_Init () {
    gt_OptionsInterface_ControlGroups_CheckboxHandler = TriggerCreate("gt_OptionsInterface_ControlGroups_CheckboxHandler_Func");
    TriggerEnable(gt_OptionsInterface_ControlGroups_CheckboxHandler, false);
    TriggerAddEventDialogControl(gt_OptionsInterface_ControlGroups_CheckboxHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OptionsInterface_ControlGroups_PulldownHandler
//--------------------------------------------------------------------------------------------------
bool gt_OptionsInterface_ControlGroups_PulldownHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_id;
    int lv_listIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_id = gf_OptionsInterface_ControlGroups_GetPulldownID(EventDialogControl());
    lv_listIndex = DialogControlGetSelectedItem(EventDialogControl(), EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lv_id >= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_listIndex == 10)) {
        gv_options.lv_controlGroup_Group[lv_id][lv_player] = 0;
    }
    else {
        gv_options.lv_controlGroup_Group[lv_id][lv_player] = lv_listIndex;
    }
    DialogControlSelectItem(gv_options.lv_controlGroup_Pulldown[lv_id], PlayerGroupSingle(lv_player), lv_listIndex);
    gv_options.lv_saveFlag[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionsInterface_ControlGroups_PulldownHandler_Init () {
    gt_OptionsInterface_ControlGroups_PulldownHandler = TriggerCreate("gt_OptionsInterface_ControlGroups_PulldownHandler_Func");
    TriggerEnable(gt_OptionsInterface_ControlGroups_PulldownHandler, false);
    TriggerAddEventDialogControl(gt_OptionsInterface_ControlGroups_PulldownHandler, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HiveDies
//--------------------------------------------------------------------------------------------------
bool gt_HiveDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto438F9FDA_g;
    int auto438F9FDA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_flawlessFlag = false;
    TriggerEnable(gt_HiveKillsAnything, false);
    TriggerEnable(gt_HiveDies, false);
    gv_baseHiveStatus = 0;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/HiveDies"));
    auto438F9FDA_g = gv_startingPlayerGroup;
    auto438F9FDA_var = -1;
    while (true) {
        auto438F9FDA_var = PlayerGroupNextPlayer(auto438F9FDA_g, auto438F9FDA_var);
        if (auto438F9FDA_var < 0) { break; }
        PlayerModifyPropertyInt(auto438F9FDA_var, c_playerPropTerrazine, c_playerPropOperSetTo, 1);
        VisRevealerDestroy(gv_enemy_ActivePart.lv_baseRevealer[auto438F9FDA_var]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDummyHiveDead", 0, auto438F9FDA_var, PointFromId(521895522));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HiveDies_Init () {
    gt_HiveDies = TriggerCreate("gt_HiveDies_Func");
    TriggerAddEventUnitDied(gt_HiveDies, UnitRefFromVariable("gv_baseHive"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: HiveKillsAnything
//--------------------------------------------------------------------------------------------------
bool gt_HiveKillsAnything_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == gv_baseHive))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_basePlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_flawlessFlag = false;
    TriggerEnable(gt_HiveKillsAnything, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HiveKillsAnything_Init () {
    gt_HiveKillsAnything = TriggerCreate("gt_HiveKillsAnything_Func");
    TriggerAddEventUnitDied(gt_HiveKillsAnything, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KickCheater
//--------------------------------------------------------------------------------------------------
bool gt_KickCheater_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(EventPlayer(), c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickCheater_Init () {
    gt_KickCheater = TriggerCreate("gt_KickCheater_Func");
    TriggerAddEventCheatUsed(gt_KickCheater, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroDies
//--------------------------------------------------------------------------------------------------
bool gt_HeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingUnit;
    int lv_tmpPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingUnit = EventUnit();
    lv_tmpPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_playerStats[lv_tmpPlayer].lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerStats[lv_tmpPlayer].lv_lifes > 0)) {
        gv_playerStats[lv_tmpPlayer].lv_lifes -= 1;
        UIDisplayMessage(PlayerGroupSingle(lv_tmpPlayer), c_messageAreaChat, (IntToText(gv_playerStats[lv_tmpPlayer].lv_lifes) + StringToText(" lives left.")));
        UnitRevive(lv_dyingUnit);
        UnitSetState(lv_dyingUnit, c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(lv_dyingUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv_dyingUnit, c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(lv_dyingUnit, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_ShowHideUnit(lv_dyingUnit, false);
        UnitSetState(lv_dyingUnit, c_unitStateStunned, true);
        Wait(5.0, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_baseOverlord[lv_tmpPlayer]), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
        CameraPan(lv_tmpPlayer, UnitGetPosition(gv_baseOverlord[lv_tmpPlayer]), 1.0, -1, 10.0, false);
        UnitSetPosition(lv_dyingUnit, UnitGetPosition(gv_baseOverlord[lv_tmpPlayer]), false);
        UnitSetState(lv_dyingUnit, c_unitStateInvulnerable, false);
        UnitSetState(lv_dyingUnit, c_unitStateStunned, false);
        libNtve_gf_ShowHideUnit(lv_dyingUnit, true);
    }
    else {
        gf_Leaderboard_SetCustomRank(EventPlayer(), StringExternal("Trig/PlayerDies/Rank"));
        gv_playerStats[EventPlayer()].lv_spectating = true;
        PlayerGroupAdd(gv_spectatingPlayerGroup, lv_tmpPlayer);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Trig/PlayerDies/Pre") + TextWithColor(PlayerName(lv_tmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_tmpPlayer, false))) + StringExternal("Trig/PlayerDies/Post")));
        DialogSetVisible(gv_customDefeatDialogVariables.lv_dialog, PlayerGroupSingle(lv_tmpPlayer), true);
        gf_RemoveActivePlayer(lv_tmpPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDies_Init () {
    gt_HeroDies = TriggerCreate("gt_HeroDies_Func");
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[1]"));
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[2]"));
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[3]"));
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[4]"));
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[5]"));
    TriggerAddEventUnitDied(gt_HeroDies, UnitRefFromVariable("gv_heroUnits[6]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave
//--------------------------------------------------------------------------------------------------
bool gt_Leave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_votekick.lv_kickButtons[EventPlayer()], gv_playerGroup, false);
    if ((gv_playerStats[EventPlayer()].lv_acvScoreRank_Custom == false)) {
        gf_Leaderboard_SetCustomRank(EventPlayer(), StringExternal("Trig/PlayerLeft/Rank"));
    }

    if ((PlayerGroupHasPlayer(gv_newPlayers, EventPlayer()) == true)) {
        PlayerGroupRemove(gv_newPlayers, EventPlayer());
        if ((PlayerGroupCount(gv_newPlayers) == 0)) {
            TriggerEnable(gt_Tutorial_CloseButtonHandlerminiintoduction, false);
            DialogControlDestroyAll(gv_tutorial.lv_smallinfo);
            DialogDestroy(gv_tutorial.lv_smallinfo);
        }

    }

    gv_playerStats[EventPlayer()].lv_spectating = false;
    PlayerGroupRemove(gv_spectatingPlayerGroup, EventPlayer());
    if ((gv_playerStats[EventPlayer()].lv_active == true)) {
        gf_RemoveActivePlayer(EventPlayer());
    }
    else {
        if ((PlayerGroupCount(gv_playerGroup) <= 2) && (PlayerGroupCount(gv_spectatingPlayerGroup) == 0)) {
            DialogControlSetEnabled(gv_menu.lv_votekick_Button, gv_startingPlayerGroup, false);
            libNtve_gf_SetDialogItemTooltip(gv_menu.lv_votekick_Button, StringExternal("Trig/Menu/VotekickRequirement"), gv_startingPlayerGroup);
            DialogControlSetVisible(gv_votekick.lv_mainFrame, PlayerGroupAll(), false);
        }
        else {
            DialogControlSetEnabled(gv_menu.lv_votekick_Button, gv_startingPlayerGroup, true);
            libNtve_gf_SetDialogItemTooltip(gv_menu.lv_votekick_Button, StringToText(""), gv_startingPlayerGroup);
            gf_Votekick_Reset();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leave_Init () {
    gt_Leave = TriggerCreate("gt_Leave_Func");
    TriggerAddEventPlayerLeft(gt_Leave, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravager Taunt
//--------------------------------------------------------------------------------------------------
bool gt_RavagerTaunt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_affectedUnits;
    unit lv_caster;
    int lv_tmpInt;

    // Automatic Variable Declarations
    unitgroup auto68292FA2_g;
    int auto68292FA2_u;
    unit auto68292FA2_var;
    const int auto6E4650FD_ae = 24;
    const int auto6E4650FD_ai = 1;
    unitgroup auto193094DB_g;
    int auto193094DB_u;
    unit auto193094DB_var;
    unitgroup auto84CF9854_g;
    int auto84CF9854_u;
    unit auto84CF9854_var;
    string auto8F41F5B2_val;

    // Variable Initialization
    lv_affectedUnits = UnitGroupEmpty();
    lv_caster = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto68292FA2_g = UnitGroup(null, gv_enemyPlayer, RegionCircle(UnitGetPosition(EventUnit()), 7.25), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68292FA2_u = UnitGroupCount(auto68292FA2_g, c_unitCountAll);
    for (;; auto68292FA2_u -= 1) {
        auto68292FA2_var = UnitGroupUnitFromEnd(auto68292FA2_g, auto68292FA2_u);
        if (auto68292FA2_var == null) { break; }
        if ((UnitHasBehavior2(auto68292FA2_var, "Untauntable") == false)) {
            UnitGroupAdd(lv_affectedUnits, auto68292FA2_var);
            UnitBehaviorAdd(auto68292FA2_var, "Taunted", lv_caster, 1);
        }

    }
    lv_tmpInt = 1;
    for ( ; ( (auto6E4650FD_ai >= 0 && lv_tmpInt <= auto6E4650FD_ae) || (auto6E4650FD_ai < 0 && lv_tmpInt >= auto6E4650FD_ae) ) ; lv_tmpInt += auto6E4650FD_ai ) {
        auto193094DB_g = lv_affectedUnits;
        auto193094DB_u = UnitGroupCount(auto193094DB_g, c_unitCountAll);
        for (;; auto193094DB_u -= 1) {
            auto193094DB_var = UnitGroupUnitFromEnd(auto193094DB_g, auto193094DB_u);
            if (auto193094DB_var == null) { break; }
            if ((UnitHasBehavior2(auto193094DB_var, "Taunted") == true) && (lv_caster == UnitBehaviorEffectUnit(auto193094DB_var, "Taunted", c_effectUnitCaster, 0))) {
                if ((UnitHasBehavior2(auto193094DB_var, "AlreadyCastingNoWeapons") == false)) {
                    if (((UnitGetType(auto193094DB_var) == "Bunker2") || (UnitGetType(auto193094DB_var) == "Bunker"))) {
                        UnitIssueOrder(auto193094DB_var, OrderTargetingUnit(AbilityCommand("AttackRedirect", 0), lv_caster), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(auto193094DB_var, OrderTargetingUnit(AbilityCommand("attack", 0), lv_caster), c_orderQueueReplace);
                    }
                }

            }
            else {
                UnitGroupRemove(lv_affectedUnits, auto193094DB_var);
            }
        }
        Wait(0.125, c_timeGame);
    }
    Wait(0.0625, c_timeGame);
    auto84CF9854_g = lv_affectedUnits;
    auto84CF9854_u = UnitGroupCount(auto84CF9854_g, c_unitCountAll);
    for (;; auto84CF9854_u -= 1) {
        auto84CF9854_var = UnitGroupUnitFromEnd(auto84CF9854_g, auto84CF9854_u);
        if (auto84CF9854_var == null) { break; }
        if ((lv_caster == UnitBehaviorEffectUnit(auto84CF9854_var, "Taunted", c_effectUnitCaster, 0))) {
            UnitBehaviorRemove(auto84CF9854_var, "Taunted", 1);
            if ((UnitTypeTestAttribute(UnitGetType(auto84CF9854_var), c_unitAttributeHeroic) == true)) {
                auto8F41F5B2_val = UnitGetType(auto84CF9854_var);
                if (auto8F41F5B2_val == "HellionTank2") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1286013135)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "PlanetaryFortress") {
                    UnitIssueOrder(auto84CF9854_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Thor") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(849038949)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Atlantis") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "AtlantisCore") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Illusion@AtlantisCore") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Lightning") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(695289334)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Thunder") {
                    UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(695289334)), c_orderQueueReplace);
                }
                else if (auto8F41F5B2_val == "Madness") {
                    UnitIssueOrder(auto84CF9854_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
                else {
                }
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(auto84CF9854_var), c_unitAttributeSummoned) == false)) {
                    if ((UnitHasBehavior2(auto84CF9854_var, "AttackWaypoint0") == true)) {
                        UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackWaypoint), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(auto84CF9854_var, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                    }
                }
                else {
                    UnitIssueOrder(auto84CF9854_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavagerTaunt_Init () {
    gt_RavagerTaunt = TriggerCreate("gt_RavagerTaunt_Func");
    TriggerAddEventUnitAbility(gt_RavagerTaunt, null, AbilityCommand("Taunt2", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Cybernetic Train
//--------------------------------------------------------------------------------------------------
bool gt_OverlordCyberneticTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unittype;
    int lv_id_from_options;

    // Automatic Variable Declarations
    string auto6ED12C3E_val;

    // Variable Initialization
    lv_unittype = UnitGetType(EventUnitProgressUnit());
    lv_id_from_options = 2;

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "CyberneticLurker") || (libNtve_gf_TriggeringProgressUnitType() == "Runling")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6ED12C3E_val = lv_unittype;
    if (auto6ED12C3E_val == "Lurker") {
        lv_id_from_options = 2;
    }
    else if (auto6ED12C3E_val == "Runling") {
        lv_id_from_options = 3;
    }
    else {
    }
    if ((gv_options.lv_controlGroup_Flag[lv_id_from_options][EventPlayer()] == true)) {
        UnitControlGroupAddUnit(EventPlayer(), gv_options.lv_controlGroup_Group[lv_id_from_options][EventPlayer()], EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordCyberneticTrain_Init () {
    gt_OverlordCyberneticTrain = TriggerCreate("gt_OverlordCyberneticTrain_Func");
    TriggerAddEventUnitTrainProgress(gt_OverlordCyberneticTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overlord Fly Back Home
//--------------------------------------------------------------------------------------------------
bool gt_OverlordFlyBackHome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_affectedUnits;
    int lv_owningPlayer;
    unit lv_overlord;

    // Automatic Variable Declarations
    unitgroup autoBA9CBB64_g;
    int autoBA9CBB64_u;
    unit autoBA9CBB64_var;
    unitgroup auto5D251477_g;
    int auto5D251477_u;
    unit auto5D251477_var;

    // Variable Initialization
    lv_affectedUnits = UnitGroupEmpty();
    lv_owningPlayer = UnitGetOwner(EventUnit());
    lv_overlord = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_overlord, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoBA9CBB64_g = UnitGroup(null, lv_owningPlayer, RegionCircle(UnitGetPosition(lv_overlord), 5.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA9CBB64_u = UnitGroupCount(autoBA9CBB64_g, c_unitCountAll);
    for (;; autoBA9CBB64_u -= 1) {
        autoBA9CBB64_var = UnitGroupUnitFromEnd(autoBA9CBB64_g, autoBA9CBB64_u);
        if (autoBA9CBB64_var == null) { break; }
        UnitIssueOrder(autoBA9CBB64_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupAdd(lv_affectedUnits, autoBA9CBB64_var);
        UnitBehaviorAddPlayer(autoBA9CBB64_var, "FlyBackHomeAffectedUnitBuff", lv_owningPlayer, 1);
        UnitSetState(autoBA9CBB64_var, c_unitStateHidden, true);
        UnitSetPosition(autoBA9CBB64_var, gv_enemy_ActivePart.lv_playerSpawnPoints[lv_owningPlayer], false);
    }
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_overlord, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(lv_overlord, gv_enemy_ActivePart.lv_playerSpawnPoints[lv_owningPlayer], false);
    Wait(10.0, c_timeGame);
    auto5D251477_g = lv_affectedUnits;
    auto5D251477_u = UnitGroupCount(auto5D251477_g, c_unitCountAll);
    for (;; auto5D251477_u -= 1) {
        auto5D251477_var = UnitGroupUnitFromEnd(auto5D251477_g, auto5D251477_u);
        if (auto5D251477_var == null) { break; }
        UnitIssueOrder(auto5D251477_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetState(auto5D251477_var, c_unitStateHidden, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverlordFlyBackHome_Init () {
    gt_OverlordFlyBackHome = TriggerCreate("gt_OverlordFlyBackHome_Func");
    TriggerAddEventUnitAbility(gt_OverlordFlyBackHome, null, AbilityCommand("FlyBackHome", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravager Decoy
//--------------------------------------------------------------------------------------------------
bool gt_RavagerDecoy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_factor = 0.7;
    unit lv_decoy;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_decoy = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_decoy, c_unitPropLifeMax, (lv_factor * UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)));
    UnitSetPropertyFixed(lv_decoy, c_unitPropLife, (lv_factor * UnitGetPropertyFixed(lv_caster, c_unitPropLife, c_unitPropCurrent)));
    CatalogFieldValueModify(c_gameCatalogUnit, "Decoy", "LifeArmor", UnitGetOwner(lv_caster), FixedToString((lv_factor * UnitGetPropertyFixed(lv_caster, c_unitPropLifeArmor, c_unitPropCurrent)), c_fixedPrecisionAny), c_upgradeOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavagerDecoy_Init () {
    gt_RavagerDecoy = TriggerCreate("gt_RavagerDecoy_Func");
    TriggerAddEventPlayerEffectUsed(gt_RavagerDecoy, c_playerAny, "DecoySpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Research
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "DmgUpgrade")) {
        gv_playerStats[lv_player].lv_upgrade_Dmg += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((gv_playerStats[lv_player].lv_upgrade_Dmg * 0.66))), c_upgradeOperationAdd);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "ArmorUpgrade")) {
        gv_playerStats[lv_player].lv_upgrade_Armor += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((gv_playerStats[lv_player].lv_upgrade_Armor * 0.66))), c_upgradeOperationAdd);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "SplashRangeUpgrade")) {
        gv_playerStats[lv_player].lv_upgrade_Splash += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((gv_playerStats[lv_player].lv_upgrade_Splash * 75.0))), c_upgradeOperationAdd);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "RegenerationUpgrade")) {
        gv_playerStats[lv_player].lv_upgrade_Regen += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[" + IntToString(3) + "].Resource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((gv_playerStats[lv_player].lv_upgrade_Regen * 150.0))), c_upgradeOperationAdd);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "AtkSpdUpgrade")) {
        gv_playerStats[lv_player].lv_upgrade_Atkspd += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((gv_playerStats[lv_player].lv_upgrade_Atkspd * 150.0))), c_upgradeOperationAdd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeResearch_Init () {
    gt_UpgradeResearch = TriggerCreate("gt_UpgradeResearch_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeResearch, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essences_Pickup
//--------------------------------------------------------------------------------------------------
bool gt_Essences_Pickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBD20F60A_g;
    int autoBD20F60A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/Essence/Collected/Pre") + TextWithColor(PlayerName(UnitGetOwner(EventUnitTargetUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false))) + StringExternal("Trig/Essence/Collected/Post")));
    autoBD20F60A_g = gv_playerGroup;
    autoBD20F60A_var = -1;
    while (true) {
        autoBD20F60A_var = PlayerGroupNextPlayer(autoBD20F60A_g, autoBD20F60A_var);
        if (autoBD20F60A_var < 0) { break; }
        gv_playerStats[autoBD20F60A_var].lv_essences += 1;
        gf_AcvEssences_UnlockCheck(autoBD20F60A_var);
        gf_Save(autoBD20F60A_var);
        gf_Reward_Spellpower(autoBD20F60A_var, (5.0 / gv_difficultyVariables.lv_essenceAmount));
    }
    gv_essences_Found += 1;
    ObjectiveSetName(gv_objectives.lv_essences, (StringExternal("Trig/Objectives/Essences/Pre") + IntToText(gv_essences_Found) + StringExternal("Trig/Objectives/Essences/Post")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Essences_Pickup_Init () {
    gt_Essences_Pickup = TriggerCreate("gt_Essences_Pickup_Func");
    TriggerAddEventUnitAbility(gt_Essences_Pickup, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scientists_OverlordCapture
//--------------------------------------------------------------------------------------------------
bool gt_Scientists_OverlordCapture_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDC6B779C_g;
    int autoDC6B779C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCargo()) == "Scientist"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "BaseOverlord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitCargo());
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/Scientist/Collected/Pre") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Trig/Scientist/Collected/Post")));
    gv_scientists_Found += 1;
    if ((gv_difficultyVariables.lv_scientistsAmount >= 2)) {
        ObjectiveSetName(gv_objectives.lv_scientists, (StringExternal("Trig/Objectives/Scientist/Two/Pre") + IntToText(gv_scientists_Found) + StringExternal("Trig/Objectives/Scientist/Two/Mid") + IntToText(gv_difficultyVariables.lv_scientistsAmount) + StringExternal("Trig/Objectives/Scientist/Two/Post")));
        if ((gv_difficultyVariables.lv_scientistsAmount == gv_scientists_Found)) {
            ObjectiveSetState(gv_objectives.lv_scientists, c_objectiveStateCompleted);
        }

    }
    else {
        ObjectiveSetState(gv_objectives.lv_scientists, c_objectiveStateCompleted);
    }
    autoDC6B779C_g = gv_playerGroup;
    autoDC6B779C_var = -1;
    while (true) {
        autoDC6B779C_var = PlayerGroupNextPlayer(autoDC6B779C_g, autoDC6B779C_var);
        if (autoDC6B779C_var < 0) { break; }
        gv_playerStats[autoDC6B779C_var].lv_scientists += 1;
        gf_AcvScientists_UnlockCheck(autoDC6B779C_var);
        gf_Save(autoDC6B779C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scientists_OverlordCapture_Init () {
    gt_Scientists_OverlordCapture = TriggerCreate("gt_Scientists_OverlordCapture_Func");
    TriggerEnable(gt_Scientists_OverlordCapture, false);
    TriggerAddEventUnitCargo(gt_Scientists_OverlordCapture, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PsiOrbs_Pickup
//--------------------------------------------------------------------------------------------------
bool gt_PsiOrbs_Pickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto691178A7_g;
    int auto691178A7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/PsiOrb/Collected/Pre") + TextWithColor(PlayerName(UnitGetOwner(EventUnitTargetUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false))) + StringExternal("Trig/PsiOrb/Collected/Post")));
    auto691178A7_g = gv_playerGroup;
    auto691178A7_var = -1;
    while (true) {
        auto691178A7_var = PlayerGroupNextPlayer(auto691178A7_g, auto691178A7_var);
        if (auto691178A7_var < 0) { break; }
        gv_playerStats[auto691178A7_var].lv_psiOrbs += 1;
        gf_AcvPsiOrbs_UnlockCheck(auto691178A7_var);
        gf_Save(auto691178A7_var);
    }
    ObjectiveSetState(gv_objectives.lv_psiOrbs, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiOrbs_Pickup_Init () {
    gt_PsiOrbs_Pickup = TriggerCreate("gt_PsiOrbs_Pickup_Func");
    TriggerAddEventUnitAbility(gt_PsiOrbs_Pickup, null, AbilityCommand("PsiOrbTriggerHandle", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy_IdleReset
//--------------------------------------------------------------------------------------------------
bool gt_Enemy_IdleReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBEF2AEC8_g;
    int autoBEF2AEC8_u;
    unit autoBEF2AEC8_var;
    string auto2A27A906_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEF2AEC8_g = UnitGroupIdle(gv_enemyPlayer, false);
    autoBEF2AEC8_u = UnitGroupCount(autoBEF2AEC8_g, c_unitCountAll);
    for (;; autoBEF2AEC8_u -= 1) {
        autoBEF2AEC8_var = UnitGroupUnitFromEnd(autoBEF2AEC8_g, autoBEF2AEC8_u);
        if (autoBEF2AEC8_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoBEF2AEC8_var, gv_enemy_ActivePart.lv_region) == true) && (libNtve_gf_UnitInRegion(autoBEF2AEC8_var, gv_enemy_ActivePart.lv_base) == false) && (UnitTypeTestAttribute(UnitGetType(autoBEF2AEC8_var), c_unitAttributeHeroic) == false) && (UnitTypeTestAttribute(UnitGetType(autoBEF2AEC8_var), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(autoBEF2AEC8_var), c_unitAttributeSummoned) == false) && (UnitGetType(autoBEF2AEC8_var) != "WidowMine2") && (UnitGetType(autoBEF2AEC8_var) != "WidowMine22") && (UnitGetType(autoBEF2AEC8_var) != "VoidMine") && (UnitGetType(autoBEF2AEC8_var) != "TransportPrism") && (UnitGetType(autoBEF2AEC8_var) != "TransportEscort")) {
            UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
        }
        else {
            auto2A27A906_val = UnitGetType(autoBEF2AEC8_var);
            if (auto2A27A906_val == "HellionTank2") {
                UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1286013135)), c_orderQueueReplace);
            }
            else if (auto2A27A906_val == "Thor") {
                UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(849038949)), c_orderQueueReplace);
            }
            else if (auto2A27A906_val == "Atlantis") {
                UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
            }
            else if (auto2A27A906_val == "AtlantisCore") {
                UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
            }
            else if (auto2A27A906_val == "Illusion@AtlantisCore") {
                UnitIssueOrder(autoBEF2AEC8_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(415973082)), c_orderQueueReplace);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enemy_IdleReset_Init () {
    gt_Enemy_IdleReset = TriggerCreate("gt_Enemy_IdleReset_Func");
    TriggerAddEventTimer(gt_Enemy_IdleReset, gv_idleTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran_KillTriggerBase
//--------------------------------------------------------------------------------------------------
bool gt_Terran_KillTriggerBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_enemyPlayer))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((!((UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure) == true) || (UnitTypeTestAttribute(lv_unitType, c_unitAttributeSummoned) == true)))) {
        gv_spawnAmount -= 1;
    }
    else {
        if (((lv_unitType == "Bunker") || (lv_unitType == "Bunker2"))) {
            gv_spawnAmount += 4;
        }

    }
    if ((PlayerGroupHasPlayer(gv_playerGroup, libNtve_gf_KillingPlayer()) == true)) {
        gf_KillCounterIncrement(libNtve_gf_KillingPlayer());
        gf_Terran_Biomass_KillIncome(UnitGetType(EventUnit()), UnitGetPosition(EventUnit()), gf_Terran_GetEnemyType(lv_unitType));
        gf_Terran_Exp_KillIncome(UnitGetType(EventUnit()), gf_Terran_GetEnemyType(lv_unitType));
        if (((UnitHasBehavior2(EventUnit(), "SpawnerJunker") == true) || (UnitHasBehavior2(EventUnit(), "SpawnerBlackOps") == true))) {
            gf_Terran_SpawnerDied(EventUnit(), libNtve_gf_KillingUnit());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Terran_KillTriggerBase_Init () {
    gt_Terran_KillTriggerBase = TriggerCreate("gt_Terran_KillTriggerBase_Func");
    TriggerAddEventUnitDied(gt_Terran_KillTriggerBase, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran_PartTransition
//--------------------------------------------------------------------------------------------------
bool gt_Terran_PartTransition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Terran_PartTransition();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Terran_PartTransition_Init () {
    gt_Terran_PartTransition = TriggerCreate("gt_Terran_PartTransition_Func");
    TriggerAddEventUnitAbility(gt_Terran_PartTransition, null, AbilityCommand("TerranPartTransition", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Observer_Stationary
//--------------------------------------------------------------------------------------------------
bool gt_Observer_Stationary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_waypoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ObserverStationaryStandDelay", "PeriodicPeriodArray[" + IntToString(2) + "]", c_playerAny) + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ObserverStationaryStandDelay", "PeriodicPeriodArray[" + IntToString(3) + "]", c_playerAny)), c_timeGame);
    gv_partTerran.lv_observer.lv_currentWaypoint += 1;
    if ((gv_partTerran.lv_observer.lv_currentWaypoint == 11)) {
        gv_partTerran.lv_observer.lv_currentWaypoint = 0;
    }

    if ((gv_partTerran.lv_observer.lv_currentWaypoint == 4)) {
        UnitIssueOrder(gv_partTerran.lv_observer.lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_partTerran.lv_observer.lv_waypoints[gv_partTerran.lv_observer.lv_currentWaypoint]), c_orderQueueReplace);
        gv_partTerran.lv_observer.lv_currentWaypoint += 1;
        UnitIssueOrder(gv_partTerran.lv_observer.lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_partTerran.lv_observer.lv_waypoints[gv_partTerran.lv_observer.lv_currentWaypoint]), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_partTerran.lv_observer.lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), gv_partTerran.lv_observer.lv_waypoints[gv_partTerran.lv_observer.lv_currentWaypoint]), c_orderQueueReplace);
    }
    UnitIssueOrder(gv_partTerran.lv_observer.lv_unit, Order(AbilityCommand("ObserverStationary", 0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Observer_Stationary_Init () {
    gt_Observer_Stationary = TriggerCreate("gt_Observer_Stationary_Func");
    TriggerAddEventUnitAbility(gt_Observer_Stationary, null, AbilityCommand("ObserverStationary", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Observer Death
//--------------------------------------------------------------------------------------------------
bool gt_ObserverDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF4523EBA_g;
    int autoF4523EBA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_Observer_Stationary);
    TriggerEnable(gt_Observer_Stationary, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_partTerran.lv_observer.lv_alive = false;
    if ((gv_enemy_ActivePart.lv_obejctiveDefeatedCount == gv_enemy_ActivePart.lv_objectiveCount)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Observer/KillAfterBosses"));
        autoF4523EBA_g = gv_playerGroup;
        autoF4523EBA_var = -1;
        while (true) {
            autoF4523EBA_var = PlayerGroupNextPlayer(autoF4523EBA_g, autoF4523EBA_var);
            if (autoF4523EBA_var < 0) { break; }
            UnitBehaviorAddPlayer(gv_baseOverlord[autoF4523EBA_var], "TerranPartTransitionBuff", autoF4523EBA_var, 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Observer/KillBeforeBosses"));
    }
    ObjectiveSetState(gv_objectives.lv_observer, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObserverDeath_Init () {
    gt_ObserverDeath = TriggerCreate("gt_ObserverDeath_Func");
    TriggerAddEventUnitDied(gt_ObserverDeath, UnitRefFromVariable("gv_partTerran.lv_observer.lv_unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran_Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Terran_Spawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitSpawnType;
    int lv_unitSpawnAmount;

    // Automatic Variable Declarations
    unitgroup auto719BD728_g;
    int auto719BD728_u;
    unit auto719BD728_var;
    unitgroup auto4E558C98_g;
    int auto4E558C98_u;
    unit auto4E558C98_var;
    unitgroup auto8CF8E8B3_g;
    int auto8CF8E8B3_u;
    unit auto8CF8E8B3_var;
    unitgroup auto423A37DD_g;
    int auto423A37DD_u;
    unit auto423A37DD_var;
    unitgroup auto1DD75757_g;
    int auto1DD75757_u;
    unit auto1DD75757_var;
    unitgroup autoC2EDDAFF_g;
    int autoC2EDDAFF_u;
    unit autoC2EDDAFF_var;
    unitgroup auto21FDE8EE_g;
    int auto21FDE8EE_u;
    unit auto21FDE8EE_var;
    unitgroup auto9BDD289B_g;
    int auto9BDD289B_u;
    unit auto9BDD289B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spawnAmount <= gv_spawnLimit)) {
        if ((gv_partTerran.lv_junker_First == true)) {
            auto719BD728_g = gv_partTerran.lv_junker_First_Spawner;
            auto719BD728_u = UnitGroupCount(auto719BD728_g, c_unitCountAll);
            for (;; auto719BD728_u -= 1) {
                auto719BD728_var = UnitGroupUnitFromEnd(auto719BD728_g, auto719BD728_u);
                if (auto719BD728_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto719BD728_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto719BD728_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto719BD728_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_junker_Second == true)) {
            auto4E558C98_g = gv_partTerran.lv_junker_Second_Spawner;
            auto4E558C98_u = UnitGroupCount(auto4E558C98_g, c_unitCountAll);
            for (;; auto4E558C98_u -= 1) {
                auto4E558C98_var = UnitGroupUnitFromEnd(auto4E558C98_g, auto4E558C98_u);
                if (auto4E558C98_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto4E558C98_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto4E558C98_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto4E558C98_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_junker_Third == true)) {
            auto8CF8E8B3_g = gv_partTerran.lv_junker_Third_Spawner;
            auto8CF8E8B3_u = UnitGroupCount(auto8CF8E8B3_g, c_unitCountAll);
            for (;; auto8CF8E8B3_u -= 1) {
                auto8CF8E8B3_var = UnitGroupUnitFromEnd(auto8CF8E8B3_g, auto8CF8E8B3_u);
                if (auto8CF8E8B3_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto8CF8E8B3_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto8CF8E8B3_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto8CF8E8B3_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_blackOps_First == true)) {
            auto423A37DD_g = gv_partTerran.lv_blackOps_First_Spawner;
            auto423A37DD_u = UnitGroupCount(auto423A37DD_g, c_unitCountAll);
            for (;; auto423A37DD_u -= 1) {
                auto423A37DD_var = UnitGroupUnitFromEnd(auto423A37DD_g, auto423A37DD_u);
                if (auto423A37DD_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto423A37DD_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto423A37DD_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto423A37DD_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_blackOps_Second == true)) {
            auto1DD75757_g = gv_partTerran.lv_blackOps_Second_Spawner;
            auto1DD75757_u = UnitGroupCount(auto1DD75757_g, c_unitCountAll);
            for (;; auto1DD75757_u -= 1) {
                auto1DD75757_var = UnitGroupUnitFromEnd(auto1DD75757_g, auto1DD75757_u);
                if (auto1DD75757_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto1DD75757_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto1DD75757_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto1DD75757_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_blackOps_Third == true)) {
            autoC2EDDAFF_g = gv_partTerran.lv_blackOps_Third_Spawner;
            autoC2EDDAFF_u = UnitGroupCount(autoC2EDDAFF_g, c_unitCountAll);
            for (;; autoC2EDDAFF_u -= 1) {
                autoC2EDDAFF_var = UnitGroupUnitFromEnd(autoC2EDDAFF_g, autoC2EDDAFF_u);
                if (autoC2EDDAFF_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(autoC2EDDAFF_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(autoC2EDDAFF_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(autoC2EDDAFF_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partTerran.lv_mix_First == true)) {
            auto21FDE8EE_g = gv_partTerran.lv_mix_First_Spawner;
            auto21FDE8EE_u = UnitGroupCount(auto21FDE8EE_g, c_unitCountAll);
            for (;; auto21FDE8EE_u -= 1) {
                auto21FDE8EE_var = UnitGroupUnitFromEnd(auto21FDE8EE_g, auto21FDE8EE_u);
                if (auto21FDE8EE_var == null) { break; }
                lv_unitSpawnType = gf_Terran_SpawnsList_UnitType(UnitGetType(auto21FDE8EE_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Terran_SpawnsList_Amount(UnitGetType(auto21FDE8EE_var)) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto21FDE8EE_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if (((gv_spawnLimit * 0.95) <= gv_spawnAmount)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/SpawnLimitClose"));
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/SpawnLimitReached"));
        auto9BDD289B_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9BDD289B_u = UnitGroupCount(auto9BDD289B_g, c_unitCountAll);
        for (;; auto9BDD289B_u -= 1) {
            auto9BDD289B_var = UnitGroupUnitFromEnd(auto9BDD289B_g, auto9BDD289B_u);
            if (auto9BDD289B_var == null) { break; }
            UnitBehaviorAddPlayer(auto9BDD289B_var, "InvulnerableOverSpawnLimit", gv_enemyPlayer, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Terran_Spawns_Init () {
    gt_Terran_Spawns = TriggerCreate("gt_Terran_Spawns_Func");
    TriggerAddEventTimer(gt_Terran_Spawns, gv_spawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker_Second_DepotKill
//--------------------------------------------------------------------------------------------------
bool gt_Junker_Second_DepotKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Junker_Secend_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Junker_Second_DepotKill_Init () {
    gt_Junker_Second_DepotKill = TriggerCreate("gt_Junker_Second_DepotKill_Func");
    TriggerAddEventUnitDied(gt_Junker_Second_DepotKill, UnitRefFromUnit(UnitFromId(1022123575)));
    TriggerAddEventUnitDied(gt_Junker_Second_DepotKill, UnitRefFromUnit(UnitFromId(1630323472)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker_Third_DepotKill
//--------------------------------------------------------------------------------------------------
bool gt_Junker_Third_DepotKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Junker_Third_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Junker_Third_DepotKill_Init () {
    gt_Junker_Third_DepotKill = TriggerCreate("gt_Junker_Third_DepotKill_Func");
    TriggerAddEventUnitDied(gt_Junker_Third_DepotKill, UnitRefFromUnit(UnitFromId(997781902)));
    TriggerAddEventUnitDied(gt_Junker_Third_DepotKill, UnitRefFromUnit(UnitFromId(650347227)));
    TriggerAddEventUnitDied(gt_Junker_Third_DepotKill, UnitRefFromUnit(UnitFromId(1064280768)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: BlackOps_Second_DepotKill
//--------------------------------------------------------------------------------------------------
bool gt_BlackOps_Second_DepotKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BlackOps_Second_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackOps_Second_DepotKill_Init () {
    gt_BlackOps_Second_DepotKill = TriggerCreate("gt_BlackOps_Second_DepotKill_Func");
    TriggerAddEventUnitDied(gt_BlackOps_Second_DepotKill, UnitRefFromUnit(UnitFromId(1202075025)));
    TriggerAddEventUnitDied(gt_BlackOps_Second_DepotKill, UnitRefFromUnit(UnitFromId(1452376089)));
    TriggerAddEventUnitDied(gt_BlackOps_Second_DepotKill, UnitRefFromUnit(UnitFromId(831974724)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: BlackOps_Third_DepotKill
//--------------------------------------------------------------------------------------------------
bool gt_BlackOps_Third_DepotKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BlackOps_Third_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackOps_Third_DepotKill_Init () {
    gt_BlackOps_Third_DepotKill = TriggerCreate("gt_BlackOps_Third_DepotKill_Func");
    TriggerAddEventUnitDied(gt_BlackOps_Third_DepotKill, UnitRefFromUnit(UnitFromId(885477964)));
    TriggerAddEventUnitDied(gt_BlackOps_Third_DepotKill, UnitRefFromUnit(UnitFromId(1431657588)));
    TriggerAddEventUnitDied(gt_BlackOps_Third_DepotKill, UnitRefFromUnit(UnitFromId(1488864233)));
    TriggerAddEventUnitDied(gt_BlackOps_Third_DepotKill, UnitRefFromUnit(UnitFromId(991816375)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_Bridge_Flamer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_Bridge_Flamer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(115921541), Order(AbilityCommand("ExtendingBridgeNWShort10Out", 0)), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Bridge/Flamer"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_Bridge_Flamer_Init () {
    gt_PartTerran_Bridge_Flamer = TriggerCreate("gt_PartTerran_Bridge_Flamer_Func");
    TriggerAddEventUnitDied(gt_PartTerran_Bridge_Flamer, UnitRefFromUnit(UnitFromId(1907513494)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_Bridge_Fortress
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_Bridge_Fortress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(973134657), Order(AbilityCommand("ExtendingBridgeNEWide12Out", 0)), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Bridge/Fortress"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_Bridge_Fortress_Init () {
    gt_PartTerran_Bridge_Fortress = TriggerCreate("gt_PartTerran_Bridge_Fortress_Func");
    TriggerAddEventUnitDied(gt_PartTerran_Bridge_Fortress, UnitRefFromUnit(UnitFromId(1799608622)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_Bridge_Hammer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_Bridge_Hammer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(1946364426), Order(AbilityCommand("ExtendingBridgeNWShort12Out", 0)), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Bridge/Hammer"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_Bridge_Hammer_Init () {
    gt_PartTerran_Bridge_Hammer = TriggerCreate("gt_PartTerran_Bridge_Hammer_Func");
    TriggerAddEventUnitDied(gt_PartTerran_Bridge_Hammer, UnitRefFromUnit(UnitFromId(31112027)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossReturn_Flamer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossReturn_Flamer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HellionTank2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Taunted", 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1286013135)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossReturn_Flamer_Init () {
    gt_PartTerran_BossReturn_Flamer = TriggerCreate("gt_PartTerran_BossReturn_Flamer_Func");
    TriggerAddEventUnitRegion(gt_PartTerran_BossReturn_Flamer, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossReturn_Hammer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossReturn_Hammer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Thor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Taunted", 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(849038949)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossReturn_Hammer_Init () {
    gt_PartTerran_BossReturn_Hammer = TriggerCreate("gt_PartTerran_BossReturn_Hammer_Func");
    TriggerAddEventUnitRegion(gt_PartTerran_BossReturn_Hammer, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossSpawner_Flamer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossSpawner_Flamer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "HellionTank2", 0, gv_enemyPlayer, PointFromId(1286013135), 305.0);
    gv_partTerran.lv_hellbat = UnitLastCreated();
    TriggerEnable(gt_PartTerran_BossDies_Flamer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossSpawner_Flamer_Init () {
    gt_PartTerran_BossSpawner_Flamer = TriggerCreate("gt_PartTerran_BossSpawner_Flamer_Func");
    TriggerAddEventUnitRegion(gt_PartTerran_BossSpawner_Flamer, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossDies_Flamer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossDies_Flamer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup auto151C0E62_g;
    int auto151C0E62_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_playerStats[lv_killer].lv_bossTFlamerKills[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossTFlamerKills[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Flamer"));
        gf_AcvBossKills_Flamer_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_Flamer_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 1, "Flamer");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+10"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    auto151C0E62_g = gv_playerGroup;
    auto151C0E62_var = -1;
    while (true) {
        auto151C0E62_var = PlayerGroupNextPlayer(auto151C0E62_g, auto151C0E62_var);
        if (auto151C0E62_var < 0) { break; }
        PlayerModifyPropertyInt(auto151C0E62_var, c_playerPropVespene, c_playerPropOperAdd, 10);
    }
    gf_GainPoints();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossDies_Flamer_Init () {
    gt_PartTerran_BossDies_Flamer = TriggerCreate("gt_PartTerran_BossDies_Flamer_Func");
    TriggerEnable(gt_PartTerran_BossDies_Flamer, false);
    TriggerAddEventUnitDied(gt_PartTerran_BossDies_Flamer, UnitRefFromVariable("gv_partTerran.lv_hellbat"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossSpawner_Hammer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossSpawner_Hammer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Thor", 0, gv_enemyPlayer, PointFromId(849038949), 135.0);
    gv_partTerran.lv_thor = UnitLastCreated();
    TriggerEnable(gt_PartTerran_BossDies_Hammer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossSpawner_Hammer_Init () {
    gt_PartTerran_BossSpawner_Hammer = TriggerCreate("gt_PartTerran_BossSpawner_Hammer_Func");
    TriggerAddEventUnitRegion(gt_PartTerran_BossSpawner_Hammer, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossDies_Hammer
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossDies_Hammer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup autoFEB0320B_g;
    int autoFEB0320B_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_playerStats[lv_killer].lv_bossTHammerKills[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossTHammerKills[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Hammer"));
        gf_AcvBossKills_Hammer_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_Hammer_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 1, "Hammer");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+10"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    autoFEB0320B_g = gv_playerGroup;
    autoFEB0320B_var = -1;
    while (true) {
        autoFEB0320B_var = PlayerGroupNextPlayer(autoFEB0320B_g, autoFEB0320B_var);
        if (autoFEB0320B_var < 0) { break; }
        PlayerModifyPropertyInt(autoFEB0320B_var, c_playerPropVespene, c_playerPropOperAdd, 10);
    }
    gf_GainPoints();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossDies_Hammer_Init () {
    gt_PartTerran_BossDies_Hammer = TriggerCreate("gt_PartTerran_BossDies_Hammer_Func");
    TriggerEnable(gt_PartTerran_BossDies_Hammer, false);
    TriggerAddEventUnitDied(gt_PartTerran_BossDies_Hammer, UnitRefFromVariable("gv_partTerran.lv_thor"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossSpawner_Fortress
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossSpawner_Fortress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetaryFortress", 0, gv_enemyPlayer, PointFromId(269914470));
    gv_partTerran.lv_fortress = UnitLastCreated();
    TriggerEnable(gt_PartTerran_BossDies_Fortress, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossSpawner_Fortress_Init () {
    gt_PartTerran_BossSpawner_Fortress = TriggerCreate("gt_PartTerran_BossSpawner_Fortress_Func");
    TriggerAddEventUnitRegion(gt_PartTerran_BossSpawner_Fortress, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartTerran_BossDies_Fortress
//--------------------------------------------------------------------------------------------------
bool gt_PartTerran_BossDies_Fortress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup auto2F26D145_g;
    int auto2F26D145_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_playerStats[lv_killer].lv_bossTFortressKills[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossTFortressKills[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Fortress"));
        gf_AcvBossKills_Fortress_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_Fortress_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 1, "Fortress");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+10"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    auto2F26D145_g = gv_playerGroup;
    auto2F26D145_var = -1;
    while (true) {
        auto2F26D145_var = PlayerGroupNextPlayer(auto2F26D145_g, auto2F26D145_var);
        if (auto2F26D145_var < 0) { break; }
        PlayerModifyPropertyInt(auto2F26D145_var, c_playerPropVespene, c_playerPropOperAdd, 10);
    }
    gf_GainPoints();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartTerran_BossDies_Fortress_Init () {
    gt_PartTerran_BossDies_Fortress = TriggerCreate("gt_PartTerran_BossDies_Fortress_Func");
    TriggerEnable(gt_PartTerran_BossDies_Fortress, false);
    TriggerAddEventUnitDied(gt_PartTerran_BossDies_Fortress, UnitRefFromVariable("gv_partTerran.lv_fortress"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss_KillTriggerBase
//--------------------------------------------------------------------------------------------------
bool gt_Protoss_KillTriggerBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_enemyPlayer))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((!((UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure) == true) || (UnitTypeTestAttribute(lv_unitType, c_unitAttributeSummoned) == true)))) {
        gv_spawnAmount -= 1;
    }

    if ((PlayerGroupHasPlayer(gv_playerGroup, libNtve_gf_KillingPlayer()) == true)) {
        gf_KillCounterIncrement(libNtve_gf_KillingPlayer());
        gf_Protoss_Biomass_KillIncome(lv_unitType, UnitGetPosition(EventUnit()), gf_Protoss_GetEnemyType(lv_unitType));
        gf_Protoss_Exp_KillIncome(lv_unitType, gf_Protoss_GetEnemyType(lv_unitType));
        if ((UnitHasBehavior2(EventUnit(), "EnemyPSpawner") == true)) {
            gf_Protoss_SpawnerDied(EventUnit(), libNtve_gf_KillingUnit());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protoss_KillTriggerBase_Init () {
    gt_Protoss_KillTriggerBase = TriggerCreate("gt_Protoss_KillTriggerBase_Func");
    TriggerEnable(gt_Protoss_KillTriggerBase, false);
    TriggerAddEventUnitDied(gt_Protoss_KillTriggerBase, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss_Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Protoss_Spawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitSpawnType;
    int lv_unitSpawnAmount;
    unit lv_loopUnit;
    int lv_random;

    // Automatic Variable Declarations
    unitgroup auto79F27646_g;
    int auto79F27646_u;
    unit auto79F27646_var;
    unitgroup autoFEF2BE05_g;
    int autoFEF2BE05_u;
    unit autoFEF2BE05_var;
    unitgroup autoE90354AB_g;
    int autoE90354AB_u;
    unit autoE90354AB_var;
    unitgroup autoFC835762_g;
    int autoFC835762_u;
    unit autoFC835762_var;
    unitgroup auto8733F464_g;
    int auto8733F464_u;
    unitgroup autoCC10F7A2_g;
    int autoCC10F7A2_u;
    unit autoCC10F7A2_var;
    unitgroup auto9C3D2878_g;
    int auto9C3D2878_u;
    unitgroup auto604BB087_g;
    int auto604BB087_u;
    unit auto604BB087_var;
    unitgroup autoE63D59CA_g;
    int autoE63D59CA_u;
    unitgroup autoF739C2A5_g;
    int autoF739C2A5_u;
    unit autoF739C2A5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spawnAmount <= gv_spawnLimit)) {
        if ((gv_partProtoss.lv_mech_First == true)) {
            auto79F27646_g = gv_partProtoss.lv_mech_First_Spawner;
            auto79F27646_u = UnitGroupCount(auto79F27646_g, c_unitCountAll);
            for (;; auto79F27646_u -= 1) {
                auto79F27646_var = UnitGroupUnitFromEnd(auto79F27646_g, auto79F27646_u);
                if (auto79F27646_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(auto79F27646_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto79F27646_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partProtoss.lv_mech_Second == true)) {
            autoFEF2BE05_g = gv_partProtoss.lv_mech_Second_Spawner;
            autoFEF2BE05_u = UnitGroupCount(autoFEF2BE05_g, c_unitCountAll);
            for (;; autoFEF2BE05_u -= 1) {
                autoFEF2BE05_var = UnitGroupUnitFromEnd(autoFEF2BE05_g, autoFEF2BE05_u);
                if (autoFEF2BE05_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(autoFEF2BE05_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(autoFEF2BE05_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partProtoss.lv_psi_First == true)) {
            autoE90354AB_g = gv_partProtoss.lv_psi_First_Spawner;
            autoE90354AB_u = UnitGroupCount(autoE90354AB_g, c_unitCountAll);
            for (;; autoE90354AB_u -= 1) {
                autoE90354AB_var = UnitGroupUnitFromEnd(autoE90354AB_g, autoE90354AB_u);
                if (autoE90354AB_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(autoE90354AB_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(autoE90354AB_var));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                }

            }
        }

        if ((gv_partProtoss.lv_psi_Second == true)) {
            autoFC835762_g = gv_partProtoss.lv_psi_Second_Spawner;
            autoFC835762_u = UnitGroupCount(autoFC835762_g, c_unitCountAll);
            for (;; autoFC835762_u -= 1) {
                autoFC835762_var = UnitGroupUnitFromEnd(autoFC835762_g, autoFC835762_u);
                if (autoFC835762_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(autoFC835762_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(autoFC835762_var));
                    auto8733F464_g = UnitLastCreatedGroup();
                    auto8733F464_u = UnitGroupCount(auto8733F464_g, c_unitCountAll);
                    for (;; auto8733F464_u -= 1) {
                        lv_loopUnit = UnitGroupUnitFromEnd(auto8733F464_g, auto8733F464_u);
                        if (lv_loopUnit == null) { break; }
                        UnitBehaviorAddPlayer(lv_loopUnit, "AttackWaypoint0", gv_enemyPlayer, 1);
                        UnitIssueOrder(lv_loopUnit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackWaypoint), c_orderQueueReplace);
                    }
                }

            }
        }

        if ((gv_partProtoss.lv_psi_Third == true)) {
            autoCC10F7A2_g = gv_partProtoss.lv_psi_Third_Spawner;
            autoCC10F7A2_u = UnitGroupCount(autoCC10F7A2_g, c_unitCountAll);
            for (;; autoCC10F7A2_u -= 1) {
                autoCC10F7A2_var = UnitGroupUnitFromEnd(autoCC10F7A2_g, autoCC10F7A2_u);
                if (autoCC10F7A2_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(autoCC10F7A2_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(autoCC10F7A2_var));
                    auto9C3D2878_g = UnitLastCreatedGroup();
                    auto9C3D2878_u = UnitGroupCount(auto9C3D2878_g, c_unitCountAll);
                    for (;; auto9C3D2878_u -= 1) {
                        lv_loopUnit = UnitGroupUnitFromEnd(auto9C3D2878_g, auto9C3D2878_u);
                        if (lv_loopUnit == null) { break; }
                        UnitBehaviorAddPlayer(lv_loopUnit, "AttackWaypoint0", gv_enemyPlayer, 1);
                        UnitIssueOrder(lv_loopUnit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackWaypoint), c_orderQueueReplace);
                    }
                }

            }
        }

        if ((gv_partProtoss.lv_mix_First == true)) {
            auto604BB087_g = gv_partProtoss.lv_mix_First_Spawner;
            auto604BB087_u = UnitGroupCount(auto604BB087_g, c_unitCountAll);
            for (;; auto604BB087_u -= 1) {
                auto604BB087_var = UnitGroupUnitFromEnd(auto604BB087_g, auto604BB087_u);
                if (auto604BB087_var == null) { break; }
                lv_unitSpawnType = gf_Protoss_SpawnsList_UnitType(UnitGetType(auto604BB087_var));
                if ((lv_unitSpawnType != "")) {
                    lv_unitSpawnAmount = CeilingI((gf_Protoss_SpawnsList_Amount(lv_unitSpawnType) * gv_difficultyVariables.lv_spawnMult));
                    gv_spawnAmount += lv_unitSpawnAmount;
                    libNtve_gf_CreateUnitsWithDefaultFacing(lv_unitSpawnAmount, lv_unitSpawnType, 0, gv_enemyPlayer, UnitGetPosition(auto604BB087_var));
                    autoE63D59CA_g = UnitLastCreatedGroup();
                    autoE63D59CA_u = UnitGroupCount(autoE63D59CA_g, c_unitCountAll);
                    for (;; autoE63D59CA_u -= 1) {
                        lv_loopUnit = UnitGroupUnitFromEnd(autoE63D59CA_g, autoE63D59CA_u);
                        if (lv_loopUnit == null) { break; }
                        lv_random = RandomInt(0, 1);
                        if ((lv_random == 1)) {
                            UnitBehaviorAddPlayer(lv_loopUnit, "AttackWaypoint0", gv_enemyPlayer, 1);
                            UnitIssueOrder(lv_loopUnit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackWaypoint), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_loopUnit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
                        }
                    }
                }

            }
        }

        if (((gv_spawnLimit * 0.95) <= gv_spawnAmount)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/SpawnLimitClose"));
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/SpawnLimitReached"));
        autoF739C2A5_g = UnitGroup(null, gv_enemyPlayer, gv_enemy_ActivePart.lv_region, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF739C2A5_u = UnitGroupCount(autoF739C2A5_g, c_unitCountAll);
        for (;; autoF739C2A5_u -= 1) {
            autoF739C2A5_var = UnitGroupUnitFromEnd(autoF739C2A5_g, autoF739C2A5_u);
            if (autoF739C2A5_var == null) { break; }
            UnitBehaviorAddPlayer(autoF739C2A5_var, "InvulnerableOverSpawnLimit", gv_enemyPlayer, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protoss_Spawns_Init () {
    gt_Protoss_Spawns = TriggerCreate("gt_Protoss_Spawns_Func");
    TriggerEnable(gt_Protoss_Spawns, false);
    TriggerAddEventTimer(gt_Protoss_Spawns, gv_spawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss_WaypointRemover
//--------------------------------------------------------------------------------------------------
bool gt_Protoss_WaypointRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_enemyPlayer))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AttackWaypoint0") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "AttackWaypoint0", gv_enemyPlayer, 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_enemy_ActivePart.lv_attackPoint), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Protoss_WaypointRemover_Init () {
    gt_Protoss_WaypointRemover = TriggerCreate("gt_Protoss_WaypointRemover_Func");
    TriggerAddEventUnitRegion(gt_Protoss_WaypointRemover, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech_Second_ObeliskKill
//--------------------------------------------------------------------------------------------------
bool gt_Mech_Second_ObeliskKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Mech_Secend_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mech_Second_ObeliskKill_Init () {
    gt_Mech_Second_ObeliskKill = TriggerCreate("gt_Mech_Second_ObeliskKill_Func");
    TriggerEnable(gt_Mech_Second_ObeliskKill, false);
    TriggerAddEventUnitDied(gt_Mech_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(318432417)));
    TriggerAddEventUnitDied(gt_Mech_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(641877470)));
    TriggerAddEventUnitDied(gt_Mech_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(471267836)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi_Second_ObeliskKill
//--------------------------------------------------------------------------------------------------
bool gt_Psi_Second_ObeliskKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Psi_Second_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Psi_Second_ObeliskKill_Init () {
    gt_Psi_Second_ObeliskKill = TriggerCreate("gt_Psi_Second_ObeliskKill_Func");
    TriggerEnable(gt_Psi_Second_ObeliskKill, false);
    TriggerAddEventUnitDied(gt_Psi_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(100309099)));
    TriggerAddEventUnitDied(gt_Psi_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(564106641)));
    TriggerAddEventUnitDied(gt_Psi_Second_ObeliskKill, UnitRefFromUnit(UnitFromId(535555060)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi_Third_ObeliskKill
//--------------------------------------------------------------------------------------------------
bool gt_Psi_Third_ObeliskKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Psi_Third_Open();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Psi_Third_ObeliskKill_Init () {
    gt_Psi_Third_ObeliskKill = TriggerCreate("gt_Psi_Third_ObeliskKill_Func");
    TriggerEnable(gt_Psi_Third_ObeliskKill, false);
    TriggerAddEventUnitDied(gt_Psi_Third_ObeliskKill, UnitRefFromUnit(UnitFromId(1684392452)));
    TriggerAddEventUnitDied(gt_Psi_Third_ObeliskKill, UnitRefFromUnit(UnitFromId(1626463167)));
    TriggerAddEventUnitDied(gt_Psi_Third_ObeliskKill, UnitRefFromUnit(UnitFromId(467473478)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossSpawner_Madness
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossSpawner_Madness_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD5934DFC_g;
    int autoD5934DFC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Madness", 0, gv_enemyPlayer, PointFromId(2068921531), 270.0);
    gv_partProtoss.lv_madness = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotTalon", 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 0.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_enemyPlayer, 1);
    UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerTalon", 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 2.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_enemyPlayer, 1);
    UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryTalon", 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 2.0, 2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_enemyPlayer, 1);
    UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InterceptorTalon", 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), -2.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_enemyPlayer, 1);
    UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTalon", 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), -2.0, 2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_enemyPlayer, 1);
    UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());

    TriggerEnable(gt_PartProtoss_BossDies_Madness, true);
    autoD5934DFC_g = PlayerGroupAll();
    autoD5934DFC_var = -1;
    while (true) {
        autoD5934DFC_var = PlayerGroupNextPlayer(autoD5934DFC_g, autoD5934DFC_var);
        if (autoD5934DFC_var < 0) { break; }
        VisRevealArea(autoD5934DFC_var, RegionFromId(34), 0.0625, false);
    }
    gf_PartProtoss_BossSpawner_Madness_InitVars();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossSpawner_Madness_Init () {
    gt_PartProtoss_BossSpawner_Madness = TriggerCreate("gt_PartProtoss_BossSpawner_Madness_Func");
    TriggerEnable(gt_PartProtoss_BossSpawner_Madness, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossSpawner_Madness, UnitRefFromUnit(UnitFromId(2104120799)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossDies_Madness
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossDies_Madness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    unitgroup autoDD1DA0D4_g;
    int autoDD1DA0D4_u;
    unit autoDD1DA0D4_var;
    playergroup auto3E5549AB_g;
    int auto3E5549AB_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MadnessVitalsMonitor, false);
    TriggerEnable(gt_MadnessTimer, false);
    autoDD1DA0D4_g = UnitGroup(null, gv_enemyPlayer, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD1DA0D4_u = UnitGroupCount(autoDD1DA0D4_g, c_unitCountAll);
    for (;; autoDD1DA0D4_u -= 1) {
        autoDD1DA0D4_var = UnitGroupUnitFromEnd(autoDD1DA0D4_g, autoDD1DA0D4_u);
        if (autoDD1DA0D4_var == null) { break; }
        UnitBehaviorRemove(autoDD1DA0D4_var, "MadnessStructureOff", 1);
        UnitBehaviorRemove(autoDD1DA0D4_var, "MadnessStructureOn", 1);
    }
    gf_MadnessClearArena();
    if ((gv_playerStats[lv_killer].lv_bossPMadness[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossPMadness[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Madness"));
        gf_AcvBossKills_Madness_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_Madness_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 2, "Madness");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+10"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    auto3E5549AB_g = gv_playerGroup;
    auto3E5549AB_var = -1;
    while (true) {
        auto3E5549AB_var = PlayerGroupNextPlayer(auto3E5549AB_g, auto3E5549AB_var);
        if (auto3E5549AB_var < 0) { break; }
        PlayerModifyPropertyInt(auto3E5549AB_var, c_playerPropVespene, c_playerPropOperAdd, 10);
    }
    gf_GainPoints();
    gf_Mix_First_Opener_Check();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossDies_Madness_Init () {
    gt_PartProtoss_BossDies_Madness = TriggerCreate("gt_PartProtoss_BossDies_Madness_Func");
    TriggerEnable(gt_PartProtoss_BossDies_Madness, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossDies_Madness, UnitRefFromVariable("gv_partProtoss.lv_madness"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Madness Vitals Monitor
//--------------------------------------------------------------------------------------------------
bool gt_MadnessVitalsMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vitals;

    // Automatic Variable Declarations
    unitgroup autoE31A5779_g;
    int autoE31A5779_u;
    unit autoE31A5779_var;

    // Variable Initialization
    lv_vitals = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_partProtoss.lv_madnessVars.lv_phase == 0) && (lv_vitals <= 175.0)) {
        gf_MadnessPhaseTransition();
        UnitBehaviorAdd(gv_partProtoss.lv_madness, "MadnessEnrage", gv_partProtoss.lv_madness, 1);
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 1) && (lv_vitals <= 150.0)) {
        gf_MadnessPhaseTransition();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_partProtoss.lv_madnessVars.lv_minibosses[0], 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 0.0, -2.0));
        UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 2) && (lv_vitals <= 125.0)) {
        gf_MadnessPhaseTransition();
        UnitBehaviorAdd(gv_partProtoss.lv_madness, "MadnessEnrage", gv_partProtoss.lv_madness, 1);
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 3) && (lv_vitals <= 100.0)) {
        gf_MadnessPhaseTransition();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_partProtoss.lv_madnessVars.lv_minibosses[1], 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 0.0, -2.0));
        UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 4) && (lv_vitals <= 75.0)) {
        gf_MadnessPhaseTransition();
        UnitBehaviorAdd(gv_partProtoss.lv_madness, "MadnessEnrage", gv_partProtoss.lv_madness, 1);
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 5) && (lv_vitals <= 50.0)) {
        gf_MadnessPhaseTransition();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_partProtoss.lv_madnessVars.lv_minibosses[2], 0, gv_enemyPlayer, PointWithOffset(PointFromId(2068921531), 0.0, -2.0));
        UnitCreateEffectUnit(EventUnit(), "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 6) && (lv_vitals <= 25.0)) {
        gf_MadnessPhaseTransition();
        UnitBehaviorAdd(gv_partProtoss.lv_madness, "MadnessEnrage", gv_partProtoss.lv_madness, 1);
    }
    else if ((gv_partProtoss.lv_madnessVars.lv_phase == 7) && (lv_vitals <= 15.0)) {
        gf_MadnessPhaseTransition();
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "ProbeTalon", 0, gv_enemyPlayer, PointFromId(2068921531));
        autoE31A5779_g = UnitLastCreatedGroup();
        autoE31A5779_u = UnitGroupCount(autoE31A5779_g, c_unitCountAll);
        for (;; autoE31A5779_u -= 1) {
            autoE31A5779_var = UnitGroupUnitFromEnd(autoE31A5779_g, autoE31A5779_u);
            if (autoE31A5779_var == null) { break; }
            UnitCreateEffectUnit(EventUnit(), "TrackerAddProbe", autoE31A5779_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MadnessVitalsMonitor_Init () {
    gt_MadnessVitalsMonitor = TriggerCreate("gt_MadnessVitalsMonitor_Func");
    TriggerEnable(gt_MadnessVitalsMonitor, false);
    TriggerAddEventUnitDamaged(gt_MadnessVitalsMonitor, UnitRefFromVariable("gv_partProtoss.lv_madness"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Madness Timer
//--------------------------------------------------------------------------------------------------
bool gt_MadnessTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_flag;
    int lv_timerThreshold;

    // Automatic Variable Declarations
    unitgroup autoBB8C61C7_g;
    int autoBB8C61C7_u;
    unit autoBB8C61C7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerThreshold = 42;
    lv_timerThreshold -= (gv_playerAmount * 2);
    autoBB8C61C7_g = UnitGroup(null, c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBB8C61C7_u = UnitGroupCount(autoBB8C61C7_g, c_unitCountAll);
    for (;; autoBB8C61C7_u -= 1) {
        autoBB8C61C7_var = UnitGroupUnitFromEnd(autoBB8C61C7_g, autoBB8C61C7_u);
        if (autoBB8C61C7_var == null) { break; }
        if ((PlayerGroupHasPlayer(gv_playerGroup, UnitGetOwner(autoBB8C61C7_var)) == true)) {
            lv_flag = true;
            break;
        }

    }
    if ((lv_flag == true)) {
        gv_partProtoss.lv_madnessVars.lv_timer += 1;
        if ((gv_partProtoss.lv_madnessVars.lv_timer >= lv_timerThreshold)) {
            gf_MadnessActivateSet(gf_MadnessReturnNotLastSetID());
            gv_partProtoss.lv_madnessVars.lv_timer = 0;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MadnessTimer_Init () {
    gt_MadnessTimer = TriggerCreate("gt_MadnessTimer_Func");
    TriggerEnable(gt_MadnessTimer, false);
    TriggerAddEventTimePeriodic(gt_MadnessTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossSpawner_TagTeam
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossSpawner_TagTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tagTeamController;

    // Automatic Variable Declarations
    unitgroup auto56C12019_g;
    int auto56C12019_u;
    unit auto56C12019_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TagTeamHandler", 0, gv_enemyPlayer, PointFromId(695289334));
    lv_tagTeamController = UnitLastCreated();
    Wait(0.125, c_timeGame);
    auto56C12019_g = UnitGroup(null, gv_enemyPlayer, RegionCircle(PointFromId(695289334), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56C12019_u = UnitGroupCount(auto56C12019_g, c_unitCountAll);
    for (;; auto56C12019_u -= 1) {
        auto56C12019_var = UnitGroupUnitFromEnd(auto56C12019_g, auto56C12019_u);
        if (auto56C12019_var == null) { break; }
        if ((UnitGetType(auto56C12019_var) == "Thunder")) {
            gv_partProtoss.lv_tagTeamThunder = auto56C12019_var;
        }
        else {
            if ((UnitGetType(auto56C12019_var) == "Lightning")) {
                gv_partProtoss.lv_tagTeamLightning = auto56C12019_var;
            }

        }
    }
    TriggerEnable(gt_PartProtoss_BossDies_TagTeamThunder, true);
    TriggerEnable(gt_PartProtoss_BossDies_TagTeamLightning, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossSpawner_TagTeam_Init () {
    gt_PartProtoss_BossSpawner_TagTeam = TriggerCreate("gt_PartProtoss_BossSpawner_TagTeam_Func");
    TriggerEnable(gt_PartProtoss_BossSpawner_TagTeam, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossSpawner_TagTeam, UnitRefFromUnit(UnitFromId(2009472328)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossDies_TagTeam Thunder
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossDies_TagTeamThunder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup auto729E4C5A_g;
    int auto729E4C5A_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_partProtoss.lv_tagTeamLightning) == true) && (gv_difficulty >= 2)) {
        UnitBehaviorAdd(gv_partProtoss.lv_tagTeamLightning, "HandOfLightning", gv_partProtoss.lv_tagTeamLightning, 1);
    }

    if ((gv_playerStats[lv_killer].lv_bossPTagTeamThunder[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossPTagTeamThunder[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Thunder"));
        gf_AcvBossKills_TTThunder_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_TTThunder_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 2, "Thunder");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+5"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    auto729E4C5A_g = gv_playerGroup;
    auto729E4C5A_var = -1;
    while (true) {
        auto729E4C5A_var = PlayerGroupNextPlayer(auto729E4C5A_g, auto729E4C5A_var);
        if (auto729E4C5A_var < 0) { break; }
        PlayerModifyPropertyInt(auto729E4C5A_var, c_playerPropVespene, c_playerPropOperAdd, 5);
    }
    gf_GainPoints();
    gf_Mix_First_Opener_Check();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossDies_TagTeamThunder_Init () {
    gt_PartProtoss_BossDies_TagTeamThunder = TriggerCreate("gt_PartProtoss_BossDies_TagTeamThunder_Func");
    TriggerEnable(gt_PartProtoss_BossDies_TagTeamThunder, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossDies_TagTeamThunder, UnitRefFromVariable("gv_partProtoss.lv_tagTeamThunder"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossDies_TagTeam Lightning
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossDies_TagTeamLightning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup auto3BCCAF1A_g;
    int auto3BCCAF1A_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_partProtoss.lv_tagTeamThunder) == true) && (gv_difficulty >= 2)) {
        UnitBehaviorAdd(gv_partProtoss.lv_tagTeamThunder, "HandsOfSilence", gv_partProtoss.lv_tagTeamThunder, 1);
    }

    if ((gv_playerStats[lv_killer].lv_bossPTagTeamLightning[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossPTagTeamLightning[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Lightning"));
        gf_AcvBossKills_TTLightning_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_TTLightning_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 2, "Lightning");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+5"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    auto3BCCAF1A_g = gv_playerGroup;
    auto3BCCAF1A_var = -1;
    while (true) {
        auto3BCCAF1A_var = PlayerGroupNextPlayer(auto3BCCAF1A_g, auto3BCCAF1A_var);
        if (auto3BCCAF1A_var < 0) { break; }
        PlayerModifyPropertyInt(auto3BCCAF1A_var, c_playerPropVespene, c_playerPropOperAdd, 5);
    }
    gf_GainPoints();
    gf_Mix_First_Opener_Check();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossDies_TagTeamLightning_Init () {
    gt_PartProtoss_BossDies_TagTeamLightning = TriggerCreate("gt_PartProtoss_BossDies_TagTeamLightning_Func");
    TriggerEnable(gt_PartProtoss_BossDies_TagTeamLightning, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossDies_TagTeamLightning, UnitRefFromVariable("gv_partProtoss.lv_tagTeamLightning"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossSpawner_Atlantis
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossSpawner_Atlantis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Atlantis", 0, gv_enemyPlayer, PointFromId(415973082), 180.0);
    gv_partProtoss.lv_atlantis = UnitLastCreated();
    TriggerEnable(gt_PartProtoss_BossDies_Atlantis, true);
    TriggerEnable(gt_AtlantisCoreIllusions, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossSpawner_Atlantis_Init () {
    gt_PartProtoss_BossSpawner_Atlantis = TriggerCreate("gt_PartProtoss_BossSpawner_Atlantis_Func");
    TriggerEnable(gt_PartProtoss_BossSpawner_Atlantis, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossSpawner_Atlantis, UnitRefFromUnit(UnitFromId(1461303459)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartProtoss_BossDies_Atlantis
//--------------------------------------------------------------------------------------------------
bool gt_PartProtoss_BossDies_Atlantis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;
    int lv_textTag;

    // Automatic Variable Declarations
    playergroup autoDBAEE5CD_g;
    int autoDBAEE5CD_var;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_playerStats[lv_killer].lv_bossPAtlantis[gv_difficulty] == false) && (gv_difficulty < gv_maxAmountDifficulties)) {
        gv_playerStats[lv_killer].lv_bossPAtlantis[gv_difficulty] = true;
        UIDisplayMessage(PlayerGroupSingle(lv_killer), c_messageAreaSubtitle, StringExternal("Trig/AcvUnlock/Atlantis"));
        gf_AcvBossKills_Atlantis_Rewards(lv_killer, gv_difficulty);
        gf_AcvBossKills_Atlantis_UI(lv_killer);
        gf_AcvInterface_SendNotification(lv_killer, 2, "Atlantis");
        gf_Save(lv_killer);
    }

    TextTagCreate(TextWithColor(StringToText("+10"), Color(100.00, 25.10, 0.00)), 24, UnitGetPosition(EventUnit()), 1.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    lv_textTag = TextTagLastCreated();
    autoDBAEE5CD_g = gv_playerGroup;
    autoDBAEE5CD_var = -1;
    while (true) {
        autoDBAEE5CD_var = PlayerGroupNextPlayer(autoDBAEE5CD_g, autoDBAEE5CD_var);
        if (autoDBAEE5CD_var < 0) { break; }
        PlayerModifyPropertyInt(autoDBAEE5CD_var, c_playerPropVespene, c_playerPropOperAdd, 10);
    }
    gf_GainPoints();
    Wait(5.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartProtoss_BossDies_Atlantis_Init () {
    gt_PartProtoss_BossDies_Atlantis = TriggerCreate("gt_PartProtoss_BossDies_Atlantis_Func");
    TriggerEnable(gt_PartProtoss_BossDies_Atlantis, false);
    TriggerAddEventUnitDied(gt_PartProtoss_BossDies_Atlantis, UnitRefFromVariable("gv_partProtoss.lv_atlantis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Atlantis Core Illusions
//--------------------------------------------------------------------------------------------------
bool gt_AtlantisCoreIllusions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_maxAmountColors = 4;
    const int lv_maxAmountIllusions = 3;
    int[lv_maxAmountColors + 1] lv_coloringarray;
    int lv_tmpInt;
    int lv_rng;
    unit[4] lv_illusions;
    int lv_tmpInt_2;

    // Automatic Variable Declarations
    unitgroup auto8413C0C4_g;
    int auto8413C0C4_u;
    unit auto8413C0C4_var;
    int autoD9251834_ae;
    const int autoD9251834_ai = 1;
    int autoF4CC377A_ae;
    const int autoF4CC377A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "Illusion@Delay", "ExpireDelay", c_playerAny) + 0.0625), c_timeGame);
    auto8413C0C4_g = UnitGetTrackedUnitGroup(gv_partProtoss.lv_atlantis, "Illusion@Tracker");
    auto8413C0C4_u = UnitGroupCount(auto8413C0C4_g, c_unitCountAll);
    for (;; auto8413C0C4_u -= 1) {
        auto8413C0C4_var = UnitGroupUnitFromEnd(auto8413C0C4_g, auto8413C0C4_u);
        if (auto8413C0C4_var == null) { break; }
        if ((auto8413C0C4_var != gv_partProtoss.lv_atlantis)) {
            lv_illusions[lv_tmpInt] = auto8413C0C4_var;
            lv_tmpInt += 1;
            gf_CopyVitals(gv_partProtoss.lv_atlantis, auto8413C0C4_var);
        }

    }
    autoD9251834_ae = (lv_maxAmountColors - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoD9251834_ai >= 0 && lv_tmpInt <= autoD9251834_ae) || (autoD9251834_ai < 0 && lv_tmpInt >= autoD9251834_ae) ) ; lv_tmpInt += autoD9251834_ai ) {
        lv_coloringarray[lv_tmpInt] = lv_tmpInt;
    }
    lv_rng = RandomInt(0, (lv_maxAmountColors - 1));
    ActorSend(libNtve_gf_MainActorofUnit(gv_partProtoss.lv_atlantis), (("Signal Color" + IntToString(lv_coloringarray[lv_rng]))));
    ActorSend(libNtve_gf_MainActorofUnit(gv_partProtoss.lv_pylonColossus), (("Signal Color" + IntToString(lv_coloringarray[lv_rng]))));
    lv_coloringarray[lv_rng] = lv_coloringarray[(lv_maxAmountColors - 1)];
    autoF4CC377A_ae = (lv_maxAmountIllusions - 1);
    lv_tmpInt = 0;
    for ( ; ( (autoF4CC377A_ai >= 0 && lv_tmpInt <= autoF4CC377A_ae) || (autoF4CC377A_ai < 0 && lv_tmpInt >= autoF4CC377A_ae) ) ; lv_tmpInt += autoF4CC377A_ai ) {
        lv_rng = RandomInt(0, (lv_maxAmountColors - (lv_tmpInt + 2)));
        ActorSend(libNtve_gf_MainActorofUnit(lv_illusions[lv_tmpInt]), (("Signal Color" + IntToString(lv_coloringarray[lv_rng]))));
        lv_coloringarray[lv_rng] = lv_coloringarray[(lv_maxAmountColors - (lv_tmpInt + 2))];
    }
    Wait(20.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_partProtoss.lv_pylonColossus), ("Signal Clear"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AtlantisCoreIllusions_Init () {
    gt_AtlantisCoreIllusions = TriggerCreate("gt_AtlantisCoreIllusions_Func");
    TriggerEnable(gt_AtlantisCoreIllusions, false);
    TriggerAddEventUnitAbility(gt_AtlantisCoreIllusions, UnitRefFromVariable("gv_partProtoss.lv_atlantis"), AbilityCommand("Illusion", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: dance baby
//--------------------------------------------------------------------------------------------------
bool gt_dancebaby_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf_DevPlayer(EventPlayer()) || (gv_playerStats[EventPlayer()].lv_allowDanceCommand == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(gv_partProtoss.lv_tagTeamLightning), "Signal dance");
    ActorSend(libNtve_gf_MainActorofUnit(gv_partProtoss.lv_tagTeamThunder), "Signal dance");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dancebaby_Init () {
    gt_dancebaby = TriggerCreate("gt_dancebaby_Func");
    TriggerAddEventChatMessage(gt_dancebaby, c_playerAny, "-dance", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInitialization_Init();
    gt_BankPeriodicSave_Init();
    gt_ManualSave_Init();
    gt_HeroSelect_HeroButtonHandler_Init();
    gt_HeroSelect_ReadyButtonHandler_Init();
    gt_HeroSelect_DiffButtonHandler_Init();
    gt_HeroSelect_AutoSelection_ButtonHandler_Init();
    gt_HeroSelect_Timer_Init();
    gt_HeroSelect_CustomDiff_EditboxEdits_Init();
    gt_HeroSelect_CustomDiff_DiffPresetHandler_Init();
    gt_HeroSelect_CustomDiff_CustomPreset_CreateButton_Init();
    gt_HeroSelect_CustomDiff_CustomPreset_InputChanged_Init();
    gt_HeroSelect_CustomDiff_CustomPreset_LoadButton_Init();
    gt_CustomDefeatDialog_SpectateButton_Init();
    gt_CustomDefeatDialog_LeaveButton_Init();
    gt_Tutorial_CloseButtonHandlerminiintoduction_Init();
    gt_TutorialAskingYesButton_Init();
    gt_TutorialAskingNoButton_Init();
    gt_TutorialClose_Init();
    gt_Terran_SpawnsTutorialVersion_Init();
    gt_TutorialFirstAttackWaveComes_Init();
    gt_TutorialAfter2ndAttackWave_Init();
    gt_TutorialMoveOut_Init();
    gt_TutorialFirstSpawnerNearDead_Init();
    gt_TutorialWidowMinesKilled_Init();
    gt_TutorialLarvaNear_Init();
    gt_Essences_PickupTutorialVersion_Init();
    gt_TutorialScientistNear_Init();
    gt_Scientists_OverlordCaptureTutorialVersion_Init();
    gt_TutorialKilledBrdgeController_Init();
    gt_TutorialEntersArena_Init();
    gt_TutorialFortressDead_Init();
    gt_TutorialHeroDiesIntercept_Init();
    gt_PeriodicStatsInterfaceUpdate_Init();
    gt_Votekick_KickButtonHandler_Init();
    gt_OptionsInterface_HeroSelection_CheckboxHandler_Init();
    gt_OptionsInterface_HeroSelection_PulldownHandler_Init();
    gt_OptionsInterface_ControlGroups_CheckboxHandler_Init();
    gt_OptionsInterface_ControlGroups_PulldownHandler_Init();
    gt_HiveDies_Init();
    gt_HiveKillsAnything_Init();
    gt_KickCheater_Init();
    gt_HeroDies_Init();
    gt_Leave_Init();
    gt_RavagerTaunt_Init();
    gt_OverlordCyberneticTrain_Init();
    gt_OverlordFlyBackHome_Init();
    gt_RavagerDecoy_Init();
    gt_UpgradeResearch_Init();
    gt_Essences_Pickup_Init();
    gt_Scientists_OverlordCapture_Init();
    gt_PsiOrbs_Pickup_Init();
    gt_Enemy_IdleReset_Init();
    gt_Terran_KillTriggerBase_Init();
    gt_Terran_PartTransition_Init();
    gt_Observer_Stationary_Init();
    gt_ObserverDeath_Init();
    gt_Terran_Spawns_Init();
    gt_Junker_Second_DepotKill_Init();
    gt_Junker_Third_DepotKill_Init();
    gt_BlackOps_Second_DepotKill_Init();
    gt_BlackOps_Third_DepotKill_Init();
    gt_PartTerran_Bridge_Flamer_Init();
    gt_PartTerran_Bridge_Fortress_Init();
    gt_PartTerran_Bridge_Hammer_Init();
    gt_PartTerran_BossReturn_Flamer_Init();
    gt_PartTerran_BossReturn_Hammer_Init();
    gt_PartTerran_BossSpawner_Flamer_Init();
    gt_PartTerran_BossDies_Flamer_Init();
    gt_PartTerran_BossSpawner_Hammer_Init();
    gt_PartTerran_BossDies_Hammer_Init();
    gt_PartTerran_BossSpawner_Fortress_Init();
    gt_PartTerran_BossDies_Fortress_Init();
    gt_Protoss_KillTriggerBase_Init();
    gt_Protoss_Spawns_Init();
    gt_Protoss_WaypointRemover_Init();
    gt_Mech_Second_ObeliskKill_Init();
    gt_Psi_Second_ObeliskKill_Init();
    gt_Psi_Third_ObeliskKill_Init();
    gt_PartProtoss_BossSpawner_Madness_Init();
    gt_PartProtoss_BossDies_Madness_Init();
    gt_MadnessVitalsMonitor_Init();
    gt_MadnessTimer_Init();
    gt_PartProtoss_BossSpawner_TagTeam_Init();
    gt_PartProtoss_BossDies_TagTeamThunder_Init();
    gt_PartProtoss_BossDies_TagTeamLightning_Init();
    gt_PartProtoss_BossSpawner_Atlantis_Init();
    gt_PartProtoss_BossDies_Atlantis_Init();
    gt_AtlantisCoreIllusions_Init();
    gt_dancebaby_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
