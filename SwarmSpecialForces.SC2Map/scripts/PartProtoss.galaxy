static int partProtoss_Mix_First_OpenerCount;
static int PartProtoss_TagTeam_SecretEnable_Count;

unit PartProtoss_Lightning_GetUnit(){
    return gv_Bosses[c_Bosses_PLightning];
}
unit PartProtoss_Thunder_GetUnit(){
    return gv_Bosses[c_Bosses_PThunder];
}

// areas
static trigger PartProtoss_AreaMech_Second_ObeliskKill_Trigger;
static trigger PartProtoss_AreaPsi_Second_ObeliskKill_Trigger;
static trigger PartProtoss_AreaPsi_Third_ObeliskKill_Trigger;

static void PartProtoss_AreaMech_Upgrade(fixed multiplier){
    int tmpInt;
    const int amountEntries = 34;
    string[amountEntries] entry;
    const int amountEntries2 = 21;
    string[amountEntries2] entry2;

    entry[tmpInt] = "CyberneticsCoreAncient";
    tmpInt += 1;
    entry[tmpInt] = "CyberneticsCorePurifier";
    tmpInt += 1;
    entry[tmpInt] = "ForgePurifier";
    tmpInt += 1;
    entry[tmpInt] = "GatewayPurifier";
    tmpInt += 1;
    entry[tmpInt] = "GatewayStandard";
    tmpInt += 1;
    entry[tmpInt] = "MonolithAncient";
    tmpInt += 1;
    entry[tmpInt] = "MonolithStandard";
    tmpInt += 1;
    entry[tmpInt] = "NexusAncient";
    tmpInt += 1;
    entry[tmpInt] = "NexusPurifier";
    tmpInt += 1;
    entry[tmpInt] = "PhotonCannonAncient";
    tmpInt += 1;
    entry[tmpInt] = "PhotonCannonPurifier";
    tmpInt += 1;
    entry[tmpInt] = "PylonAncient";
    tmpInt += 1;
    entry[tmpInt] = "PylonPurifier";
    tmpInt += 1;
    entry[tmpInt] = "PylonStandard";
    tmpInt += 1;
    entry[tmpInt] = "RoboticsBayAncient";
    tmpInt += 1;
    entry[tmpInt] = "RoboticsBayPurifier";
    tmpInt += 1;
    entry[tmpInt] = "RoboticsFacilityAncient";
    tmpInt += 1;
    entry[tmpInt] = "RoboticsFacilityPurifier";
    tmpInt += 1;
    entry[tmpInt] = "VoidContainmentAncient";
    tmpInt += 1;
    entry[tmpInt] = "VoidContainmentStandard";
    tmpInt += 1;
    entry[tmpInt] = "TwilightCouncilPurifier";
    tmpInt += 1;
    entry[tmpInt] = "ColossusAncient";
    tmpInt += 1;
    entry[tmpInt] = "ColossusPurifier2";
    tmpInt += 1;
    entry[tmpInt] = "DisruptorAncient";
    tmpInt += 1;
    entry[tmpInt] = "DisruptorStandard";
    tmpInt += 1;
    entry[tmpInt] = "DragoonPurifier";
    tmpInt += 1;
    entry[tmpInt] = "DragoonStandard";
    tmpInt += 1;
    entry[tmpInt] = "ImmortalAncient";
    tmpInt += 1;
    entry[tmpInt] = "ImmortalPurifier";
    tmpInt += 1;
    entry[tmpInt] = "SentryPurifier2";
    tmpInt += 1;
    entry[tmpInt] = "StalkerPurifier2";
    tmpInt += 1;
    entry[tmpInt] = "ZealotAncient";
    tmpInt += 1;
    entry[tmpInt] = "ZealotPurifier2";
    tmpInt += 1;
    entry[tmpInt] = "ObeliskStandard";
    tmpInt += 1;
    
    for ( tmpInt = 0; tmpInt < amountEntries; tmpInt += 1 ) {
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeMax", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeStart", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldsMax", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldsStart", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeArmor", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldArmor", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    }

    tmpInt = 0;

    entry2[tmpInt] = "MonolithAncient";
    tmpInt += 1;
    entry2[tmpInt] = "MonolithStandard";
    tmpInt += 1;
    entry2[tmpInt] = "PhotonCannonAncient";
    tmpInt += 1;
    entry2[tmpInt] = "PhotonCannonPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "PylonAncient";
    tmpInt += 1;
    entry2[tmpInt] = "PylonPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "PylonPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "VoidContainmentAncient";
    tmpInt += 1;
    entry2[tmpInt] = "VoidContainmentStandard";
    tmpInt += 1;

    entry2[tmpInt] = "ColossusAncient";
    tmpInt += 1;
    entry2[tmpInt] = "ColossusPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "DisruptorAncient";
    tmpInt += 1;
    entry2[tmpInt] = "DisruptorStandard";
    tmpInt += 1;
    entry2[tmpInt] = "DragoonPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "DragoonStandard";
    tmpInt += 1;
    entry2[tmpInt] = "ImmortalAncient";
    tmpInt += 1;
    entry2[tmpInt] = "ImmortalPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "SentryPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "StalkerPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "ZealotAncient";
    tmpInt += 1;
    entry2[tmpInt] = "ZealotPurifier";
    tmpInt += 1;

    for ( tmpInt = 0; tmpInt < amountEntries2 ; tmpInt += 1 ) {
        CatalogFieldValueModify(c_gameCatalogEffect, (entry2[tmpInt] + "WeaponDmg"), "Amount", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogWeapon, (entry2[tmpInt] + "Weapon"), "Level", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    }
}
static void PartProtoss_AreaPsi_Upgrade(fixed multiplier){
    const int amountEntries = 36;
    string[amountEntries] entry;
    const int amountEntries2 = 21;
    string[amountEntries2] entry2;
    int tmpInt;

    entry[tmpInt] = "CyberneticsCoreStandard";
    tmpInt += 1;
    entry[tmpInt] = "CyberneticsCoreTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "DarkShrineAncient";
    tmpInt += 1;
    entry[tmpInt] = "DarkShrineTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "ForgeTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "GatewayAncient";
    tmpInt += 1;
    entry[tmpInt] = "GatewayTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "MonolithNerazim";
    tmpInt += 1;
    entry[tmpInt] = "NexusStandard";
    tmpInt += 1;
    entry[tmpInt] = "NexusTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "NexusNerazim";
    tmpInt += 1;
    entry[tmpInt] = "PhotonCannonStandard";
    tmpInt += 1;
    entry[tmpInt] = "PhotonCannonTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "PylonTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "PylonNerazim";
    tmpInt += 1;
    entry[tmpInt] = "PylonJudicator";
    tmpInt += 1;
    entry[tmpInt] = "RoboticsBayTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "VoidContainmentTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "VoidContainmentNerazim";
    tmpInt += 1;
    entry[tmpInt] = "TemplarArchiveAncient";
    tmpInt += 1;
    entry[tmpInt] = "TemplarArchiveStandard";
    tmpInt += 1;
    entry[tmpInt] = "TwilightCouncilTaldarim";
    tmpInt += 1;

    entry[tmpInt] = "AdeptAncient";
    tmpInt += 1;
    entry[tmpInt] = "AdeptShadow";
    tmpInt += 1;
    entry[tmpInt] = "AdeptTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "ArchonAncient";
    tmpInt += 1;
    entry[tmpInt] = "ArchonPurifier";
    tmpInt += 1;
    entry[tmpInt] = "ColossusTaldarim2";
    tmpInt += 1;
    entry[tmpInt] = "DarkTemplarAncient";
    tmpInt += 1;
    entry[tmpInt] = "DarkTemplarTaldarim2";
    tmpInt += 1;
    entry[tmpInt] = "SentryNerazim";
    tmpInt += 1;
    entry[tmpInt] = "StalkerTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "ZealotStandard";
    tmpInt += 1;
    entry[tmpInt] = "ZealotTaldarim";
    tmpInt += 1;
    entry[tmpInt] = "ZealotNerazim";
    tmpInt += 1;
    entry[tmpInt] = "ObeliskStandard";
    tmpInt += 1;

    for ( tmpInt = 0; tmpInt < amountEntries ; tmpInt += 1 ) {
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeMax", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeStart", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldsMax", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldsStart", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeArmor", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "LifeArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldArmor", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogUnit, entry[tmpInt], "ShieldArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    }
    tmpInt=0;
    entry2[tmpInt] = "MonolithNerazim";
    tmpInt += 1;
    entry2[tmpInt] = "PhotonCannonStandard";
    tmpInt += 1;
    entry2[tmpInt] = "PhotonCannonTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "PylonTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "PylonNerazim";
    tmpInt += 1;
    entry2[tmpInt] = "PylonJudicator";
    tmpInt += 1;
    entry2[tmpInt] = "VoidContainmentTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "VoidContainmentNerazim";
    tmpInt += 1;

    entry2[tmpInt] = "AdeptAncient";
    tmpInt += 1;
    entry2[tmpInt] = "AdeptShadow";
    tmpInt += 1;
    entry2[tmpInt] = "AdeptTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "ArchonAncient";
    tmpInt += 1;
    entry2[tmpInt] = "ArchonPurifier";
    tmpInt += 1;
    entry2[tmpInt] = "ColossusTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "DarkTemplarAncient";
    tmpInt += 1;
    entry2[tmpInt] = "DarkTemplarTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "SentryNerazim";
    tmpInt += 1;
    entry2[tmpInt] = "StalkerTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "ZealotStandard";
    tmpInt += 1;
    entry2[tmpInt] = "ZealotTaldarim";
    tmpInt += 1;
    entry2[tmpInt] = "ZealotNerazim";
    tmpInt += 1;

    for ( tmpInt = 0; tmpInt < amountEntries2; tmpInt += 1 ) {
        CatalogFieldValueModify(c_gameCatalogEffect, (entry2[tmpInt] + "WeaponDmg"), "Amount", gv_EnemyPlayer, FixedToString(multiplier, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogWeapon, (entry2[tmpInt] + "Weapon"), "Level", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    }

}
static void PartProtoss_AreaVoidmine_Upgrade(fixed multipler){
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeMax", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeStart", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldsMax", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldsStart", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeArmor", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "LifeArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldArmor", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogUnit, "VoidMine", "ShieldArmorLevel", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponDmg", "Amount", gv_EnemyPlayer, FixedToString(multipler, c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogWeapon, "VoidMineWeapon", "Level", gv_EnemyPlayer, "1", c_upgradeOperationAdd);
}

void PartProtoss_AreaMech_Second_Open(){
    unit tmpUnit;
    int tmpInt;
    unitgroup tmpUG;

    TriggerEnable(PartProtoss_AreaMech_Second_ObeliskKill_Trigger, false);
    gv_Part_Areas_Open[c_Areas_PBottom2] = true;

    gv_Enemy_TypeMultiplier_Biomass[c_EnemyType_PMech] *= 1.225;
    gv_Enemy_TypeMultiplier_Exp    [c_EnemyType_PMech] *= 1.225;
    PartProtoss_AreaMech_Upgrade(1.075);
    PartProtoss_AreaVoidmine_Upgrade(1.025);

    Player_IncreaseUpgradeCount(2.0);

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Mech"));
    UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PBottom2]);
    
    tmpUG = UnitGroup(null, gv_EnemyPlayer, RegionFromName("PartProtoss_Mech_Second_Wall"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
    for (;; tmpInt -=1){
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if(tmpUnit == null){ break; }
        if(UnitGetType(tmpUnit) == "ObeliskStandard"){
            UnitIssueOrder(tmpUnit, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        } 
    }
}
void PartProtoss_AreaPsi_Second_Open(){
    unit tmpUnit;
    int tmpInt;
    unitgroup tmpUG;

    TriggerEnable(PartProtoss_AreaPsi_Second_ObeliskKill_Trigger, false);
    gv_Part_Areas_Open[c_Areas_PTop2] = true;

    gv_Enemy_TypeMultiplier_Biomass[c_EnemyType_PPsi] *= 1.15;
    gv_Enemy_TypeMultiplier_Exp    [c_EnemyType_PPsi] *= 1.15;
    PartProtoss_AreaPsi_Upgrade(1.05);
    PartProtoss_AreaVoidmine_Upgrade(1.025);

    Player_IncreaseUpgradeCount(2.0);

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Psi"));
    UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PTop2]);
    
    tmpUG = UnitGroup(null, gv_EnemyPlayer, RegionFromName("PartProtoss_Psi_Second_Wall"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
    for (;; tmpInt -=1){
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if(tmpUnit == null){ break; }
        if(UnitGetType(tmpUnit) == "ObeliskStandard"){
            UnitIssueOrder(tmpUnit, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        } 
    }
}
void PartProtoss_AreaPsi_Third_Open(){
    unit tmpUnit;
    int tmpInt;
    unitgroup tmpUG;

    TriggerEnable(PartProtoss_AreaPsi_Third_ObeliskKill_Trigger, false);
    gv_Part_Areas_Open[c_Areas_PTop3] = true;

    gv_Enemy_TypeMultiplier_Biomass[c_EnemyType_PPsi] *= 1.15;
    gv_Enemy_TypeMultiplier_Exp    [c_EnemyType_PPsi] *= 1.15;
    PartProtoss_AreaPsi_Upgrade(1.05);
    PartProtoss_AreaVoidmine_Upgrade(1.025);

    Player_IncreaseUpgradeCount(2.0);

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Psi"));
    UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PTop3]);
    
    tmpUG = UnitGroup(null, gv_EnemyPlayer, RegionFromName("PartProtoss_Psi_Third_Wall"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
    for (;; tmpInt -=1){
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if(tmpUnit == null){ break; }
        if(UnitGetType(tmpUnit) == "ObeliskStandard"){
            UnitIssueOrder(tmpUnit, Order(AbilityCommand("ObeliskMorph", 0)), c_orderQueueReplace);
        } 
    }
}

void PartProtoss_AreaMix_First(){
    gv_Enemy_TypeMultiplier_Biomass[c_EnemyType_PMech] *= 1.225;
    gv_Enemy_TypeMultiplier_Exp    [c_EnemyType_PMech] *= 1.225;
    PartProtoss_AreaMech_Upgrade(1.075);
    PartProtoss_AreaVoidmine_Upgrade(1.025);

    gv_Enemy_TypeMultiplier_Biomass[c_EnemyType_PPsi] *= 1.15;
    gv_Enemy_TypeMultiplier_Exp    [c_EnemyType_PPsi] *= 1.15;
    PartProtoss_AreaPsi_Upgrade(1.05);
    PartProtoss_AreaVoidmine_Upgrade(1.025);

    Player_IncreaseUpgradeCount(4.0);

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/AreaOpen/Facility"));
    UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PMid1]);
    UnitIssueOrder(UnitFromId(2146047430), Order(AbilityCommand("ProtossDoorNOpen", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1932654700), Order(AbilityCommand("ProtossDoorNOpen", 0)), c_orderQueueReplace);
}
void PartProtoss_AreaMix_First_Opener(){
    partProtoss_Mix_First_OpenerCount += 1;
    if (partProtoss_Mix_First_OpenerCount == 3){
        PartProtoss_AreaMix_First();
        Collectibles_PsiOrbs_Init();
    }
}

bool PartProtoss_AreaMech_Second_ObeliskKill (bool testConds, bool runActions){
    if (!TriggerIsEnabled(TriggerGetCurrent())) {return false;}
    PartProtoss_AreaMech_Second_Open();
    return true;
}
bool PartProtoss_AreaPsi_Second_ObeliskKill (bool testConds, bool runActions){
    if (!TriggerIsEnabled(TriggerGetCurrent())) {return false;}
    PartProtoss_AreaPsi_Second_Open();
    return true;
}
bool PartProtoss_AreaPsi_Third_ObeliskKill (bool testConds, bool runActions){
    if (!TriggerIsEnabled(TriggerGetCurrent())) {return false;}
    PartProtoss_AreaPsi_Third_Open();
    return true;
}

bool PartProtoss_WaypointRemover (bool testConds, bool runActions){
    if(testConds){
        if (!(UnitGetOwner(EventUnit()) == gv_EnemyPlayer && UnitHasBehavior2(EventUnit(),"AttackWaypoint0"))) {return false;}
    }
    
    UnitBehaviorRemovePlayer(EventUnit(), "AttackWaypoint0", gv_EnemyPlayer, 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), gv_Part_AttackPoint), c_orderQueueReplace);
    return true;
}

// bossfight

// rework current Madness Handler - all of Madness abilities have non enemy related requirements which the current system cannot handle
void PartProtoss_Madness_Init(structref<BossFightData> data){
    data.amountBosses = 1;
    data.boss           [0] = gv_Bosses[c_Bosses_PMadness];
    data.bossState      [0] = c_BossFightState_Alive;
    data.bossIdlePoint  [0] = PointFromName("PartProtoss_Boss_Madness");
    data.arena = RegionFromName("PartProtoss_Boss_Madness_Arena");

    data.ability[0].abil = "LongLife";
    data.ability[0].targetingType = c_BossFightAbilTargetType_None;
    data.ability[0].globalCooldown = 12;
    data.ability[0].selfCooldown = 20;
    data.ability[0].charges = -1;
    data.ability[0].minAmountTargets = 1;
    data.ability[0].allowedBossStates = c_BossFightState_Alive;
    data.ability[0].disallowedBossStates = 0;
    data.ability[0].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)));
    data.ability[0].targetFilterController = c_BossFightAbilAllianceTarget_Enemy;
    data.ability[0].requiredBossAbilityLevel = 0;

    data.ability[1].abil = "Turbocharge";
    data.ability[1].targetingType = c_BossFightAbilTargetType_None;
    data.ability[1].globalCooldown = 7.5;
    data.ability[1].selfCooldown = 15;
    data.ability[1].charges = -1;
    data.ability[1].minAmountTargets = 1;
    data.ability[1].allowedBossStates = c_BossFightState_Alive;
    data.ability[1].disallowedBossStates = 0;
    data.ability[1].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)));
    data.ability[1].targetFilterController = c_BossFightAbilAllianceTarget_Enemy;
    data.ability[1].requiredBossAbilityLevel = 0;

    data.ability[2].abil = "MassHeal";
    data.ability[2].targetingType = c_BossFightAbilTargetType_None;
    data.ability[2].globalCooldown = 7.5;
    data.ability[2].selfCooldown = 25;
    data.ability[2].charges = -1;
    data.ability[2].minAmountTargets = 1;
    data.ability[2].allowedBossStates = c_BossFightState_Alive;
    data.ability[2].disallowedBossStates = 0;
    data.ability[2].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)));
    data.ability[2].targetFilterController = c_BossFightAbilAllianceTarget_Enemy;
    data.ability[2].requiredBossAbilityLevel = 0;

    data.amountAbility = 3;
}
void PartProtoss_TagTeam_Init(structref<BossFightData> data){
    data.amountBosses = 2;
    data.boss           [c_BossFightIndex_Lightning] = gv_Bosses[c_Bosses_PLightning];
    data.bossState      [c_BossFightIndex_Lightning] = c_BossFightState_Alive;
    data.bossIdlePoint  [c_BossFightIndex_Lightning] = PointWithOffset(PointFromName("PartProtoss_Boss_TagTeam"), -1, 0);
    data.boss           [c_BossFightIndex_Thunder] = gv_Bosses[c_Bosses_PThunder];
    data.bossState      [c_BossFightIndex_Thunder] = c_BossFightState_Alive;
    data.bossIdlePoint  [c_BossFightIndex_Thunder] = PointWithOffset(PointFromName("PartProtoss_Boss_TagTeam"), +1, 0);
    data.arena = RegionFromName("PartProtoss_Boss_TagTeam_Arena");

    data.ability[0].abil = "LightningElementals";
    data.ability[0].targetingType = c_BossFightAbilTargetType_None;
    data.ability[0].globalCooldown = 15;
    data.ability[0].selfCooldown = 60;
    data.ability[0].charges = -1;
    data.ability[0].minAmountTargets = 1;
    data.ability[0].bossIndex = c_BossFightIndex_Lightning;
    data.ability[0].allowedBossStates = c_BossFightState_Alive;
    data.ability[0].disallowedBossStates = 0;
    data.ability[0].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[0].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[0].requiredBossAbilityLevel = 1;

    data.ability[1].abil = "ZapTrap";
    data.ability[1].targetingType = c_BossFightAbilTargetType_Point;
    data.ability[1].globalCooldown = 10;
    data.ability[1].selfCooldown = 45;
    data.ability[1].charges = -1;
    data.ability[1].minAmountTargets = 1;
    data.ability[1].bossIndex = c_BossFightIndex_Lightning;
    data.ability[1].allowedBossStates = c_BossFightState_Alive;
    data.ability[1].disallowedBossStates = 0;
    data.ability[1].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[1].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[1].requiredBossAbilityLevel = 2;

    data.ability[2].abil = "PureEnergy";
    data.ability[2].targetingType = c_BossFightAbilTargetType_None;
    data.ability[2].globalCooldown = 15;
    data.ability[2].selfCooldown = 60;
    data.ability[2].charges = -1;
    data.ability[2].minAmountTargets = 1;
    data.ability[2].bossIndex = c_BossFightIndex_Lightning;
    data.ability[2].allowedBossStates = c_BossFightState_Alive;
    data.ability[2].disallowedBossStates = 0;
    data.ability[2].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[2].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[2].requiredBossAbilityLevel = 3;

    data.ability[3].abil = "CrossedBeamsStart";
    data.ability[3].targetingType = c_BossFightAbilTargetType_Unit;
    data.ability[3].globalCooldown = 15;
    data.ability[3].selfCooldown = 60;
    data.ability[3].charges = -1;
    data.ability[3].minAmountTargets = 1;
    data.ability[3].bossIndex = c_BossFightIndex_Lightning;
    data.ability[3].allowedBossStates = c_BossFightState_Alive;
    data.ability[3].disallowedBossStates = 0;
    data.ability[3].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[3].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[3].requiredBossAbilityLevel = 4;

    data.ability[4].abil = "ThunderElementals";
    data.ability[4].targetingType = c_BossFightAbilTargetType_None;
    data.ability[4].globalCooldown = 10;
    data.ability[4].selfCooldown = 60;
    data.ability[4].charges = -1;
    data.ability[4].minAmountTargets = 1;
    data.ability[4].bossIndex = c_BossFightIndex_Thunder;
    data.ability[4].allowedBossStates = c_BossFightState_Alive;
    data.ability[4].disallowedBossStates = 0;
    data.ability[4].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[4].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[4].requiredBossAbilityLevel = 1;

    data.ability[5].abil = "CoronaWaves";
    data.ability[5].targetingType = c_BossFightAbilTargetType_None;
    data.ability[5].globalCooldown = 10;
    data.ability[5].selfCooldown = 45;
    data.ability[5].charges = -1;
    data.ability[5].minAmountTargets = 2;
    data.ability[5].bossIndex = c_BossFightIndex_Thunder;
    data.ability[5].allowedBossStates = c_BossFightState_Alive;
    data.ability[5].disallowedBossStates = 0;
    data.ability[5].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[5].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[5].requiredBossAbilityLevel = 2;

    data.ability[6].abil = "Shout";
    data.ability[6].targetingType = c_BossFightAbilTargetType_None;
    data.ability[6].globalCooldown = 10;
    data.ability[6].selfCooldown = 55;
    data.ability[6].charges = -1;
    data.ability[6].minAmountTargets = 1;
    data.ability[6].bossIndex = c_BossFightIndex_Thunder;
    data.ability[6].allowedBossStates = c_BossFightState_Alive;
    data.ability[6].disallowedBossStates = 0;
    data.ability[6].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[6].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[6].requiredBossAbilityLevel = 3;

    data.ability[7].abil = "Tornado";
    data.ability[7].targetingType = c_BossFightAbilTargetType_Point;
    data.ability[7].globalCooldown = 10;
    data.ability[7].selfCooldown = 50;
    data.ability[7].charges = -1;
    data.ability[7].minAmountTargets = 1;
    data.ability[7].bossIndex = c_BossFightIndex_Thunder;
    data.ability[7].allowedBossStates = c_BossFightState_Alive;
    data.ability[7].disallowedBossStates = 0;
    data.ability[7].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[7].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[7].requiredBossAbilityLevel = 4;

    data.amountAbility = 8;
}
void PartProtoss_Atlantis_Init(structref<BossFightData> data){
    data.amountBosses = 1;
    data.boss           [0] = gv_Bosses[c_Bosses_PAtlantis];
    data.bossState      [0] = c_BossFightState_Alive;
    data.bossIdlePoint  [0] = PointFromName("PartProtoss_Boss_Atlantis");
    data.arena = RegionFromName("PartProtoss_Boss_Atlantis_Arena");

    data.ability[0].abil = "StasisBubble";
    data.ability[0].targetingType = c_BossFightAbilTargetType_Point;
    data.ability[0].globalCooldown = 5;
    data.ability[0].selfCooldown = 55;
    data.ability[0].charges = -1;
    data.ability[0].minAmountTargets = 1;
    data.ability[0].allowedBossStates = c_BossFightState_Alive;
    data.ability[0].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[0].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[0].requiredBossAbilityLevel = 0;

    data.ability[1].abil = "Kamikaze";
    data.ability[1].targetingType = c_BossFightAbilTargetType_Point;
    data.ability[1].globalCooldown = 10;
    data.ability[1].selfCooldown = 45;
    data.ability[1].charges = -1;
    data.ability[1].minAmountTargets = 1;
    data.ability[1].allowedBossStates = c_BossFightState_Alive;
    data.ability[1].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[1].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[1].requiredBossAbilityLevel = 2;

    data.ability[2].abil = "PortalStart";
    data.ability[2].targetingType = c_BossFightAbilTargetType_Unit;
    data.ability[2].globalCooldown = 15;
    data.ability[2].selfCooldown = 60;
    data.ability[2].charges = -1;
    data.ability[2].minAmountTargets = 1;
    data.ability[2].allowedBossStates = c_BossFightState_Alive;
    data.ability[2].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[2].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[2].requiredBossAbilityLevel = 2;

    data.ability[3].abil = "LaserLance";
    data.ability[3].targetingType = c_BossFightAbilTargetType_Point;
    data.ability[3].globalCooldown = 8.5;
    data.ability[3].selfCooldown = 45;
    data.ability[3].charges = -1;
    data.ability[3].minAmountTargets = 1;
    data.ability[3].allowedBossStates = c_BossFightState_Alive;
    data.ability[3].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[3].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[3].requiredBossAbilityLevel = 3;
    
    // data.ability[4].abil = "VoidSummon";
    // data.ability[4].targetingType = c_BossFightAbilTargetType_None;
    // data.ability[4].globalCooldown = 8.5;
    // data.ability[4].selfCooldown = 60;
    // data.ability[4].charges = -1;
    // data.ability[4].minAmountTargets = 1;
    // data.ability[4].allowedBossStates = c_BossFightState_Alive;
    // data.ability[4].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    // data.ability[4].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    // data.ability[4].requiredBossAbilityLevel = 4;

    data.amountAbility = 4;
}
void PartProtoss_Atlantis_Update_Phase2(structref<BossFightData> data){

    data.ability[4].abil = "Illusion";
    data.ability[4].targetingType = c_BossFightAbilTargetType_None;
    data.ability[4].globalCooldown = 34.5;
    data.ability[4].selfCooldown = 34.5;
    data.ability[4].charges = -1;
    data.ability[4].minAmountTargets = 1;
    data.ability[4].allowedBossStates = c_BossFightState_Alive;
    data.ability[4].targetFilter = UnitFilter(0,0,0,(1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    data.ability[4].targetFilterController = c_BossFightAbilAllianceTarget_Player;
    data.ability[4].requiredBossAbilityLevel = 2;

    // Core cannot cast Portal and LaserLance
    data.ability[1].charges = 0;
    data.ability[3].charges = 0;
    data.amountAbility = 5;
}

// madness stuff
static trigger PartProtoss_Madness_VitalsMonitor_Trigger;
static trigger PartProtoss_Madness_Timer_Trigger;
static unitgroup[3] partProtoss_Madness_Spawners;
static unitgroup partProtoss_Madness_Healers;
static unitgroup partProtoss_Madness_Cannons;
static unitgroup partProtoss_Madness_VoidContainments;
static int partProtoss_Madness_ActiveSet;
static int partProtoss_Madness_Phase;
static int partProtoss_Madness_Timer;
static string[3] partProtoss_Madness_Minibosses;

static void PartProtoss_Madness_ClearArena(){
    unitgroup tmpUG = UnitGroupEmpty();
    int tmpInt;
    unit tmpUnit;

    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Spawners[0]);
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Spawners[1]);
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Spawners[2]);
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Cannons);
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Healers);
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_VoidContainments);
    
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        UnitDamage(UnitFromId(1461303459), "KillTargetDeathNormal", tmpUnit, 0.0); //uses fleetbeacon (atlantis spawner) as dmg source
    }
}
static int PartProtoss_Madness_ReturnNotLastSetID(){
    int tmpInt = RandomInt(0,1);
    if (tmpInt == partProtoss_Madness_ActiveSet){
        return 2;
    }
    else{
        return tmpInt;
    }
}
static void PartProtoss_Madness_ActivateSet (int setID) {
    unitgroup tmpUG = UnitGroupEmpty();
    int tmpInt;
    unit tmpUnit;

    partProtoss_Madness_ActiveSet = setID;
    UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Spawners[setID]);
    if (setID == 0) {
        UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Cannons);
        UnitGroupAdd(tmpUG, UnitGroupRandomUnit(partProtoss_Madness_Healers, c_unitCountAlive));
    }
    else if (setID == 1) {
        UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_Healers);
        UnitGroupAdd(tmpUG, UnitGroupRandomUnit(partProtoss_Madness_VoidContainments, c_unitCountAlive));
    }
    else if (setID == 2) {
        UnitGroupAddUnitGroup(tmpUG, partProtoss_Madness_VoidContainments);
        UnitGroupAdd(tmpUG, UnitGroupRandomUnit(partProtoss_Madness_Healers, c_unitCountAlive));
        UnitGroupAdd(tmpUG, UnitGroupRandomUnit(partProtoss_Madness_Cannons, c_unitCountAlive));
    }
    
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        UnitIssueOrder(gv_Bosses[c_Bosses_PMadness], OrderTargetingUnit(AbilityCommand("StructureTurnOn", 0), tmpUnit), c_orderQueueAddToFront);
    }
}
static void PartProtoss_Madness_InitVariables(){
    partProtoss_Madness_Spawners[0] = UnitGroupEmpty();
    partProtoss_Madness_Spawners[1] = UnitGroupEmpty();
    partProtoss_Madness_Spawners[2] = UnitGroupEmpty();
    partProtoss_Madness_Cannons = UnitGroupEmpty();
    partProtoss_Madness_Healers = UnitGroupEmpty();
    partProtoss_Madness_VoidContainments = UnitGroupEmpty();


    UnitGroupAdd(partProtoss_Madness_Spawners[0], UnitFromId(1588768702));
    UnitGroupAdd(partProtoss_Madness_Spawners[0], UnitFromId(1198586738));
    UnitGroupAdd(partProtoss_Madness_Spawners[1], UnitFromId(221841446));
    UnitGroupAdd(partProtoss_Madness_Spawners[1], UnitFromId(225136776));
    UnitGroupAdd(partProtoss_Madness_Spawners[2], UnitFromId(67106696));
    UnitGroupAdd(partProtoss_Madness_Cannons, UnitFromId(1584024246));
    UnitGroupAdd(partProtoss_Madness_Cannons, UnitFromId(788308302));
    UnitGroupAdd(partProtoss_Madness_Healers, UnitFromId(657393947));
    UnitGroupAdd(partProtoss_Madness_Healers, UnitFromId(440466605));
    UnitGroupAdd(partProtoss_Madness_VoidContainments, UnitFromId(982299933));
    UnitGroupAdd(partProtoss_Madness_VoidContainments, UnitFromId(229526702));
    partProtoss_Madness_Minibosses[0] = "AdeptTalon";
    partProtoss_Madness_Minibosses[1] = "HighTemplarTalon";
    partProtoss_Madness_Minibosses[2] = "HighTemplarCrystalwingTalon";

    Wait(2.0, c_timeGame);
    PartProtoss_Madness_ActivateSet(RandomInt(0, 2));
}
bool PartProtoss_Madness_VitalsMonitor (bool testConds, bool runActions){
    unitgroup tmpUG;
    unit tmpUnit;
    int tmpInt;
    fixed vitals = UnitGetPropertyFixed(gv_Bosses[c_Bosses_PMadness], c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_Bosses[c_Bosses_PMadness], c_unitPropShieldsPercent, c_unitPropCurrent);

    if(!runActions) {return true;}
    if(partProtoss_Madness_Phase == 0 && vitals <= 175){
        partProtoss_Madness_Phase += 1;
        UnitBehaviorAdd(gv_Bosses[c_Bosses_PMadness], "MadnessEnrage", gv_Bosses[c_Bosses_PMadness], 1);
    }
    else if (partProtoss_Madness_Phase == 1 && vitals <= 150){
        partProtoss_Madness_Phase += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, partProtoss_Madness_Minibosses[0], 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 0.0, -2.0));
        UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if(partProtoss_Madness_Phase == 2 && vitals <= 125){
        partProtoss_Madness_Phase += 1;
        UnitBehaviorAdd(gv_Bosses[c_Bosses_PMadness], "MadnessEnrage", gv_Bosses[c_Bosses_PMadness], 1);
    }
    else if (partProtoss_Madness_Phase == 3 && vitals <= 100){
        partProtoss_Madness_Phase += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, partProtoss_Madness_Minibosses[1], 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 0.0, -2.0));
        UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if(partProtoss_Madness_Phase == 4 && vitals <= 75){
        partProtoss_Madness_Phase += 1;
        UnitBehaviorAdd(gv_Bosses[c_Bosses_PMadness], "MadnessEnrage", gv_Bosses[c_Bosses_PMadness], 1);
    }
    else if (partProtoss_Madness_Phase == 5 && vitals <= 50){
        partProtoss_Madness_Phase += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, partProtoss_Madness_Minibosses[2], 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 0.0, -2.0));
        UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    }
    else if(partProtoss_Madness_Phase == 6 && vitals <= 25){
        partProtoss_Madness_Phase += 1;
        UnitBehaviorAdd(gv_Bosses[c_Bosses_PMadness], "MadnessEnrage", gv_Bosses[c_Bosses_PMadness], 1);
    }
    else if (partProtoss_Madness_Phase == 7 && vitals <= 15){
        partProtoss_Madness_Phase += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(6, "ProbeTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 0.0, -2.0));

        tmpUG = UnitLastCreatedGroup();
        tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
        for (;; tmpInt -=1){
            tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
            if(tmpUnit == null){ break; }
            UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddProbe", tmpUnit);
        }
    }
    return true;
}
bool PartProtoss_Madness_Timer (bool testConds, bool runActions){
    unitgroup tmpUG;
    unit tmpUnit;
    int tmpInt;
    bool tmpFlag = false;
    if(!runActions) {return true;}
    if(!UnitIsAlive(gv_Bosses[c_Bosses_PMadness])){
        TriggerDestroy(TriggerGetCurrent());
    }
    //check if any player unit is in the arena (exluded overlords)
    tmpUG = UnitGroup(null, c_playerAny, RegionFromName("PartProtoss_Boss_Madness_Arena"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
    for (;; tmpInt -=1){
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if(tmpUnit == null){ break; }
        if(PlayerGroupHasPlayer(gv_ActivePG, UnitGetOwner(tmpUnit))){
            tmpFlag = true;
            break;
        }
    }

    //timer counts up if any player unit is in the arena. if timer hits the threshold, a new set to active will be chosen
    if(tmpFlag){
        partProtoss_Madness_Timer += 1;
        if(partProtoss_Madness_Timer >= 42 - 2*gv_PlayerAmount){
            partProtoss_Madness_Timer = 0;
            PartProtoss_Madness_ActivateSet(PartProtoss_Madness_ReturnNotLastSetID());
        }
    }
    return true;
}
// atlantis stuff
static trigger PartProtoss_Atlantis_Illusion_Trigger;
bool PartProtoss_Atlantis_Illusion (bool testConds, bool runActions){
    const int maxAmountColors = 4;
    const int maxAmountIlluions = 3;
    int [maxAmountColors] coloringArray;
    unit[maxAmountIlluions] illusion;
    int rngInt;
    unitgroup tmpUG;
    unit tmpUnit;
    int tmpInt;
    int tmpInt2;

    Wait((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "Illusion@Delay", "ExpireDelay", c_playerAny) + 0.0625), c_timeGame);

    tmpUG = UnitGetTrackedUnitGroup(gv_Bosses[c_Bosses_PAtlantis], "Illusion@Tracker");
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAlive);
    for (;; tmpInt -=1){
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if(tmpUnit == null){ break; }
        
        if(tmpUnit != gv_Bosses[c_Bosses_PAtlantis]){
            Utility_CopyVitals(gv_Bosses[c_Bosses_PAtlantis], tmpUnit);
            illusion[tmpInt2] = tmpUnit;
            tmpInt2+=1;
        }
    }

    for(tmpInt = 0; tmpInt < maxAmountColors; tmpInt += 1){
        coloringArray[tmpInt] = tmpInt;
    }

    //pick random color for atlantiscore & pyloncolossus
    rngInt = RandomInt(0, maxAmountColors-1);
    ActorSend(libNtve_gf_MainActorofUnit(gv_Bosses[c_Bosses_PAtlantis]), "Signal Color" + IntToString(coloringArray[rngInt]));
    ActorSend(libNtve_gf_MainActorofUnit(gv_Atlantis_PylonColossus), "Signal Color" + IntToString(coloringArray[rngInt]));
    coloringArray[rngInt] = coloringArray[maxAmountColors -1];

    //pick random colors for the illusions in a bijective behavior
    for(tmpInt= 0; tmpInt<maxAmountIlluions; tmpInt+=1){
        rngInt= RandomInt(0, maxAmountColors - tmpInt -2);
        ActorSend(libNtve_gf_MainActorofUnit(illusion[tmpInt]), "Signal Color" + IntToString(coloringArray[rngInt]));
        coloringArray[rngInt] = coloringArray[maxAmountColors -tmpInt-2];
    }

    Wait(20, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_Atlantis_PylonColossus), "Signal Clear");
    return true;
}

// boss spawner
bool PartProtoss_Madness_Generator (bool testConds, bool runActions){
    int tmpPlayer;
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    
    UnitCreate(1, "Madness", 0, gv_EnemyPlayer, PointFromName("PartProtoss_Boss_Madness"), 270.0);
    gv_Bosses[c_Bosses_PMadness] = UnitLastCreated();
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Madness_Dies"), UnitRefFromUnit(gv_Bosses[c_Bosses_PMadness]));

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 0.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_EnemyPlayer, 1);
    UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StalkerTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 2.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_EnemyPlayer, 1);
    UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), 2.0, 2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_EnemyPlayer, 1);
    UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InterceptorTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), -2.0, -2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_EnemyPlayer, 1);
    UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImmortalTalon", 0, gv_EnemyPlayer, PointWithOffset(PointFromName("PartProtoss_Boss_Madness"), -2.0, 2.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Spawning", gv_EnemyPlayer, 1);
    UnitCreateEffectUnit(gv_Bosses[c_Bosses_PMadness], "TrackerAddCombatUnit", UnitLastCreated());

    PartProtoss_Madness_InitVariables();
    
    PartProtoss_Madness_VitalsMonitor_Trigger = TriggerCreate("PartProtoss_Madness_VitalsMonitor");
    TriggerAddEventUnitDamaged(PartProtoss_Madness_VitalsMonitor_Trigger, UnitRefFromUnit(gv_Bosses[c_Bosses_PMadness]), c_unitDamageTypeAny, c_unitDamageEither, null);

    
    PartProtoss_Madness_Timer_Trigger = TriggerCreate("PartProtoss_Madness_Timer");
    TriggerAddEventTimePeriodic(PartProtoss_Madness_Timer_Trigger, 1.0, c_timeGame);
    tmpPlayer = -1;
    while (true) {
        tmpPlayer = PlayerGroupNextPlayer(PlayerGroupAll(), tmpPlayer);
        if(tmpPlayer < 0) { break; }

        VisRevealArea(tmpPlayer, RegionFromName("PartProtoss_Boss_Madness_Arena"), 0.0625, false);
    }
    return true;
}
bool PartProtoss_TagTeam_Generator (bool testConds, bool runActions){
    unit tagTeamHandler;
    unitgroup tmpUG;

    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thunder", 0, gv_EnemyPlayer, PointWithOffset( PointFromName("PartProtoss_Boss_TagTeam"), -1, 0));
    gv_Bosses[c_Bosses_PThunder] = UnitLastCreated();
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Thunder_Dies"), UnitRefFromUnit(gv_Bosses[c_Bosses_PThunder]));

    
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lightning", 0, gv_EnemyPlayer, PointWithOffset( PointFromName("PartProtoss_Boss_TagTeam"), +1, 0));
    gv_Bosses[c_Bosses_PLightning] = UnitLastCreated();
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Lightning_Dies"), UnitRefFromUnit(gv_Bosses[c_Bosses_PLightning]));

    gv_Enemy_BossFight_Handler_FightID_Param = c_BossFightID_TagTeam;
    gv_Enemy_BossFight_Handler_InitFunc = PartProtoss_TagTeam_Init;
    TriggerExecute(gv_Enemy_BossFight_Handler_Trigger, false, false);
    
    return true;
}
bool PartProtoss_Atlantis_Generator (bool testConds, bool runActions){
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    UnitCreate(1, "Atlantis", 0, gv_EnemyPlayer, PointFromName("PartProtoss_Boss_Atlantis"), 180.0);
    gv_Bosses[c_Bosses_PAtlantis] = UnitLastCreated();

    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Atlantis_Dies"), UnitRefFromUnit(gv_Bosses[c_Bosses_PAtlantis]));
    PartProtoss_Atlantis_Illusion_Trigger = TriggerCreate("PartProtoss_Atlantis_Illusion");
    TriggerAddEventUnitAbility(PartProtoss_Atlantis_Illusion_Trigger, UnitRefFromUnit(gv_Bosses[c_Bosses_PAtlantis]), AbilityCommand("Illusion", 0), c_abilEffectStageChannel, false);
    
    gv_Enemy_BossFight_Handler_FightID_Param = c_BossFightID_Atlantis;
    gv_Enemy_BossFight_Handler_InitFunc = PartProtoss_Atlantis_Init;
    TriggerExecute(gv_Enemy_BossFight_Handler_Trigger, false, false);

    TriggerAddEventPlayerEffectUsed(TriggerCreate("PartProtoss_Atlantis_ChangePhase"), gv_EnemyPlayer, "Phase2IssueMorph");

    return true;
}

// boss kill
bool PartProtoss_Madness_Dies (bool testConds, bool runActions){
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    TriggerDestroy(PartProtoss_Madness_VitalsMonitor_Trigger);
    TriggerDestroy(PartProtoss_Madness_Timer_Trigger);

    Enemy_BossDeath(libNtve_gf_KillingPlayer(), c_AcvIdentifier_BossP_Madness, 10, UnitGetPosition(EventUnit()));
    PartZerg_Moopy_SecretEnable(c_Part_Protoss, c_MoopySecretIndex_Jan);
    PartProtoss_Madness_ClearArena();

    PartProtoss_AreaMix_First_Opener();
    return true;
}

void PartProtoss_TagTeam_SecretEnable(){
    PartProtoss_TagTeam_SecretEnable_Count += 1;
    if(PartProtoss_TagTeam_SecretEnable_Count == 2){
        PartZerg_Moopy_SecretEnable(c_Part_Protoss, c_MoopySecretIndex_muhdiekuh);
    }
}

bool PartProtoss_Lightning_Dies (bool testConds, bool runActions){
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    Enemy_BossDeath(libNtve_gf_KillingPlayer(), c_AcvIdentifier_BossP_Lightning, 5, UnitGetPosition(EventUnit()));

    //if boss ability lvl is 2 or higher, then give the other one the surviving buff
    if(UnitIsAlive(gv_Bosses[c_Bosses_PThunder])){
        if(Utility_GetBossAbilityLevel() >= 2){
            UnitBehaviorAdd(gv_Bosses[c_Bosses_PThunder], "HandOfSilence", gv_Bosses[c_Bosses_PThunder], 1);
        }
    }
    PartProtoss_TagTeam_SecretEnable();
    PartProtoss_AreaMix_First_Opener();
    return true;
}
bool PartProtoss_Thunder_Dies (bool testConds, bool runActions){
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    Enemy_BossDeath(libNtve_gf_KillingPlayer(), c_AcvIdentifier_BossP_Thunder, 5, UnitGetPosition(EventUnit()));

    //if boss ability lvl is 2 or higher, then give the other one the surviving buff
    if(UnitIsAlive(gv_Bosses[c_Bosses_PLightning])){
        if(Utility_GetBossAbilityLevel() >= 2){
            UnitBehaviorAdd(gv_Bosses[c_Bosses_PLightning], "HandOfLightning", gv_Bosses[c_Bosses_PLightning], 1);
        }
    }
    PartProtoss_TagTeam_SecretEnable();
    PartProtoss_AreaMix_First_Opener();
    
    return true;
}
bool PartProtoss_Atlantis_Dies (bool testConds, bool runActions){
    if(!runActions) {return true;}
    TriggerDestroy(TriggerGetCurrent());
    Enemy_BossDeath(libNtve_gf_KillingPlayer(), c_AcvIdentifier_BossP_Atlantis, 10, UnitGetPosition(EventUnit()));
    PartZerg_Moopy_SecretEnable(c_Part_Protoss, c_MoopySecretIndex_Isatis);

    TriggerDestroy(PartProtoss_Atlantis_Illusion_Trigger);
    return true;
}

bool PartProtoss_Atlantis_ChangePhase (bool testConds, bool runActions){
    gv_Enemy_BossFight_Handler_UpdateFlag = true;
    gv_Enemy_BossFight_Handler_UpdateID = c_BossFightID_Atlantis;
    gv_Enemy_BossFight_Handler_UpdateFunction = PartProtoss_Atlantis_Update_Phase2;

    return true;
}

void PartProtoss_TriggerCreate(){
    // areas
    PartProtoss_AreaMech_Second_ObeliskKill_Trigger = TriggerCreate("PartProtoss_AreaMech_Second_ObeliskKill");
    TriggerAddEventUnitDied(PartProtoss_AreaMech_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(318432417)));
    TriggerAddEventUnitDied(PartProtoss_AreaMech_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(641877470)));
    TriggerAddEventUnitDied(PartProtoss_AreaMech_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(471267836)));
    PartProtoss_AreaPsi_Second_ObeliskKill_Trigger = TriggerCreate("PartProtoss_AreaPsi_Second_ObeliskKill");
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(100309099)));
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(564106641)));
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Second_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(535555060)));
    PartProtoss_AreaPsi_Third_ObeliskKill_Trigger = TriggerCreate("PartProtoss_AreaPsi_Third_ObeliskKill");
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Third_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(1684392452)));
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Third_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(1626463167)));
    TriggerAddEventUnitDied(PartProtoss_AreaPsi_Third_ObeliskKill_Trigger, UnitRefFromUnit(UnitFromId(467473478)));

    // boss spawners
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Madness_Generator"), UnitRefFromUnit(UnitFromId(2104120799)));
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_TagTeam_Generator"), UnitRefFromUnit(UnitFromId(2009472328)));
    TriggerAddEventUnitDied(TriggerCreate("PartProtoss_Atlantis_Generator"), UnitRefFromUnit(UnitFromId(1461303459)));

    // waypoint system for middle and top areas
    TriggerAddEventUnitRegion(TriggerCreate("PartProtoss_WaypointRemover"), null, RegionFromName("PartProtoss_Psi_Second_Wall"), true);
}

