// variables
static int heroSelection_Hero_DescriptionMasterFrame;
static int[gv_MaxAmountHeroes] heroSelection_Hero_Button;
static int heroSelection_AutoSelection_Button;

static int[gv_MaxAmountDifficulties] heroSelection_Difficulty_Button;
static int heroSelection_Difficulty_Button_Any;

static int heroSelection_Timer = 60;
static int heroSelection_Timer_Label;
static int heroSelection_Ready_Button;
static int heroSelection_Ready_Counter;

static int [gv_MaxAmountPlayers + 1] heroSelection_Player_Showcase;
static int [gv_MaxAmountPlayers + 1] heroSelection_Player_ShowcaseDiffLabel;
static int [gv_MaxAmountPlayers + 1] heroSelection_Player_ShowcaseRankLabel;
static int [gv_MaxAmountPlayers + 1] heroSelection_Player_HeroSelected;
static int [gv_MaxAmountPlayers + 1] heroSelection_Player_DifficultySelected;
static bool[gv_MaxAmountPlayers + 1] heroSelection_Player_IsReady;

static trigger HeroSelection_Hero_ButtonHandler_Trigger;
static trigger HeroSelection_Ready_ButtonHandler_Trigger;
static trigger HeroSelection_AutoSelection_ButtonHandler_Trigger;

static trigger HeroSelection_Diff_ButtonHandler_Trigger;
static trigger HeroSelection_Timer_Handler_Trigger;

static const int maxAmountCustomDiffSettings = 18;

struct HeroSelection_CustomDiff_DiffPreset {
    fixed[maxAmountCustomDiffSettings] values;
    bool[1] flags;
};
static int[gv_MaxAmountDifficulties] heroSelection_CustomDiff_PresetButtons;
static int heroSelection_CustomDiff_CustomPresetInputEditBox;
static int heroSelection_CustomDiff_CustomPresetInputCreateButton;
static int heroSelection_CustomDiff_CustomPresetInputCopyClipboardButton;
static int heroSelection_CustomDiff_CustomPresetInputLoadButton;
static int[maxAmountCustomDiffSettings] heroSelection_CustomDiff_Editboxes;
static bool[maxAmountCustomDiffSettings] heroSelection_CustomDiff_ValidInput;
static int heroSelection_CustomDiff_SkipToP1Checkbox;
static int heroSelection_CustomDiff_Host;
static playergroup heroSelection_CustomDiff_NotHostPlayerGroup;
static trigger HeroSelection_CustomDiff_Editbox_Handler_Trigger;
static trigger heroSelection_CustomDiff_SkipToP1Checkbox_Handler_Trigger;
static trigger HeroSelection_CustomDiff_DiffPresetHandler_Handler_Trigger;
static trigger HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler_Trigger;
static trigger HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler_Trigger;
static trigger HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler_Trigger;

// unlocks diff and everything below
void HeroSelection_UnlockDiff (int playerID, int diff) {
    int tmpInt;
    if (gv_GameMode == c_GameMode_Classic) {
        for ( tmpInt= 0 ; tmpInt <= diff; tmpInt += 1 ) {
            DialogControlSetEnabled(heroSelection_Difficulty_Button[tmpInt], PlayerGroupSingle(playerID), true);
        }
    }
}

// unlocks the hero and adds it to the option hero selection
void HeroSelection_UnlockHero(int playerID, int heroID){
    gv_PlayerStats[playerID].heroUnlocked |= (1 << heroID);
    if (gv_Part_ActivePart == c_Part_None) {
        DialogControlSetAnimationState(DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "Hero" + IntToString(heroID + 1)), PlayerGroupSingle(playerID), "Unlocked", "True");
    }
    Options_HeroSelection_AddItem(playerID, heroID);
}

// updates showcase, checks the auto selection button state
void HeroSelection_SelectHero (int playerID, int heroID) {
    DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(playerID), true);
    DialogControlSetVisible(heroSelection_AutoSelection_Button, PlayerGroupSingle(playerID), true);
    DialogControlSetAnimationState(heroSelection_Player_Showcase[playerID], PlayerGroupAll(), "Hero", IntToString(heroID + 1));
    if (gv_GameMode == c_GameMode_Classic) {
        DialogControlSetAnimationState(heroSelection_Hero_DescriptionMasterFrame, PlayerGroupSingle(playerID), "Hero", IntToString((heroID + 1)));
    }
    heroSelection_Player_HeroSelected[playerID] = heroID;
    if ( !gv_PlayerStats[playerID].options_HeroSelection_Flag
        || heroSelection_Player_HeroSelected[playerID] != gv_PlayerStats[playerID].options_HeroSelection_Hero ) {
        DialogControlSetEnabled(heroSelection_AutoSelection_Button, PlayerGroupSingle(playerID), true);
    }
    else {
        DialogControlSetEnabled(heroSelection_AutoSelection_Button, PlayerGroupSingle(playerID), false);
    }
}

// destroys all trigger related to heroselection which arent needed anymore
static void HeroSelection_Finish_Triggers_Destroy () {
    TriggerDestroy(HeroSelection_Hero_ButtonHandler_Trigger);
    TriggerDestroy(HeroSelection_Ready_ButtonHandler_Trigger);
    TriggerDestroy(HeroSelection_AutoSelection_ButtonHandler_Trigger);
    if(gv_GameMode == c_GameMode_Classic){
        TriggerDestroy(HeroSelection_Diff_ButtonHandler_Trigger);
        if (gv_PlayerAmountStart != 1) {TriggerDestroy(HeroSelection_Timer_Handler_Trigger);}
    }
    else if (gv_GameMode == c_GameMode_CustomDiff){
        TriggerDestroy(HeroSelection_CustomDiff_Editbox_Handler_Trigger);
        TriggerDestroy(heroSelection_CustomDiff_SkipToP1Checkbox_Handler_Trigger);
        TriggerDestroy(HeroSelection_CustomDiff_DiffPresetHandler_Handler_Trigger);
        TriggerDestroy(HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler_Trigger);
        TriggerDestroy(HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler_Trigger);
        TriggerDestroy(HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler_Trigger);
    }
}

// creates new triggers or calls the corresponding init function
static void HeroSelection_Finish_Triggers_Create () {
    Enemy_Generic_TriggerCreate();
    TriggerAddEventTimePeriodic(TriggerCreate("StatsInterface_UpdatePeriodic"), 20, c_timeGame);
    TriggerExecute(TriggerCreate("HeroPanel_PeriodicUpdate"), false, false);
    Hive_TriggerCreate();
    PartZerg_Moopy_SecretActivated_Init();
}

void HeroSelection_Player_ShowcaseSetDiff (int playerID, text diff) {
    libNtve_gf_SetDialogItemText(heroSelection_Player_ShowcaseDiffLabel[playerID], diff, PlayerGroupAll());
}
void HeroSelection_Player_ShowcaseSetRank (int playerID) {
    color playercolor = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(playerID, false));
    text filltext;
    if(gv_PlayerStats[playerID].acvScore_Custom == false){
        filltext = FixedToText(gv_PlayerStats[playerID].acvScore, -1);
    }
    else {
        filltext = gv_PlayerStats[playerID].acvScore_TextCustom;
    }
    libNtve_gf_SetDialogItemText(heroSelection_Player_ShowcaseRankLabel[playerID], TextWithColor(gv_PlayerStats[playerID].acvScoreRank + StringToText("(") + filltext + StringToText(")"), playercolor), PlayerGroupAll());
}


static int HeroSelection_GetHeroButtonID (int dialogItem) {
    int tmpInt;
    for ( tmpInt = 0; tmpInt < gv_MaxAmountHeroes ; tmpInt += 1 ) {
        if (dialogItem == heroSelection_Hero_Button[tmpInt]) {
            return tmpInt;
        }
    }
    return -1;
}
static int HeroSelection_GetDiffButtonID (int dialogItem) {
    int tmpInt;
    for ( tmpInt = 0; tmpInt < gv_MaxAmountDifficulties ; tmpInt += 1 ) {
        if ((dialogItem == heroSelection_Difficulty_Button[tmpInt])) {
            return tmpInt;
        }
    }
    if (dialogItem == heroSelection_Difficulty_Button_Any) {
        return -1;
    }
    return -2;
}

// custom difficulty functions
static bool HeroSelection_CustomDiff_AllInputsValid () {
    int tmpInt;
    for ( tmpInt = 0; tmpInt < maxAmountCustomDiffSettings ; tmpInt += 1 ) {
        if (heroSelection_CustomDiff_ValidInput[tmpInt] == false) {
            return false;
        }
    }
    return true;
}
static int HeroSelection_CustomDiff_GetEditboxID (int dialogItem) {
    int tmpInt;
    tmpInt = 0;
    for ( tmpInt = 0; tmpInt < maxAmountCustomDiffSettings ; tmpInt += 1 ) {
        if (dialogItem == heroSelection_CustomDiff_Editboxes[tmpInt]) {
            return tmpInt;
        }
    }
    return -1;
}
static void HeroSelection_CustomDiff_HighlightRewardDiff (int diff) {
    int tmpInt;
    if ((diff == -2)) {
        for (tmpInt = 0 ; tmpInt < gv_MaxAmountDifficulties; tmpInt += 1 ) {
            libNtve_gf_SetDialogItemColor(heroSelection_CustomDiff_PresetButtons[tmpInt], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
        }
    }
    else {
        if ((diff == -1)) {
            for ( tmpInt = 0; tmpInt < gv_MaxAmountDifficulties ; tmpInt += 1 ) {
                libNtve_gf_SetDialogItemColor(heroSelection_CustomDiff_PresetButtons[tmpInt], Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }
        }
        else {
            for ( tmpInt = 0;tmpInt < gv_MaxAmountDifficulties ; tmpInt += 1 ) {
                libNtve_gf_SetDialogItemColor(heroSelection_CustomDiff_PresetButtons[tmpInt], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
            }
            libNtve_gf_SetDialogItemColor(heroSelection_CustomDiff_PresetButtons[diff], Color(50.20, 100.00, 50.20), PlayerGroupAll());
        }
    }
}
// overwrites the structref with values for the difficulty in classic game mode
static void HeroSelection_CustomDiff_DiffPresetReturn (structref<HeroSelection_CustomDiff_DiffPreset> returnSettings, int diff) {

    string diffBuff = "Difficulty" + IntToString(diff);
    int tmpInt;

    returnSettings.values[0]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.DamageDealtScaled[0]" , gv_EnemyPlayer);           //damage flat
    returnSettings.values[1]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.DamageDealtFraction[0]" , gv_EnemyPlayer) * 100;   //damage %
    returnSettings.values[2]  = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.AttackSpeedMultiplier" , gv_EnemyPlayer)-1) *100; //atkspd
    returnSettings.values[3]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.VitalMaxFractionArray[Life]" , gv_EnemyPlayer)*100;//vitals %
    returnSettings.values[4]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.LifeArmorBonus" , gv_EnemyPlayer);                 //armor flat
    returnSettings.values[5]  = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.LifeArmorMultiplier" , gv_EnemyPlayer)-1) *100;   //armor %
    returnSettings.values[6]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.VitalRegenArray[Life]" , gv_EnemyPlayer);          //regen flat
    returnSettings.values[7]  = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.VitalRegenMultiplier[0]" , gv_EnemyPlayer) *100;   //regen %
    returnSettings.values[8]  = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, diffBuff, "Modification.MoveSpeedMultiplier" , gv_EnemyPlayer)-1) *100;   //movespeed
    returnSettings.values[9]  = (UserDataGetFixed("DifficultyTable", IntToString(diff), "SpawnMult", 1)-1)*100;                                                         //spawn mult
    returnSettings.values[10] = (UserDataGetFixed("DifficultyTable", IntToString(diff), "BiomassMult", 1)-1)*100;                                                       //biomass mult
    returnSettings.values[11] = (UserDataGetFixed("DifficultyTable", IntToString(diff), "ExpMult", 1)-1)*100;                                                           //exp mult
    returnSettings.values[12] = (UserDataGetFixed("DifficultyTable", IntToString(diff), "UpgradeCountFactor", 1)-1)*100;                                                //upgrade count mult
    returnSettings.values[13] = 0;                                                                                                                                      //start biomass
    returnSettings.values[14] = 0;                                                                                                                                      //start exp
    returnSettings.values[15] = IntToFixed(diff);                                                                                                                       //boss ability level
    returnSettings.values[16] = 0;                                                                                                                                      //start mutations
    returnSettings.values[17] = 0;                                                                                                                                      //lifes
    returnSettings.flags[0]   = false;                                                                                                                                  //skip to p2 flag
}
static int HeroSelection_CustomDiff_DirectRewardDiff () {
    fixed[maxAmountCustomDiffSettings] settings;
    HeroSelection_CustomDiff_DiffPreset thresholds;
    int tmpInt;
    int tmpInt2;
    int thresholdfound;
    bool tmpbool;

    if (libNtve_gf_DialogItemIsChecked(heroSelection_CustomDiff_SkipToP1Checkbox, heroSelection_CustomDiff_Host)) {
        return -1;
    }
    for ( tmpInt2 = 0; tmpInt2 <= maxAmountCustomDiffSettings ; tmpInt2 += 1 ) {
        settings[tmpInt2] = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[tmpInt2], heroSelection_CustomDiff_Host));
    }
    tmpbool = true;
    thresholdfound = (gv_MaxAmountDifficulties - 1);
    for ( tmpInt = 0; tmpInt < maxAmountCustomDiffSettings ; tmpInt += 1 ) {
        HeroSelection_CustomDiff_DiffPresetReturn(thresholds, tmpInt);
        for ( tmpInt2 = 0; tmpInt2 <= maxAmountCustomDiffSettings; tmpInt2 += 1 ) {
            if (!(tmpInt2 == 10 || tmpInt2 == 11 || tmpInt2 == 12 || tmpInt2 == 13 || tmpInt2 == 14)) {
                if (settings[tmpInt2] < thresholds.values[tmpInt2]) {
                    tmpbool = false;
                }
            }
            if (tmpInt2 == 10 || tmpInt2 == 11 || tmpInt2 == 13 || tmpInt2 == 14 || tmpInt2 == 16 || tmpInt2 == 17) {
                if (settings[tmpInt2] > thresholds.values[tmpInt2]) {
                    tmpbool = false;
                }
            }
        }
        if (tmpbool == false) {
            thresholdfound = (tmpInt - 1);
            break;
        }
    }
    if (thresholdfound >= 0) {
        HeroSelection_CustomDiff_DiffPresetReturn(thresholds, thresholdfound);
        if ((settings[12] > thresholds.values[12])) {
            thresholdfound = -1;
        }
    }
    return thresholdfound;
}

static void HeroSelection_CustomDiff_AnyChangeUpdater () {
    if (HeroSelection_CustomDiff_AllInputsValid()) {
        if ((heroSelection_Player_HeroSelected[heroSelection_CustomDiff_Host] != -1)) {
            DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(heroSelection_CustomDiff_Host), true);
            libNtve_gf_SetDialogItemTooltip(heroSelection_Ready_Button, StringToText(""), PlayerGroupSingle(heroSelection_CustomDiff_Host));
        }
        else {
            DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(heroSelection_CustomDiff_Host), false);
            libNtve_gf_SetDialogItemTooltip(heroSelection_Ready_Button, StringExternal("Trig/HeroSelection/Dialog/ReadyButtonTooltip"), PlayerGroupSingle(heroSelection_CustomDiff_Host));
        }
        DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputCreateButton, gv_ActivePG, true);
        HeroSelection_CustomDiff_HighlightRewardDiff(HeroSelection_CustomDiff_DirectRewardDiff());
    }
    else {
        DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(heroSelection_CustomDiff_Host), false);
        libNtve_gf_SetDialogItemTooltip(heroSelection_Ready_Button, StringExternal("Trig/HeroSelection/Dialog/ReadyButtonCustomDiffHostTooltip"), PlayerGroupSingle(heroSelection_CustomDiff_Host));
        DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputCreateButton, gv_ActivePG, false);
        HeroSelection_CustomDiff_HighlightRewardDiff(-2);
    }
}

static int HeroSelection_CustomDiff_GetDiffPresetID (int dialogItem) {
    int tmpInt;
    for (tmpInt = 0 ; tmpInt < gv_MaxAmountDifficulties ; tmpInt += 1 ) {
        if ((dialogItem == heroSelection_CustomDiff_PresetButtons[tmpInt])) {
            return tmpInt;
        }
    }
    return -1;
}

// sets the editbox values according to the preset parameter
static void HeroSelection_CustomDiff_DiffPresetSet (structref<HeroSelection_CustomDiff_DiffPreset> preset) {
    int tmpInt;
    for ( tmpInt=0 ; tmpInt <= maxAmountCustomDiffSettings; tmpInt += 1 ) {
        libNtve_gf_SetDialogItemEditorValue(heroSelection_CustomDiff_Editboxes[tmpInt], FixedToString(preset.values[tmpInt], c_fixedPrecisionAny), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemChecked(heroSelection_CustomDiff_SkipToP1Checkbox, preset.flags[0], PlayerGroupAll());
}

// opens areas, spawns and kills bosses, kills observer; still uses gf_Junker/Blackops area openers
static void HeroSelection_CustomDiff_SkipToP1 () {
    int player = heroSelection_CustomDiff_Host;
    PartTerran_AreaBlackOps_Second_Open();
    PartTerran_AreaBlackOps_Third_Open();
    PartTerran_AreaJunker_Second_Open();
    PartTerran_AreaJunker_Third_Open();

    TriggerExecute(TriggerFind("PartTerran_Boss_Flamer_Spawner"), false, true);
    UnitDamage(gv_PlayerStats[player].heroUnit, "KillTargetDeathNormal", gv_Bosses[c_Bosses_TFlamer], 0.0);
    TriggerExecute(TriggerFind("PartTerran_Boss_Fortress_Spawner"), false, true);
    UnitDamage(gv_PlayerStats[player].heroUnit, "KillTargetDeathNormal", gv_Bosses[c_Bosses_TFortress], 0.0);
    TriggerExecute(TriggerFind("PartTerran_Boss_Hammer_Spawner"), false, true);
    UnitDamage(gv_PlayerStats[player].heroUnit, "KillTargetDeathNormal", gv_Bosses[c_Bosses_THammer], 0.0);
    UnitKill(gv_Observer_Unit);
}

// writes editbox values into the custom difficulty buff and the difficulty variables
static void HeroSelection_CustomDiff_SetOptions () {
    fixed tmpval;
    int thresholdfound;
    int tmpInt;

    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[0], heroSelection_CustomDiff_Host));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(0) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(1) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(2) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(3) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtScaled[" + IntToString(4) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[1], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Melee]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[NoProc]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Ranged]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Spell]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.DamageDealtFraction[Splash]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[2], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[3], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Energy]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Life]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalMaxFractionArray[Shields]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[4], heroSelection_CustomDiff_Host));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.LifeArmorBonus", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.ShieldArmorBonus", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[5], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.LifeArmorMultiplier", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.ShieldArmorMultiplier", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[6], heroSelection_CustomDiff_Host));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Energy]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Life]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogReferenceSet("Behavior,DifficultyCustom,Modification.VitalRegenArray[Shields]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[7], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(0) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(1) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.VitalRegenMultiplier[" + IntToString(2) + "]", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[8], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyCustom", "Modification.MoveSpeedMultiplier", gv_EnemyPlayer, FixedToString(tmpval, c_fixedPrecisionAny));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[9], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    gv_Difficulty_SpawnMult = tmpval;
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[10], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    gv_Difficulty_BiomassMult = tmpval;
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[11], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    gv_Difficulty_ExpMult = tmpval;
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[12], heroSelection_CustomDiff_Host));
    tmpval = (tmpval / 100.0);
    tmpval = (tmpval + 1.0);
    gv_Difficulty_UpgradeCountFactor = tmpval;
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[13], heroSelection_CustomDiff_Host));

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        Acv_Reward_StartBiomassP0(tmpInt, tmpval);
    }
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[14], heroSelection_CustomDiff_Host));

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        Acv_Reward_StartExpP0(tmpInt, tmpval);
    }
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[15], heroSelection_CustomDiff_Host));
    libNtve_gf_SetUpgradeLevelForPlayer(gv_EnemyPlayer, "BossAbilityDifficultyRequirement", RoundI(tmpval));
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[16], heroSelection_CustomDiff_Host));

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        PlayerModifyPropertyFixed(tmpInt, c_playerPropVespene, c_playerPropOperAdd, tmpval);
    }
    tmpval = StringToFixed(libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[17], heroSelection_CustomDiff_Host));

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        gv_PlayerStats[tmpInt].lifes += RoundI(tmpval);
    }
    thresholdfound = HeroSelection_CustomDiff_DirectRewardDiff();
    if (thresholdfound >= 0) {

        gv_Difficulty = thresholdfound;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Trig/HeroSelection/CustomDiff/ApproximatedDiff")+StringExternal("Trig/HeroSelection/Dialog/DiffButton/D" + IntToString(thresholdfound) ) ));
    }
    else {
        gv_Difficulty = gv_MaxAmountDifficulties;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/HeroSelection/CustomDiff/ApproximatedDiffNone"));
    }

    if(thresholdfound == -1){
        gv_ValidGame = false;
        gv_Difficulty_Points = 0;
        gv_Difficulty_ScientistsAmount = 0;
        gv_Difficulty_EssenceAmount = 0;
        gv_Difficulty_PsiOrbSpawns = false;
    }
    else {
        gv_Difficulty_Points = UserDataGetInt("DifficultyTable", IntToString(thresholdfound), "Points", 1);
        gv_Difficulty_ScientistsAmount = UserDataGetInt("DifficultyTable", IntToString(thresholdfound), "ScientistsAmount", 1);
        gv_Difficulty_EssenceAmount = UserDataGetInt("DifficultyTable", IntToString(thresholdfound), "EssenceAmount", 1);
        gv_Difficulty_PsiOrbSpawns = UserDataGetInt("DifficultyTable", IntToString(thresholdfound), "PsoOrbSpawn", 1) > 0;
    }
    CatalogFieldValueModify(c_gameCatalogBehavior, "VoidContainmentWeaponDebuff", "Modification.VitalRegenArray[" + IntToString(2) + "]", gv_EnemyPlayer, FixedToString((1.0 + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.DamageDealtFraction[" + IntToString(0) + "]", c_playerAny)), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "VoidMineWeaponPersistent", "PeriodicEffectRateMultiplier", gv_EnemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "SentryNerazimWeaponPersistent", "PeriodicEffectRateMultiplier", gv_EnemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogEffect, "SentryPurifierWeaponPersistent", "PeriodicEffectRateMultiplier", gv_EnemyPlayer, FixedToString(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DifficultyCustom", "Modification.AttackSpeedMultiplier", c_playerAny), c_fixedPrecisionAny), c_upgradeOperationMultiply);
    if (libNtve_gf_DialogItemIsChecked(heroSelection_CustomDiff_SkipToP1Checkbox, heroSelection_CustomDiff_Host)) {
        HeroSelection_CustomDiff_SkipToP1();
    }
}

static void HeroSelection_CustomDiff_NewHostAfterLeave (int newhost) {
    string inputEditboxString;

    inputEditboxString = libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_CustomPresetInputEditBox, newhost);
    if ((heroSelection_Player_IsReady[newhost] == true)) {
        heroSelection_Player_IsReady[newhost] = false;
        heroSelection_Ready_Counter -= 1;
        DialogControlSetVisible(heroSelection_Ready_Button, PlayerGroupSingle(newhost), true);
        DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(newhost), false);
    }
    heroSelection_CustomDiff_Host = newhost;
    PlayerGroupRemove(heroSelection_CustomDiff_NotHostPlayerGroup, heroSelection_CustomDiff_Host);
    DialogControlSetAnimationState(DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "GameModeCustom"), PlayerGroupSingle(heroSelection_CustomDiff_Host), "Host", "True");
    libNtve_gf_SetDialogItemEditorValue(heroSelection_CustomDiff_CustomPresetInputEditBox, "", PlayerGroupSingle(newhost));
    libNtve_gf_SetDialogItemEditorValue(heroSelection_CustomDiff_CustomPresetInputEditBox, inputEditboxString, PlayerGroupSingle(newhost));
}

static void HeroSelection_CustomDiff_CustomPreset_CreateInput (int player) {
    string inputString = "";
    int tmpInt;

    for ( tmpInt = 0; tmpInt < maxAmountCustomDiffSettings; tmpInt += 1 ) {
        inputString = (inputString + " " + libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_Editboxes[tmpInt], heroSelection_CustomDiff_Host));
    }

    if (libNtve_gf_DialogItemIsChecked(heroSelection_CustomDiff_SkipToP1Checkbox, heroSelection_CustomDiff_Host)) {
        inputString = (inputString + " 1");
    }
    else {
        inputString = (inputString + " 0");
    }
    libNtve_gf_SetDialogItemEditorValue(heroSelection_CustomDiff_CustomPresetInputEditBox, inputString, PlayerGroupSingle(player));
    DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputCopyClipboardButton, PlayerGroupSingle(player), true);
}

static bool HeroSelection_CustomDiff_CustomPreset_LoadInputAndCheck (structref<HeroSelection_CustomDiff_DiffPreset> preset) {
    string inputString = libNtve_gf_DialogItemEditValue(heroSelection_CustomDiff_CustomPresetInputEditBox, heroSelection_CustomDiff_Host);
    int tmpInt;
    string tmpString = "";
    bool endFlag = true;
    
    for ( tmpInt = 0; tmpInt < maxAmountCustomDiffSettings ; tmpInt += 1 ) {
        tmpString = StringWord(inputString, (tmpInt + 1));
        if (Utility_IsNumber(tmpString)) {
            preset.values[tmpInt] = StringToFixed(tmpString);
        }
        else {
            preset.values[tmpInt] = 0.0;
            endFlag = false;
            return false;
        }
    }
    tmpString = StringWord(inputString, (tmpInt + 1));
    if ((tmpString == "0" || tmpString == "1")) {
        if (tmpString == "1") {
            preset.flags[0] = true;
        }
        else {
            preset.flags[0] = false;
        }
    }
    else {
        endFlag = false;
        return false;
    }
    tmpInt += 1;
    tmpString = StringWord(inputString, (tmpInt + 1));
    if (tmpString != "") {
        endFlag = false;
        return false;
    }

    if (endFlag == true) {
        return true;
    }
    else {
        return false;
    }
}

// finalizes choices of hero and difficulty, starts the game.
void HeroSelection_Finish () {
    int tmpInt;
    int[gv_MaxAmountDifficulties] diffVotesSum;
    text outputText;
    int totalVotes = 0;
    trigger tmpTrigger;

    gv_Part_ActivePart = c_Part_Terran;
    Debug_Override_FirstPart();
    
    Part_InitVariables();
    HeroSelection_Finish_Triggers_Destroy();
    DialogControlSetVisible(gv_HeroSelection_MainFrame, PlayerGroupAll(), false);
    tmpTrigger = TriggerCreate("Player_HeroDies");

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }

        // create Hero and Overlord
        if (heroSelection_Player_HeroSelected[tmpInt] == -1) {
            heroSelection_Player_HeroSelected[tmpInt] = 0;
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_Hero_UnitTypes[heroSelection_Player_HeroSelected[tmpInt]], 0, tmpInt, gv_Part_PlayerSpawnPoints[tmpInt]);
        gv_PlayerStats[tmpInt].heroUnit = UnitLastCreated();
        TriggerAddEventUnitDied(tmpTrigger, UnitRefFromUnit(gv_PlayerStats[tmpInt].heroUnit));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, gv_PlayerStats[tmpInt].startExp[c_Part_Terran]);
        if ( gv_PlayerStats[tmpInt].options_ControlGroup_Flag[0]) {
            UnitControlGroupAddUnit(tmpInt, gv_PlayerStats[tmpInt].options_ControlGroup_Group[0], UnitLastCreated());
        }
        HeroPanel_SetIcon(tmpInt, heroSelection_Player_HeroSelected[tmpInt]);
        UnitGroupSelect(UnitGroupSelected(tmpInt), tmpInt, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BaseOverlord", 0, tmpInt, gv_Part_PlayerSpawnPoints[tmpInt]);
        if (gv_PlayerStats[tmpInt].options_ControlGroup_Flag[1]) {
            UnitControlGroupAddUnit(tmpInt, gv_PlayerStats[tmpInt].options_ControlGroup_Group[1], UnitLastCreated());
        }
        gv_PlayerStats[tmpInt].overlord = UnitLastCreated();
        if(gv_PlayerStats[tmpInt].options_InitialUnitSelection == c_InitialHeroSelection_Hero
            || gv_PlayerStats[tmpInt].options_InitialUnitSelection == c_InitialHeroSelection_Both){
            UnitSelect(gv_PlayerStats[tmpInt].heroUnit, tmpInt, true);
        }
        if(gv_PlayerStats[tmpInt].options_InitialUnitSelection == c_InitialHeroSelection_Overlord
            || gv_PlayerStats[tmpInt].options_InitialUnitSelection == c_InitialHeroSelection_Both){
            UnitSelect(gv_PlayerStats[tmpInt].overlord, tmpInt, true);
        }
        Acv_Reward_Spellpower_UpdateEffects(tmpInt);
    }
    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }

        if (heroSelection_Player_DifficultySelected[tmpInt] >= 0) {
            totalVotes += 1;
            diffVotesSum[heroSelection_Player_DifficultySelected[tmpInt]] += 1;
        }

    }
    // count diff votes
    if (totalVotes == 0) {
        gv_Difficulty = 0;
        outputText = StringExternal("Trig/HeroSelection/Dialog/DiffButton/D0");
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Trig/HeroSelection/DiffNone"));
    }
    else {
        gv_Difficulty = 0;
        for ( tmpInt = 1; tmpInt < gv_MaxAmountDifficulties; tmpInt += 1 ) {
            if (diffVotesSum[tmpInt] > diffVotesSum[gv_Difficulty]) {
                gv_Difficulty = tmpInt;
            }
        }
        if (gv_Difficulty == -1) {
            outputText = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Any");
        }
        else if (gv_Difficulty == gv_MaxAmountDifficulties) {
            outputText = StringExternal("Trig/HeroSelection/Dialog/DiffButton/Custom");
        }
        else {
            outputText = StringExternal("Trig/HeroSelection/Dialog/DiffButton/D" + IntToString(gv_Difficulty));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, Utility_TextExpressionReplacement("Trig/HeroSelection/DiffToken", outputText));
    }
    
    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(PlayerGroupAll(), tmpInt);
        if (tmpInt < 0) { break; }
        PlayerModifyPropertyInt(tmpInt, c_playerPropCustom, c_playerPropOperSetTo, gv_Difficulty);
    }
    if (gv_GameMode == c_GameMode_Classic) {
        Difficulty_SetVariables(gv_Difficulty);
    }
    else {
        HeroSelection_CustomDiff_SetOptions();
    }

    Hive_InitialSpawn();
    Collectibles_InitPart();
    Objectives_InitPart();
    Player_IncreaseUpgradeCount(40.0);

    PlayerBoard_SetTitle(Utility_TextExpressionReplacement("Trig/HeroSelection/DiffToken", outputText));
    DialogControlSetVisible(gv_HeroSelection_MainFrame, PlayerGroupAll(), false);
    GameSetMissionTimePaused(false);

    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    gv_GameActive = true;
    HeroSelection_Finish_Triggers_Create();
}

// handles player leaving while the hero selection is ongoing
void HeroSelection_PlayerLeavesHandling(int playerID){
    int tmpInt;

    PlayerSetColorIndex(playerID, 10, false);
    libNtve_gf_SetDialogItemDesaturated(heroSelection_Player_Showcase[playerID], true, PlayerGroupAll());
    HeroSelection_Player_ShowcaseSetRank(playerID);
    if (heroSelection_Player_IsReady[playerID]) {
        heroSelection_Ready_Counter -= 1;

        //changes alliance to other players, so dummy unit in the corner is not revealed in (maybe) zerg part
        tmpInt = -1;
        while (true) {
            tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
            if (tmpInt < 0) { break; }
            libNtve_gf_SetAlliance(playerID, tmpInt, libNtve_ge_AllianceSetting_Neutral);
        }
    }
    //checks if leaver would make game start
    if (heroSelection_Ready_Counter == gv_PlayerAmount) {

        //custom diff intercept for host leaving with invalid options
        if (heroSelection_CustomDiff_Host == playerID) {
            if (HeroSelection_CustomDiff_AllInputsValid()) {
                HeroSelection_Finish();
            }
            else {
                HeroSelection_CustomDiff_NewHostAfterLeave(PlayerGroupPlayer(gv_ActivePG, 1));
            }
        }
        else {
            HeroSelection_Finish();
        }
    }
    else {
        //select new custom diff host (player must be not ready (at least one exists due to above check)) or remove player from not host pg
        if (heroSelection_CustomDiff_Host == playerID && !heroSelection_Player_IsReady[playerID]) {
            tmpInt = -1;
            while (true) {
                tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
                if (tmpInt < 0) { break; }

                if (!heroSelection_Player_IsReady[tmpInt]) {
                    HeroSelection_CustomDiff_NewHostAfterLeave(tmpInt);
                    break;
                }
            }
        }
        else {
            PlayerGroupRemove(heroSelection_CustomDiff_NotHostPlayerGroup, playerID);
        }
    }
}

void HeroSelection_Init () {
    int tmpInt;
    string[maxAmountCustomDiffSettings] customDiff_LayoutNames;
    HeroSelection_CustomDiff_DiffPreset customDiff_Settings;

    gv_HeroSelection_MainFrame = DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SSF_HeroSelection");
    heroSelection_AutoSelection_Button = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "AutoSelectionButton");
    heroSelection_Timer_Label = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeLabel, "CounterLabel");
    heroSelection_Ready_Button = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "ReadyButton");
    
    HeroSelection_Ready_ButtonHandler_Trigger = TriggerCreate("HeroSelection_Ready_ButtonHandler");
    TriggerAddEventDialogControl(HeroSelection_Ready_ButtonHandler_Trigger, c_playerAny, heroSelection_Ready_Button, c_triggerControlEventTypeClick);
    HeroSelection_AutoSelection_ButtonHandler_Trigger = TriggerCreate("HeroSelection_AutoSelection_ButtonHandler");
    TriggerAddEventDialogControl(HeroSelection_AutoSelection_ButtonHandler_Trigger, c_playerAny, heroSelection_AutoSelection_Button, c_triggerControlEventTypeClick);
    HeroSelection_Hero_ButtonHandler_Trigger = TriggerCreate("HeroSelection_Hero_ButtonHandler");
    TriggerAddEventDialogControl(HeroSelection_Hero_ButtonHandler_Trigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);

    //enables player showcases or moves them if player not available
    for ( tmpInt = 1; tmpInt <= 6; tmpInt += 1 ) {
        heroSelection_Player_Showcase[tmpInt] = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, ("ShowcasePlayer" + IntToString(tmpInt)));
        heroSelection_Player_ShowcaseRankLabel[tmpInt] = DialogControlHookup(heroSelection_Player_Showcase[tmpInt], c_triggerControlTypeLabel, "Rank");
        heroSelection_Player_ShowcaseDiffLabel[tmpInt] = DialogControlHookup(heroSelection_Player_Showcase[tmpInt], c_triggerControlTypeLabel, "Diff");
        if (((PlayerType(tmpInt) == c_playerTypeUser) || (PlayerType(tmpInt) == c_playerTypeComputer))) {
            DialogControlSetVisible(heroSelection_Player_Showcase[tmpInt], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(DialogControlHookup(heroSelection_Player_Showcase[tmpInt], c_triggerControlTypeLabel, "PlayerName"), Utility_PlayerNameWithPlayerColor(tmpInt), PlayerGroupAll());
        }
        else {
            if ((tmpInt != 1)) {
                DialogControlSetPositionRelative(heroSelection_Player_Showcase[tmpInt], PlayerGroupAll(), c_anchorTopLeft, heroSelection_Player_Showcase[(tmpInt - 1)], c_anchorTopLeft, 0, 0);
            }
        }
        heroSelection_Player_DifficultySelected[tmpInt] = -1;
        
        HeroSelection_UnlockHero(tmpInt, 0);
    }

    for ( tmpInt = 0; tmpInt < gv_MaxAmountHeroes; tmpInt += 1 ) {
        heroSelection_Hero_Button[tmpInt] = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "Hero" + IntToString(tmpInt + 1) + "/Button");
    }
    
    if (gv_GameMode == c_GameMode_Classic) {
        HeroSelection_Diff_ButtonHandler_Trigger = TriggerCreate("HeroSelection_Diff_ButtonHandler");
        TriggerAddEventDialogControl(HeroSelection_Diff_ButtonHandler_Trigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);

        if (gv_PlayerAmountStart != 1) {
            DialogControlSetVisible(heroSelection_Timer_Label, PlayerGroupAll(), true);
            HeroSelection_Timer_Handler_Trigger = TriggerCreate("HeroSelection_Timer_Handler");
            TriggerAddEventTimePeriodic(HeroSelection_Timer_Handler_Trigger, 1.0, c_timeGame);
        }

        DialogControlSetVisible(DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "GameModeClassic"), PlayerGroupAll(), true);
        heroSelection_Hero_DescriptionMasterFrame = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "GameModeClassic/DescriptionMasterFrame");
        heroSelection_Difficulty_Button_Any = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeClassic/Diff-1");
        tmpInt = 0;
        for ( tmpInt = 0; tmpInt < gv_MaxAmountDifficulties; tmpInt += 1 ) {
            heroSelection_Difficulty_Button[tmpInt] = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeClassic/Diff" + IntToString(tmpInt));
            libNtve_gf_SetDialogItemText(heroSelection_Difficulty_Button[tmpInt], Utility_DiffNameColored(tmpInt), PlayerGroupAll());
        }
    }
    else if (gv_GameMode == c_GameMode_CustomDiff) {
        tmpInt = -1;
        while (true) {
            tmpInt = PlayerGroupNextPlayer(gv_StartingPG, tmpInt);
            if (tmpInt < 0) { break; }
            heroSelection_Player_DifficultySelected[tmpInt] = 6;
        }

        heroSelection_CustomDiff_Host = PlayerGroupPlayer(gv_ActivePG, 1);
        heroSelection_CustomDiff_NotHostPlayerGroup = PlayerGroupCopy(gv_ActivePG);
        PlayerGroupRemove(heroSelection_CustomDiff_NotHostPlayerGroup, heroSelection_CustomDiff_Host);
        DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "GameModeCustom");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(heroSelection_CustomDiff_Host), "Host", "True");

        tmpInt = 0;
        customDiff_LayoutNames[tmpInt] = "DmgFlat";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "DmgPercent";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "Atkspd";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "Vitals";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "ArmorFlat";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "ArmorPercent";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "RegenFlat";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "RegenPercent";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "Movementspeed";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "SpawnMultiplier";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "BiomassMultiplier";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "ExpMultiplier";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "Upgrades";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "StartBiomass";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "StartExp";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "BossAbilities";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "StartMutation";
        tmpInt += 1;
        customDiff_LayoutNames[tmpInt] = "Lifes";
        
        for ( tmpInt = 0; tmpInt <= maxAmountCustomDiffSettings; tmpInt += 1 ) {
            heroSelection_CustomDiff_Editboxes[tmpInt] = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeEditBox, "GameModeCustom/" + customDiff_LayoutNames[tmpInt] + "/Input");
        }
        
        heroSelection_CustomDiff_SkipToP1Checkbox = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeCheckBox, "GameModeCustom/SkipToP1/CheckBox");
        heroSelection_CustomDiff_CustomPresetInputEditBox = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeEditBox, "GameModeCustom/CustomPreset/Input");
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(heroSelection_CustomDiff_Host), true);
        heroSelection_CustomDiff_CustomPresetInputCreateButton = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/CreateInputButton");
        heroSelection_CustomDiff_CustomPresetInputCopyClipboardButton = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/CopyInputButton");
        heroSelection_CustomDiff_CustomPresetInputLoadButton = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeCustom/CustomPreset/LoadInputButton");

        for ( tmpInt = 0; tmpInt < gv_MaxAmountDifficulties; tmpInt += 1 ) {
            heroSelection_CustomDiff_PresetButtons[tmpInt] = DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypeButton, "GameModeCustom/DiffPreset" + IntToString(tmpInt));
            libNtve_gf_SetDialogItemText(heroSelection_CustomDiff_PresetButtons[tmpInt], Utility_DiffNameShortColored(tmpInt), PlayerGroupAll());
        }

        HeroSelection_CustomDiff_Editbox_Handler_Trigger = TriggerCreate("HeroSelection_CustomDiff_Editbox_Handler");
        TriggerAddEventDialogControl(HeroSelection_CustomDiff_Editbox_Handler_Trigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);

        heroSelection_CustomDiff_SkipToP1Checkbox_Handler_Trigger = TriggerCreate("heroSelection_CustomDiff_SkipToP1Checkbox_Handler");
        TriggerAddEventDialogControl(heroSelection_CustomDiff_SkipToP1Checkbox_Handler_Trigger, c_playerAny, heroSelection_CustomDiff_SkipToP1Checkbox, c_triggerControlEventTypeChecked);

        
        HeroSelection_CustomDiff_DiffPresetHandler_Handler_Trigger = TriggerCreate("HeroSelection_CustomDiff_DiffPresetHandler_Handler");
        TriggerAddEventDialogControl(HeroSelection_CustomDiff_DiffPresetHandler_Handler_Trigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);

        HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler_Trigger = TriggerCreate("HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler");
        TriggerAddEventDialogControl(HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler_Trigger, c_playerAny, heroSelection_CustomDiff_CustomPresetInputCreateButton, c_triggerControlEventTypeClick);

        HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler_Trigger = TriggerCreate("HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler");
        TriggerAddEventDialogControl(HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler_Trigger, c_playerAny, heroSelection_CustomDiff_CustomPresetInputEditBox, c_triggerControlEventTypeTextChanged);

        HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler_Trigger = TriggerCreate("HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler");
        TriggerAddEventDialogControl(HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler_Trigger, c_playerAny, heroSelection_CustomDiff_CustomPresetInputLoadButton, c_triggerControlEventTypeClick);


        // TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_LoadButton, true);
        // TriggerEnable(gt_HeroSelect_CustomDiff_CustomPreset_InputChanged, true);

        HeroSelection_CustomDiff_DiffPresetReturn(customDiff_Settings, 0);
        HeroSelection_CustomDiff_DiffPresetSet(customDiff_Settings);
    }

}

bool HeroSelection_Hero_ButtonHandler (bool testConds, bool runActions){
    int heroID = HeroSelection_GetHeroButtonID(EventDialogControl());
    if(testConds){
        if( ! ( heroID >= 0 )){
            return false;
        }
    }
    HeroSelection_SelectHero(EventPlayer(), heroID);
    return true;
}

bool HeroSelection_Ready_ButtonHandler (bool testConds, bool runActions){
    int trigPlayer=EventPlayer();
    int tmpInt;

    // increase ready counter. if all players ready, ignore rest of the function
    heroSelection_Ready_Counter +=1;
    heroSelection_Player_IsReady[trigPlayer] = true;
    if (heroSelection_Ready_Counter == gv_PlayerAmount){
        HeroSelection_Finish();
        return true;
    }
    // disable readybutton, showcase get saturated
    DialogControlSetEnabled(heroSelection_Ready_Button, PlayerGroupSingle(trigPlayer), false);
    DialogControlSendAnimationEvent(heroSelection_Player_Showcase[trigPlayer], PlayerGroupAll(), "PlayerReady");
    // make hero buttons invisible
    for(tmpInt = 0; tmpInt < gv_MaxAmountHeroes; tmpInt+= 1){
        DialogControlSetVisible(heroSelection_Hero_Button[tmpInt], PlayerGroupSingle(trigPlayer), false);
    }
    // disable difficulty buttons
    if(gv_GameMode == c_GameMode_Classic){
        for(tmpInt = 0; tmpInt < gv_MaxAmountDifficulties; tmpInt+= 1){
            DialogControlSetVisible(heroSelection_Difficulty_Button[tmpInt], PlayerGroupSingle(trigPlayer), false);
        }
        DialogControlSetVisible(heroSelection_Difficulty_Button_Any, PlayerGroupSingle(trigPlayer), false);
    }
    // if player was custom diff host, then disable input usage
    if(trigPlayer == heroSelection_CustomDiff_Host){
        DialogControlHookup(gv_HeroSelection_MainFrame, c_triggerControlTypePanel, "GameModeCustom");
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(heroSelection_CustomDiff_Host), "Host", "False");
        DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputLoadButton, PlayerGroupSingle(heroSelection_CustomDiff_Host), false);
    }
    return true;
}

bool HeroSelection_Diff_ButtonHandler (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    int diff = HeroSelection_GetDiffButtonID(EventDialogControl());

    if (testConds) {
        if (diff < -1) { return false; }
    }
    heroSelection_Player_DifficultySelected[trigPlayer] = diff;
    if( diff == -1){
        HeroSelection_Player_ShowcaseSetDiff(trigPlayer, StringExternal("Trig/HeroSelection/Dialog/DiffButton/Any"));
    }
    else {
        HeroSelection_Player_ShowcaseSetDiff(trigPlayer, StringExternal("Trig/HeroSelection/Dialog/DiffButton/D"+ IntToString(diff)));
    }
    return true;
}

bool HeroSelection_AutoSelection_ButtonHandler (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    DialogControlSetEnabled(heroSelection_AutoSelection_Button, PlayerGroupSingle(trigPlayer), false);
    Options_HeroSelection_SelectItem(trigPlayer, heroSelection_Player_HeroSelected[trigPlayer]);
    return true;
}

bool HeroSelection_Timer_Handler(bool testConds, bool runActions){
    heroSelection_Timer -= 1;
    libNtve_gf_SetDialogItemText(heroSelection_Timer_Label, IntToText(heroSelection_Timer), PlayerGroupAll());
    if(heroSelection_Timer <= 0){
        libNtve_gf_SetDialogItemText(heroSelection_Timer_Label, StringToText(""), PlayerGroupAll());
        HeroSelection_Finish();
    }
    return true;
}

bool HeroSelection_CustomDiff_Editbox_Handler (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    int editboxID = HeroSelection_CustomDiff_GetEditboxID(EventDialogControl());
    string input = libNtve_gf_DialogItemEditValue(EventDialogControl(), trigPlayer);
    fixed value;

    if(testConds){
        if(! (editboxID >= 0 && trigPlayer == heroSelection_CustomDiff_Host)){ return false;}
    }

    //set other players editboxes to the same value so they see the same
    libNtve_gf_SetDialogItemEditorValue(heroSelection_CustomDiff_Editboxes[editboxID], input, heroSelection_CustomDiff_NotHostPlayerGroup);

    if(Utility_IsNumber(input)){
        value = StringToFixed(input);
        //check for inputs which need to be > -100: these are all except 0,4,6,13,14,15,16,17
        if( !(editboxID == 0 || editboxID == 4 || editboxID ==  6 || editboxID ==  13 || editboxID ==  14 || editboxID ==  15 || editboxID == 16 || editboxID == 17) ){
            heroSelection_CustomDiff_ValidInput[editboxID] = (value > -100.0);
        }
        //0,4,6 are flat inputs that only need to be numbers
        else if (editboxID == 0 || editboxID == 4 || editboxID == 6){
            heroSelection_CustomDiff_ValidInput[editboxID] = true;
        }
        //13,14,16 have to be non-negative
        else if (editboxID == 13 || editboxID == 14 || editboxID == 16){
            heroSelection_CustomDiff_ValidInput[editboxID] = (value >= 0.0);
        }
        //15 needs to be integer and between 0 and MaxDiff-1
        else if (editboxID == 15){
            heroSelection_CustomDiff_ValidInput[editboxID] = (value >= 0) && (value < gv_MaxAmountDifficulties) && (value == Round(value));
        }
        //17 needs to be integer and non-negative
        else if (editboxID == 17){
            heroSelection_CustomDiff_ValidInput[editboxID] = (value >= 0) && (value == Round(value));
        }
    }
    else{
        heroSelection_CustomDiff_ValidInput[editboxID] = false;
    }
    //updates checkmark box next to the editbox
    DialogControlSetAnimationState(EventDialogControl(), PlayerGroupAll(), "ValidInput", libNtve_gf_ConvertBooleanToString(heroSelection_CustomDiff_ValidInput[editboxID]));
    HeroSelection_CustomDiff_AnyChangeUpdater();
    return true;
}

bool HeroSelection_CustomDiff_SkipToP1Checkbox_Handler (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();

    if(testConds){
        if ( ! (trigPlayer == heroSelection_CustomDiff_Host)) {return false;}
    }
    if(!runActions){return true;}

    libNtve_gf_SetDialogItemChecked(heroSelection_CustomDiff_SkipToP1Checkbox, libNtve_gf_DialogItemIsChecked(EventDialogControl(), trigPlayer), PlayerGroupAll());
    HeroSelection_CustomDiff_AnyChangeUpdater();
    return true;
}

bool HeroSelection_CustomDiff_DiffPreset_Handler (bool testConds, bool runActions){
    int diff = HeroSelection_CustomDiff_GetDiffPresetID(EventDialogControl());
    HeroSelection_CustomDiff_DiffPreset preset;

    if (testConds){
        if (! (diff >= 0)){
            return false;
        }
    }
    if (!runActions){return true;}

    HeroSelection_CustomDiff_DiffPresetReturn(preset, diff);
    HeroSelection_CustomDiff_DiffPresetSet(preset);

    return true;
}

bool HeroSelection_CustomDiff_CustomPresetInputCreateButton_Handler(bool testConds, bool runActions){
    if(!runActions){return true;}
    HeroSelection_CustomDiff_CustomPreset_CreateInput(EventPlayer());
    return true;
}

bool HeroSelection_CustomDiff_CustomPresetInputEditBox_Handler(bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    HeroSelection_CustomDiff_DiffPreset preset;
    bool validInput;

    if(testConds){
        if (!(trigPlayer == heroSelection_CustomDiff_Host)){return false;}
    }
    if (!runActions){return true;}

    validInput = HeroSelection_CustomDiff_CustomPreset_LoadInputAndCheck(preset);
    DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputLoadButton, PlayerGroupSingle(heroSelection_CustomDiff_Host), validInput);
    DialogControlSetEnabled(heroSelection_CustomDiff_CustomPresetInputCopyClipboardButton, PlayerGroupSingle(heroSelection_CustomDiff_Host), validInput);

    return true;
}

bool HeroSelection_CustomDiff_CustomPresetInputLoadButton_Handler(bool testConds, bool runActions){
    HeroSelection_CustomDiff_DiffPreset preset;

    if (!runActions){return true;}

    if(HeroSelection_CustomDiff_CustomPreset_LoadInputAndCheck(preset)){
        HeroSelection_CustomDiff_DiffPresetSet(preset);
    }
    else{
        UIDisplayMessage(PlayerGroupSingle(heroSelection_CustomDiff_Host), c_messageAreaSubtitle, StringToText("Error! Input string is not valid."));
    }

    return true;
}
