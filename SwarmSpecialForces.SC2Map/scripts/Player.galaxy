// add exp to player hero, clamps to max exp value
void Player_AddExp(int playerID, fixed amount){
    unit hero = gv_PlayerStats[playerID].heroUnit;
    if (UnitXPTotal(hero) < gv_Player_MaxExp) {
        UnitXPAddXP(hero, null, amount);
        // UnitSetPropertyFixed(hero, c_unitPropXP, (UnitXPTotal(hero) + amount));
        if (UnitXPTotal(hero) > gv_Player_MaxExp) {
            UnitSetPropertyFixed(hero, c_unitPropXP, gv_Player_MaxExp);
        }
    }
}

// reads exp and biomass from user data, applies difficulty, type modifiers and individual additions
void Player_KillReward(string unitType, point unitPosition){
    fixed baseExp = UserDataGetFixed("KillRewards", unitType, "Exp", 1);
    fixed baseBiomass = UserDataGetFixed("KillRewards", unitType, "Biomass", 1);
    int enemyType =  UserDataGetInt("KillRewards", unitType, "EnemyType", 1);
    fixed tmpVal;
    int tmpInt;

    baseExp *= gv_Difficulty_ExpMult;
    baseBiomass *= gv_Difficulty_BiomassMult;

    baseExp *= gv_Enemy_TypeMultiplier_Exp[enemyType];
    baseBiomass *= gv_Enemy_TypeMultiplier_Biomass[enemyType];

    tmpInt = -1;
    while(true){
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) {break;}
        
        Player_AddExp(tmpInt, (baseExp * gv_PlayerStats[tmpInt].expBonusMult) + gv_PlayerStats[tmpInt].expBonusAdd);

        tmpVal = (baseBiomass * gv_PlayerStats[tmpInt].biomassBonusMult) + gv_PlayerStats[tmpInt].biomassBonusAdd;
        PlayerModifyPropertyFixed(tmpInt, c_playerPropMinerals, c_playerPropOperAdd, tmpVal);

        Utility_DelayedTextTagCreate(StringToText("+") + FixedToText(tmpVal, 2), Color(0.00, 80.78, 0.00), unitPosition, PlayerGroupSingle(tmpInt),1.0);
    }
}

// rewards points after boss kill
void Player_GainPoints () {
    int tmpInt;

    //not needed as Enemy_BossDeath() checks this before executing this function
    if(!gv_ValidGame){ return; }

    UIDisplayMessage(gv_ActivePG, c_messageAreaSubtitle, Utility_TextExpressionReplacement3("Trig/Bosskilled", IntToText(gv_Part_AmountObjectivesDefeated), IntToText(gv_Part_AmountObjectivesMax), IntToText(gv_Difficulty_Points)));

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        Acv_Grind_UnlockAdd(tmpInt, c_AcvIdentifier_Points, gv_Difficulty_Points);
    }
}

// updates speedrun time and increases win counter if game is valid
void Player_PartWin_UpdateAcv(){
    int tmpInt;
    int tmpPlayer;
    int currentGameTime = FloorI(GameGetMissionTime());
    int teamSizeMaxForSmall = UserDataGetInt("AcvReqSpeedruns", "P"+IntToString(gv_Part_ActivePart)+"D"+IntToString(gv_Difficulty), "TeamSizeMaxForSmall", 1);
    int updatedTimeLowest;
    int updatedTimeHighest;

    if(!gv_ValidGame){ return; }
    tmpPlayer= -1;
    while(true){
        tmpPlayer = PlayerGroupNextPlayer(gv_ActivePG, tmpPlayer);
        if(tmpPlayer <0){break;}

        // only overwrites speedruntimes
        for (tmpInt = gv_PlayerAmountStart-1; tmpInt < gv_MaxAmountPlayers; tmpInt+= 1){
            if(gv_PlayerStats[tmpPlayer].speedrunsTime[gv_Part_ActivePart][gv_Difficulty][tmpInt] == 0 || gv_PlayerStats[tmpPlayer].speedrunsTime[gv_Part_ActivePart][gv_Difficulty][tmpInt] > currentGameTime){
                gv_PlayerStats[tmpPlayer].speedrunsTime[gv_Part_ActivePart][gv_Difficulty][tmpInt] = currentGameTime;
                Speedruns_UpdateTime(tmpPlayer, gv_Part_ActivePart, gv_Difficulty, tmpInt+1);
                if(updatedTimeLowest == 0){
                    updatedTimeLowest = tmpInt +1;
                    updatedTimeHighest = tmpInt +1;
                }
                else {
                    updatedTimeHighest = tmpInt +1;
                }
                //if gametime was faster for small team size acv, then check it; same with full team size
                if(tmpInt+1 == teamSizeMaxForSmall){
                    Acv_Speedruns_Check(tmpPlayer, gv_Part_ActivePart , gv_Difficulty, true);
                    if(!gv_PlayerStats[tmpPlayer].options_SpeedrunsDetails_Flag){
                        Popup_NewSpeedrunTimeSimplified(tmpPlayer, gv_Part_ActivePart, gv_Difficulty, currentGameTime, tmpInt+1);
                    }
                }
                else if (tmpInt +1 == gv_MaxAmountPlayers){
                    Acv_Speedruns_Check(tmpPlayer, gv_Part_ActivePart , gv_Difficulty, false);
                    if(!gv_PlayerStats[tmpPlayer].options_SpeedrunsDetails_Flag){
                        Popup_NewSpeedrunTimeSimplified(tmpPlayer, gv_Part_ActivePart, gv_Difficulty, currentGameTime, tmpInt+1);
                    }
                }
                gv_PlayerStats[tmpPlayer].saveFlag_Heavy = true;
                // no save request here, because points will make a save request anyway
            }
        }
        if(gv_PlayerStats[tmpPlayer].options_SpeedrunsDetails_Flag && updatedTimeLowest != 0){
            Popup_NewSpeedrunTimeDetailed(tmpPlayer, gv_Part_ActivePart, gv_Difficulty, currentGameTime, updatedTimeLowest, updatedTimeHighest);
        }
        Acv_Grind_UnlockAdd(tmpPlayer, c_AcvIdentifier_WinsP0 + gv_Part_ActivePart, 1);
    }
}

// updates playergroups and other stuff, when a player dies or leaves
void Player_RemoveActivePlayer (int playerID) {
    int tmpInt;
    fixed biomass;
    unitgroup tmpUG;
    unit tmpUnit;

    // general track keeping of players
    gv_PlayerStats[playerID].activeFlag = false;
    PlayerGroupRemove(gv_ActivePG, playerID);
    gv_PlayerAmount = PlayerGroupCount(gv_ActivePG);
    libNtve_gf_SetAlliance(playerID, gv_BasePlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);

    // kill all units from that player, excluding reviving eggs to allow reuse if player leaves while reviving
    tmpUG = UnitGroup(null, playerID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }

        if( !UnitHasBehavior(tmpUnit, "RespawnEgg@Reviving")){
            UnitKill(tmpUnit);
        }
    }

    StatsInterface_PlayerRemove(playerID);
    Votekick_PlayerRemove(playerID);

    // biomass & mutations handling
    biomass = PlayerGetPropertyFixed(playerID, c_playerPropMinerals);
    PlayerModifyPropertyFixed(playerID, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(playerID, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        PlayerModifyPropertyFixed(tmpInt, c_playerPropMinerals, c_playerPropOperAdd, (biomass / gv_PlayerAmount));
    }

    // if still in heroselection
    if (gv_Part_ActivePart == c_Part_None) {
        HeroSelection_PlayerLeavesHandling(playerID);
    }

    // if no player left, stop the game
    if (gv_PlayerAmount == 0) {
        TimerPause(gv_SpawnTimer, true);
        TimerPause(gv_IdleTimer, true);
        gv_GameActive = false;
        return;
    }
}

// increase the amount of available upgrades, modified by the difficulty factor and rounded
void Player_IncreaseUpgradeCount (fixed increaseBase) {
    int tmpInt;
    int upgradeCountRounded;

    gv_UpgradeCount += increaseBase;
    upgradeCountRounded = RoundI(gv_UpgradeCount * gv_Difficulty_UpgradeCountFactor);
    if (upgradeCountRounded > 120) {
        upgradeCountRounded = 120;
    }

    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
        if (tmpInt < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(tmpInt, "UnlockDmgArmorCount", upgradeCountRounded);
    }
}

// saves the hero unit when dying, to prevent any issues when death timer runs out
void Player_Revive_SaveHero(int player){
    unit hero = gv_PlayerStats[player].heroUnit;
    UnitRevive(hero);
    UnitSetPosition(hero, PointFromName("DummySpawn"), false);
    UnitSetState(hero, c_unitStateInvulnerable, true);
    UnitSetPropertyFixed(hero, c_unitPropLifePercent, 100.0);
    libNtve_gf_ShowHideUnit(hero, false);
    UnitSetState(hero, c_unitStateStunned, true);
}

// moves the hero back into the playable area after the the revive timer runs out
void Player_Revive_ReleaseHero(int player, point position){
    unit hero = gv_PlayerStats[player].heroUnit;
    CameraPan(player, position, 1.0, -1, 10.0, false);
    UnitSetPosition(hero, position, false);
    UnitSetState(hero, c_unitStateInvulnerable, false);
    UnitSetState(hero, c_unitStateStunned, false);
    libNtve_gf_ShowHideUnit(hero, true);
}

// updates everything when a hero dies (for real)
void Player_HeroDied(int player){
    PlayerBoard_SetCustomRankText(player, StringExternal("Trig/PlayerDies/Rank"));
    gv_PlayerStats[player].spectatingFlag = true;
    PlayerGroupAdd(gv_SpectatingPG, player);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, Utility_TextExpressionReplacement("Trig/PlayerDies", Utility_PlayerNameWithPlayerColor(player)));
    CustomDefeatFrame_Show(player);
    HeroPanel_HeroDied(player);
    Player_RemoveActivePlayer(player);
}

// initializes stuff related to cybernetic units
void Player_Cybernetic_Init(){
    fixed lifeBankCount;
    int i;
    lifeBankCount = Ceiling(gv_PlayerAmountStart / 2.0);
    for (i = 0; i < gv_MaxAmountPlayers; i += 1) {
        CatalogFieldValueSet(c_gameCatalogAbil, "CyberneticTrain", "InfoArray[2].Charge.CountStart", i, FixedToString(lifeBankCount, c_fixedPrecisionAny));
    }
    TriggerAddEventPlayerEffectUsed(TriggerCreate("Player_Cybernetic_LifeBank_Restore"), c_playerAny, "CyberneticLifeBank@RestoreCharge");
}

// updates the cost of the life bank restore ability for all players when bought
bool Player_Cybernetic_LifeBank_Restore(bool testConds, bool runActions){
    int i;
    for (i = 0; i < gv_MaxAmountPlayers; i += 1) {
        CatalogFieldValueModify(c_gameCatalogAbil, "CyberneticChargeRestore", "InfoArray[2].Resource[1]", i, "2", c_upgradeOperationAdd);
    }
    
    return true;
}

// kick player when any cheat is used
bool Player_CheatUsed (bool testConds, bool runActions){
    if(!runActions) {return true;}
    GameOver(EventPlayer(), c_gameOverDefeat, false, false);
    return true;
}

// control logic what to do when a hero dies
bool Player_HeroDies (bool testConds, bool runActions){
    unit trigUnit = EventUnit();
    int trigPlayer = UnitGetOwner(trigUnit);
    if(testConds){
        if (!(gv_PlayerStats[trigPlayer].activeFlag)) {return false;}
    }
    if(!runActions) {return true;}

    if(HeroAbility_RespawnEgg_RespawnAvailable()){
        Player_Revive_SaveHero(trigPlayer);
        HeroAbility_RespawnEgg_RunRespawnHandler(trigPlayer);
    }
    else if(gv_PlayerStats[trigPlayer].lifes > 0){
        gv_PlayerStats[trigPlayer].lifes -= 1;
        UIDisplayMessage(PlayerGroupSingle(trigPlayer), c_messageAreaChat, (IntToText(gv_PlayerStats[trigPlayer].lifes) + StringToText(" lives left.")));

        Player_Revive_SaveHero(trigPlayer);

        Wait(5.0, c_timeGame);

        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_PlayerStats[trigPlayer].overlord), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
        Player_Revive_ReleaseHero(trigPlayer, UnitGetPosition(gv_PlayerStats[trigPlayer].overlord));
    }
    else {
        Player_HeroDied(trigPlayer);
    }
    return true;
}

// handles everything in response to a player leaving, is executed multiple times when player leaves
bool Player_Left (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    if(!runActions) {return true;}
    
    if (gv_PlayerStats[trigPlayer].acvScoreRank_Custom == false) {
        PlayerBoard_SetCustomRankText(trigPlayer, StringExternal("Trig/PlayerLeft/Rank"));
    }

    if (PlayerGroupHasPlayer(gv_NewPlayers, trigPlayer)) {
        PlayerGroupRemove(gv_NewPlayers, trigPlayer);
        if (PlayerGroupCount(gv_NewPlayers) == 0) {
            TriggerDestroy(TriggerFind("Tutorial_MiniIntroduction_CloseButtonHandler"));
        }
    }

    gv_PlayerStats[trigPlayer].spectatingFlag = false;
    PlayerGroupRemove(gv_SpectatingPG, trigPlayer);

    if (gv_PlayerStats[trigPlayer].activeFlag) {
        Player_RemoveActivePlayer(trigPlayer);
    }
    else {
        Votekick_MenuOpenButton_Update();
    }
    Votekick_PlayerRemoveFinal(trigPlayer);
    return true;
}

// adds new cybernetic unit to control groups if corresponsing options are enabled
bool Player_Overlord_CyberneticTrained (bool testConds, bool runActions){
    int trigPlayer = EventPlayer();
    unit trigUnit = EventUnitProgressUnit();
    string unitType = UnitGetType(EventUnitProgressUnit());
    int optionsID;

    if(!runActions) {return true;}

    if(unitType == "CyberneticLurker"){
        optionsID = 2;
    }
    else if (unitType == "Runling"){
        optionsID = 3;
    }
    else if (unitType == "CyberneticLifeBank"){
        optionsID = 4;
    }
    else {
        return false;
    }

    if(gv_PlayerStats[trigPlayer].options_ControlGroup_Flag[optionsID]){
        UnitControlGroupAddUnit(trigPlayer, gv_PlayerStats[trigPlayer].options_ControlGroup_Group[optionsID], trigUnit);
    }
    
    return true;
}

// teleport of overlord and nearby units when ability is used
bool Player_Overlord_FlyBackHome (bool testConds, bool runActions){
    unitgroup affectedUnits;
    unit overlord = EventUnit();
    int trigPlayer = UnitGetOwner(overlord);
    int tmpInt;
    unit tmpUnit;

    if(!runActions) {return true;}

    UnitIssueOrder(overlord, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    
    //search units and move them towards hive
    affectedUnits = UnitGroup(null, trigPlayer, RegionCircle(UnitGetPosition(overlord), 5.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(affectedUnits, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(affectedUnits, tmpInt);
        if (tmpUnit == null) { break; }

        UnitIssueOrder(tmpUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(tmpUnit, "FlyBackHomeAffectedUnitBuff", trigPlayer, 1);
        UnitSetState(tmpUnit, c_unitStateHidden, true);
        UnitSetPosition(tmpUnit, gv_Part_PlayerSpawnPoints[trigPlayer], false);
    }
    Wait(3.0, c_timeGame);
    //move overlord to hive
    UnitIssueOrder(overlord, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(overlord, gv_Part_PlayerSpawnPoints[trigPlayer], false);
    Wait(7, c_timeGame);

    //make units visible again
    tmpInt = UnitGroupCount(affectedUnits, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(affectedUnits, tmpInt);
        if (tmpUnit == null) { break; }

        UnitIssueOrder(tmpUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetState(tmpUnit, c_unitStateHidden, false);
    }
    
    return true;
}

// controls the cost formula for player upgrades
bool Player_UpgradeResearch (bool testConds, bool runActions) {
    int trigPlayer = UnitGetOwner(EventUnit());
    string upgrade = libNtve_gf_TriggeringProgressUpgrade();

    if (!runActions) {return true;}

    if (upgrade == "DmgUpgrade") {
        gv_PlayerStats[trigPlayer].upgrade_Dmg += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[0].Resource[0]", trigPlayer, IntToString(CeilingI((gv_PlayerStats[trigPlayer].upgrade_Dmg * 0.66))), c_upgradeOperationAdd);
    }
    else if (upgrade == "ArmorUpgrade") {
        gv_PlayerStats[trigPlayer].upgrade_Armor += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[1].Resource[0]", trigPlayer, IntToString(CeilingI((gv_PlayerStats[trigPlayer].upgrade_Armor * 0.66))), c_upgradeOperationAdd);
        Acv_Reward_Armor(trigPlayer, 1.0);
    }
    else if (upgrade == "SplashRangeUpgrade") {
        gv_PlayerStats[trigPlayer].upgrade_Splash += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[2].Resource[0]", trigPlayer, IntToString(CeilingI((gv_PlayerStats[trigPlayer].upgrade_Splash * 75.0))), c_upgradeOperationAdd);
    }
    else if (upgrade == "RegenerationUpgrade") {
        gv_PlayerStats[trigPlayer].upgrade_Regen += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[3].Resource[0]", trigPlayer, IntToString(CeilingI((gv_PlayerStats[trigPlayer].upgrade_Regen * 150.0))), c_upgradeOperationAdd);
    }
    else if (upgrade == "AtkSpdUpgrade") {
        gv_PlayerStats[trigPlayer].upgrade_Atkspd += 1;
        CatalogFieldValueModify(c_gameCatalogAbil, "UpgradeResearch", "InfoArray[4].Resource[0]", trigPlayer, IntToString(CeilingI((gv_PlayerStats[trigPlayer].upgrade_Atkspd * 150.0))), c_upgradeOperationAdd);
    }
    return true;
}

void Player_TriggerCreate(){
    TriggerAddEventCheatUsed(TriggerCreate("Player_CheatUsed"), c_playerAny, c_gameCheatAny);
    TriggerAddEventPlayerLeft(TriggerCreate("Player_Left"), c_playerAny, c_gameResultUndecided);
    TriggerAddEventUnitTrainProgress(TriggerCreate("Player_Overlord_CyberneticTrained"), null, c_unitProgressStageComplete);
    TriggerAddEventUnitAbility(TriggerCreate("Player_Overlord_FlyBackHome"), null, AbilityCommand("FlyBackHome", 0), c_abilEffectStageChannel, false);
    TriggerAddEventUnitResearchProgress(TriggerCreate("Player_UpgradeResearch"), null, c_unitProgressStageComplete);
}
