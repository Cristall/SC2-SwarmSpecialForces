// P0 (Terran) -> P1 (Protoss): Observer

static const int observer_AmountWaypoints = 11;
static point[observer_AmountWaypoints] observer_Waypoints;
static int observer_CurrentWaypoint;
static trigger Observer_Stationary_Trigger;

void Observer_Init(){
    int tmpInt;
    
    for ( tmpInt = 0; tmpInt < observer_AmountWaypoints ; tmpInt += 1 ) {
        observer_Waypoints[tmpInt] = PointFromName("PartTerran_ObserverWaypoint" + IntToString(tmpInt));
    }
    observer_CurrentWaypoint = RandomInt(0, observer_AmountWaypoints - 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ObserverStandard", 0, gv_CollectiblePlayerEnemyNeutral, observer_Waypoints[observer_CurrentWaypoint]);
    gv_Observer_Unit = UnitLastCreated();

    Observer_Stationary_Trigger = TriggerCreate("Observer_Stationary");
    TriggerAddEventUnitAbility(Observer_Stationary_Trigger, null, AbilityCommand("ObserverStationary", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitDied(TriggerCreate("Observer_Death"), UnitRefFromUnit(gv_Observer_Unit));
    TriggerExecute(Observer_Stationary_Trigger,false,false);
}
bool Observer_HintHandler (bool testCond, bool runActions){
    point observerLocation;
    point pickedPoint;
    int radius = 47;
    unit hintUnit = null;
    int hintNumber = 1;
    fixed hintDuration = 7.0;

    if(!gv_Observer_AliveFlag){
        return false;
    }

    observerLocation = UnitGetPosition(gv_Observer_Unit);

    UnitCreate(1, "ObserverMinimapHint", c_unitCreateIgnorePlacement, gv_CollectiblePlayerEnemyNeutral, observerLocation, 270);
    hintUnit = UnitLastCreated();
    ActorSend(libNtve_gf_MainActorofUnit(hintUnit), "Signal Clear");

    Wait(60.0 , c_timeGame);
    while(gv_Observer_AliveFlag){
        observerLocation = UnitGetPosition(gv_Observer_Unit);
        do{
            pickedPoint = RegionRandomPoint(RegionCircle(observerLocation, radius));
        } while(!RegionContainsPoint(gv_Part_BoundsRegion, pickedPoint));

        UnitSetPosition(hintUnit, pickedPoint, false);
        ActorSend(libNtve_gf_MainActorofUnit(hintUnit), "Signal Hint" + IntToString(hintNumber));
        Wait(hintDuration, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(hintUnit), "Signal Clear");

        hintNumber +=1;
        radius -= 10;
        hintDuration += 1;

        if(hintNumber > 5){
            hintNumber = 5;
            radius = 10;
            hintDuration = 11;
        }
        Wait(60.0 - hintDuration, c_timeGame);
    }
    UnitRemove(hintUnit);

    TriggerDestroy(TriggerGetCurrent());
    return true;
}
bool Observer_Stationary (bool testConds, bool runActions) {
    if (!runActions) {return true;}

    Wait((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ObserverStationaryStandDelay", "PeriodicPeriodArray[2]", c_playerAny) + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ObserverStationaryStandDelay", "PeriodicPeriodArray[3]", c_playerAny)), c_timeGame);
    observer_CurrentWaypoint += 1;
    if (observer_CurrentWaypoint == observer_AmountWaypoints) {
        observer_CurrentWaypoint = 0;
    }

    //waypoint above base will be skipped
    if (observer_CurrentWaypoint == 4) {
        UnitIssueOrder(gv_Observer_Unit, OrderTargetingPoint(AbilityCommand("move", 0), observer_Waypoints[observer_CurrentWaypoint]), c_orderQueueReplace);
        observer_CurrentWaypoint += 1;
        UnitIssueOrder(gv_Observer_Unit, OrderTargetingPoint(AbilityCommand("move", 0), observer_Waypoints[observer_CurrentWaypoint]), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_Observer_Unit, OrderTargetingPoint(AbilityCommand("move", 0), observer_Waypoints[observer_CurrentWaypoint]), c_orderQueueReplace);
    }
    UnitIssueOrder(gv_Observer_Unit, Order(AbilityCommand("ObserverStationary", 0)), c_orderQueueAddToEnd);
    return true;
}
bool Observer_Death (bool testConds, bool runActions) {
    int tmpInt;
    if (!runActions) {return true;}

    TriggerStop(Observer_Stationary_Trigger);
    TriggerDestroy(Observer_Stationary_Trigger);
    TriggerDestroy(TriggerGetCurrent());

    gv_Observer_AliveFlag = false;
    if (gv_Part_AmountObjectivesDefeated == gv_Part_AmountObjectivesMax) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Observer/KillAfterBosses"));
        tmpInt = -1;
        while (true) {
            tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
            if (tmpInt < 0) { break; }

            UnitBehaviorAddPlayer(gv_PlayerStats[tmpInt].overlord, "TerranPartTransitionBuff", tmpInt, 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/Observer/KillBeforeBosses"));
    }
    ObjectiveSetState(objective_Observer, c_objectiveStateCompleted);
    return true;
}

void Part_TransitionToP1(){
    unitgroup tmpUG;
    int tmpInt;
    int tmpPlayer;
    unit tmpUnit;
    string tmpUnitType;

    //make everything invulnerable and uncommandable
    tmpUG = UnitGroup(null, c_playerAny, RegionFromName("PartTerran"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(tmpUnit, true);
        libNtve_gf_MakeUnitUncommandable(tmpUnit, true);
        UnitIssueOrder(tmpUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    Utility_PauseGame(true);

    //pick player unis and make them use animation by adding behavior
    tmpPlayer = -1;
    while (true) {
        tmpPlayer = PlayerGroupNextPlayer(gv_ActivePG, tmpPlayer);
        if (tmpPlayer < 0) { break; }
        tmpUG = UnitGroup(null, tmpPlayer, RegionFromName("PartTerran"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
        for (;; tmpInt -= 1) {
            tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
            if (tmpUnit == null) { break; }

            tmpUnitType = UnitGetType(tmpUnit);
            if (tmpUnitType == "HeroBowler"
                || tmpUnitType == "BaseOverlord") {
                UnitBehaviorAddPlayer(tmpUnit, "TerranPartTransitionFly", UnitGetOwner(tmpUnit), 1);
            }
            else if (tmpUnitType == "CyberneticLurkerBurrowed") {
            }
            else {
                UnitBehaviorAddPlayer(tmpUnit, "TerranPartTransitionBurrow", UnitGetOwner(tmpUnit), 1);
            }
        }
    }

    Wait(3.0, c_timeGame);
    gv_Part_ActivePart += 1;


    //update variables
    Part_InitVariables();
    Hive_Transition();
    Collectibles_InitPart();
    Objectives_InitPart();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/PartTransition/Upgrades"));
    
    //move player units and vulnerable & commandable
    Player_IncreaseUpgradeCount(10.0);
    tmpPlayer = -1;
    while (true) {
        tmpPlayer = PlayerGroupNextPlayer(gv_ActivePG, tmpPlayer);
        if (tmpPlayer < 0) { break; }

        Player_AddExp(tmpPlayer, gv_PlayerStats[tmpPlayer].startExp[c_Part_Protoss]);
        PlayerModifyPropertyFixed(tmpPlayer, c_playerPropMinerals, c_playerPropOperAdd, gv_PlayerStats[tmpPlayer].startBiomass[c_Part_Protoss]);
        PlayerModifyPropertyFixed(tmpPlayer, c_playerPropVespene, c_playerPropOperAdd, gv_PlayerStats[tmpPlayer].startMutations[c_Part_Protoss]);

        tmpUG = UnitGroup(null, tmpPlayer, RegionFromName("PartTerran"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
        for (;; tmpInt -= 1) {
            tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
            if (tmpUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(tmpUnit, false);
            libNtve_gf_MakeUnitUncommandable(tmpUnit, false);
            if(UnitGetType(tmpUnit)== "RespawnEgg@Egg" && UnitTestState(tmpUnit, c_unitStateHidden)){
                // carried eggs do not get moved
                continue;
            }
            UnitSetPosition(tmpUnit, gv_Part_PlayerSpawnPoints[UnitGetOwner(tmpUnit)], false);
            if(UnitGetType(tmpUnit)== "CyberneticLurkerBurrowed"){
                UnitIssueOrder(tmpUnit, Order(AbilityCommand("CyberneticLurkerUnburrow", 0)), c_orderQueueReplace);
            }
        }
    }

    //remove all enemy units in terran part (to reduce performance impact)
    tmpUG = UnitGroup(null, gv_EnemyPlayer, RegionFromName("PartTerran"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        UnitRemove(tmpUnit);
    }
    gv_Enemy_SpawnAmount = 0;
    Utility_PauseGame(false);

    // check if custom diff skip protoss is enabled
    CustomDiff_SkipP1();
}

bool Part_TransitionToP1_Ability (bool testConds, bool runActions){
    if(!runActions) {return true;}

    TriggerDestroy(TriggerGetCurrent());
    Part_TransitionToP1();
    
    return true;
}

// P1 (Protoss) -> P2 (Zerg): NydusWorm

static unit nydusWorm_Unit_Entrance;
static const int nydusWorm_AmountWaypoint = 7;
static point[nydusWorm_AmountWaypoint] nydusWorm_Waypoints;
static int[4] nydusWorm_WaypointsUsed;
static int nydusWorm_Hitcount = 0;

void Part_TransitionToP2(){
    unitgroup tmpUG;
    int tmpInt;
    int tmpPlayer;
    unit tmpUnit;
    string tmpUnitType;
    unit nydusworm_exit;

    //make everything invulnerable and uncommandable
    tmpUG = UnitGroup(null, c_playerAny, RegionFromName("PartProtoss"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(tmpUnit, true);
        libNtve_gf_MakeUnitUncommandable(tmpUnit, true);
        UnitIssueOrder(tmpUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    Utility_PauseGame(true);

    tmpPlayer = -1;
    while (true) {
        tmpPlayer = PlayerGroupNextPlayer(gv_ActivePG, tmpPlayer);
        if (tmpPlayer < 0) { break; }
        tmpUG = UnitGroup(null, tmpPlayer, RegionFromName("PartProtoss"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
        for (;; tmpInt -= 1) {
            tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
            if (tmpUnit == null) { break; }
            CameraPan(tmpPlayer, UnitGetPosition(nydusWorm_Unit_Entrance), 0.0, -1, 10.0, false);

            UnitBehaviorAddPlayer(tmpUnit, "NydusWorm@ThrowCollision", UnitGetOwner(tmpUnit), 1);
            if (UnitGetType(tmpUnit) == "CyberneticLurkerBurrowed") {
                UnitIssueOrder(tmpUnit, Order(AbilityCommand("CyberneticLurkerUnburrow", 0)), c_orderQueueReplace);
                UnitIssueOrder(tmpUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(nydusWorm_Unit_Entrance)), c_orderQueueAddToEnd);
            }
            else{
                UnitIssueOrder(tmpUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(nydusWorm_Unit_Entrance)), c_orderQueueReplace);
            }
        }
    }
    Wait(3.0, c_timeGame);
    gv_Part_ActivePart += 1;


    //update variables
    Part_InitVariables();
    Hive_Transition();
    Collectibles_InitPart();
    Objectives_InitPart();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/PartTransition/Upgrades"));
    
    //move player units and vulnerable & commandable
    Player_IncreaseUpgradeCount(10.0);

    UnitCreate(1, "NydusWorm@NydusWormExit", c_unitCreateIgnoreBirth, gv_BasePlayer, PointFromName("PartZerg_AttackPoint"), 180);
    nydusworm_exit = UnitLastCreated();

    tmpPlayer = -1;
    while (true) {
        tmpPlayer = PlayerGroupNextPlayer(gv_ActivePG, tmpPlayer);
        if (tmpPlayer < 0) { break; }

        Player_AddExp(tmpPlayer, gv_PlayerStats[tmpPlayer].startExp[c_Part_Zerg]);
        PlayerModifyPropertyFixed(tmpPlayer, c_playerPropMinerals, c_playerPropOperAdd, gv_PlayerStats[tmpPlayer].startBiomass[c_Part_Zerg]);
        PlayerModifyPropertyFixed(tmpPlayer, c_playerPropVespene, c_playerPropOperAdd, gv_PlayerStats[tmpPlayer].startMutations[c_Part_Zerg]);

        tmpUG = UnitGroup(null, tmpPlayer, RegionFromName("PartProtoss"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
        CameraPan(tmpPlayer, PointFromName("PartZerg_AttackPoint"), 0.0, -1, 10.0, false);
        CameraPan(tmpPlayer, PointFromName("PartZerg_Hive"), 2, -1, 10.0, true);
        for (;; tmpInt -= 1) {
            tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
            if (tmpUnit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(tmpUnit, false);
            libNtve_gf_MakeUnitUncommandable(tmpUnit, false);
            if(UnitGetType(tmpUnit)== "RespawnEgg@Egg" && UnitTestState(tmpUnit, c_unitStateHidden)){
                // carried eggs do not get moved
                continue;
            }
            UnitIssueOrder(tmpUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitSetPosition(tmpUnit, PointWithOffset(PointFromName("PartZerg_AttackPoint"),RandomFixed(-5,-4.75),RandomFixed(-0.45,0.15)), false);
            UnitIssueOrder(nydusworm_exit, OrderTargetingUnit(AbilityCommand("NydusWorm@Throw", 0), tmpUnit), c_orderQueueAddToEnd);
        }
    }

    Wait(3.5, c_timeGame);

    //remove all enemy units in protoss part (to reduce performance impact)
    tmpUG = UnitGroup(null, gv_EnemyPlayer, RegionFromName("PartProtoss"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }
        UnitRemove(tmpUnit);
    }
    gv_Enemy_SpawnAmount = 0;
    Utility_PauseGame(false);

    Wait(2,c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(nydusworm_exit), "AnimPlay Abil1 Unburrow");
    Wait(2,c_timeGame);
    UnitRemove(nydusworm_exit);
}
bool Part_TransitionToP2_Ability (bool testConds, bool runActions){
    if(!runActions) {return true;}

    TriggerDestroy(TriggerGetCurrent());
    Part_TransitionToP2();
    
    return true;
}

void NydusWorm_Init(){
    int tmpInt;
    for ( tmpInt = 0; tmpInt < nydusWorm_AmountWaypoint ; tmpInt += 1 ) {
        nydusWorm_Waypoints[tmpInt] = PointFromName("PartProtoss_NydusSpawns" + IntToString(tmpInt));
    }

    gv_NydusWorm_AliveFlag = true;
    nydusWorm_WaypointsUsed[0] = RandomInt(0, nydusWorm_AmountWaypoint-1);
    UnitCreate(1, "NydusWorm", 0, gv_CollectiblePlayerEnemyNeutral, nydusWorm_Waypoints[nydusWorm_WaypointsUsed[0]], RandomFixed(0,360));
    gv_NydusWorm_Unit = UnitLastCreated();

    TriggerAddEventPlayerEffectUsed(TriggerCreate("NydusWorm_DmgResponse"), gv_CollectiblePlayerEnemyNeutral, "NydusWorm@DmgResponseInvulnerable");
    TriggerAddEventUnitDamaged(TriggerCreate("NydusWorm_Killed"), UnitRefFromUnit(gv_NydusWorm_Unit), c_unitDamageTypeAny, c_unitDamageFatal, null);
}
void NydusWorm_EntranceCreate(){
    int i;
    int tmp_player;
    if(nydusWorm_Unit_Entrance != null){
        Debug_ShowMessage("NydusWorm_EntranceCreate: tried to create multiple entrances!");
        return;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusWorm@NydusWormEntrance", c_unitCreateIgnoreBirth, gv_BasePlayer, PointFromName("PartProtoss_Boss_Atlantis"));
    nydusWorm_Unit_Entrance = UnitLastCreated();
    TriggerAddEventUnitAbility(TriggerCreate("Part_TransitionToP2_Ability"), null, AbilityCommand("ProtossPartTransition", 0), c_abilEffectStageChannel, false);
    for (i = 1; i <= PlayerGroupCount(gv_ActivePG); i += 1) {
        tmp_player = PlayerGroupPlayer(gv_ActivePG, i);
        UnitBehaviorAdd(gv_PlayerStats[tmp_player].overlord, "ProtossPartTransitionBuff", gv_PlayerStats[tmp_player].overlord, 1);
    }
}
void NydusWorm_Relocate(){
    int tmpInt;
    int tmpInt2;
    bool tmpFlag = false;
    while(!tmpFlag){
        tmpFlag = true;
        tmpInt = RandomInt(0, nydusWorm_AmountWaypoint-1);
        for (tmpInt2 = 0; tmpInt2 < nydusWorm_Hitcount; tmpInt2 += 1) {
            if(tmpInt == nydusWorm_WaypointsUsed[tmpInt2]){
                tmpFlag = false;
            }
        }
    }

    nydusWorm_WaypointsUsed[nydusWorm_Hitcount] = tmpInt;
    UnitIssueOrder(gv_NydusWorm_Unit, OrderTargetingPoint(AbilityCommand("NydusWorm@Relocate", 0), nydusWorm_Waypoints[tmpInt]), c_orderQueueReplace);
}
bool NydusWorm_DmgResponse(bool testConds, bool runActions){
    
    if(testConds){if (!(true)) {return false;}}
    if(!runActions) {return true;}
    
    nydusWorm_Hitcount += 1;
    NydusWorm_Relocate();
    
    return true;
}
bool NydusWorm_Killed(bool testConds, bool runActions){
    int tmpInt;
        
    if(testConds){if (!(true)) {return false;}}
    if(!runActions) {return true;}
    
    gv_NydusWorm_AliveFlag = false;

    if (gv_Part_AmountObjectivesDefeated == gv_Part_AmountObjectivesMax) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/NydusWorm/KillAfterBosses"));
        tmpInt = -1;
        NydusWorm_EntranceCreate();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Enemy/NydusWorm/KillBeforeBosses"));
    }
    ObjectiveSetState(objective_NydusWorm, c_objectiveStateCompleted);
    
    return true;
}

//Part - generals stuff
unitgroup Part_Spawners_GetSpawnerFromRegion(region reg){
    int tmpInt;
    unitgroup tmpUG ;
    unit tmpUnit;
    unitgroup returnUG= UnitGroupEmpty();

    tmpUG = UnitGroup(null, gv_EnemyPlayer, reg, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    tmpInt = UnitGroupCount(tmpUG, c_unitCountAll);
    for (;; tmpInt -= 1) {
        tmpUnit = UnitGroupUnitFromEnd(tmpUG, tmpInt);
        if (tmpUnit == null) { break; }

        if (UnitHasBehavior2(tmpUnit, "EnemySpawner")) {
            UnitGroupAdd(returnUG, tmpUnit);
        }
    }
    return returnUG;
}

// takes care of everything at the end of a part, eg enabling part transition ability. also checks flawless and end the game if necessary
void Part_PartFinished(){
    int tmpInt;

    Player_PartWin_UpdateAcv();

    //prepares part transitions
    if (gv_Part_ActivePart == c_Part_Terran) {
        if (gv_Observer_AliveFlag == false) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/ObserverDead"));
            tmpInt = -1;
            while (true) {
                tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
                if (tmpInt < 0) { break; }
                UnitBehaviorAddPlayer(gv_PlayerStats[tmpInt].overlord, "TerranPartTransitionBuff", tmpInt, 1);
            }
        }
        else {
            TriggerExecute(TriggerCreate("Observer_HintHandler"), false, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/ObserverAlive"));
            ObjectiveSetState(objective_Observer, c_objectiveStateActive);
        }
        TriggerAddEventUnitAbility(TriggerCreate("Part_TransitionToP1_Ability"), null, AbilityCommand("TerranPartTransition", 0), c_abilEffectStageChannel, false);
    }
    else if (gv_Part_ActivePart == c_Part_Protoss) {
        if (gv_NydusWorm_AliveFlag == false) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/NydusWormDead"));
            tmpInt = -1;
            NydusWorm_EntranceCreate();
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Trig/Bosskilled/NydusWormAlive"));
            ObjectiveSetState(objective_NydusWorm, c_objectiveStateActive);
        }
    }
    else if (gv_Part_ActivePart == c_Part_Zerg){
        CustomDefeatFrame_WinEnable();
    }

    if(gv_ValidGame && gv_Hive_FlawlessFlag){
        tmpInt= -1;
        while(true){
            tmpInt = PlayerGroupNextPlayer(gv_ActivePG, tmpInt);
            if(tmpInt <0){break;}

            Acv_Split_Unlock(tmpInt, c_AcvIdentifier_FlawlessP0+gv_Part_ActivePart, gv_Difficulty);
        }
    }
}
void Part_InitVariables() {
    int tmpInt;
    string  namePrefix;
    
    gv_Part_ActiveSpawners = UnitGroupEmpty();
    if (gv_Part_ActivePart == c_Part_Terran) {
        namePrefix = "PartTerran";
        gv_Part_AmountObjectivesMax = 3;

        gv_Part_Areas_Open[c_Areas_TLeft1] = true;
        gv_Part_Areas_Open[c_Areas_TRight1] = true;
        gv_Part_Areas_Open[c_Areas_TMid1] = true;

        gv_Part_Areas_Spawners[c_Areas_TLeft1]  = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Junker_First"));
        gv_Part_Areas_Spawners[c_Areas_TLeft2]  = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Junker_Second"));
        gv_Part_Areas_Spawners[c_Areas_TLeft3]  = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Junker_Third"));
        gv_Part_Areas_Spawners[c_Areas_TRight1] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_BlackOps_First"));
        gv_Part_Areas_Spawners[c_Areas_TRight2] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_BlackOps_Second"));
        gv_Part_Areas_Spawners[c_Areas_TRight3] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_BlackOps_Third"));
        gv_Part_Areas_Spawners[c_Areas_TMid1]   = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mix_First"));

        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_TLeft1]);
        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_TRight1]);
        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_TMid1]);

        Observer_Init();
        PartTerran_TriggerCreate();
    }
    else if (gv_Part_ActivePart == c_Part_Protoss) {
        namePrefix = "PartProtoss";

        gv_Part_AttackWaypoint = PointFromName(namePrefix+ "_Waypoint0");
        gv_Part_AttackWaypointRemoverRegion = RegionFromName(namePrefix+ "_Psi_Second_Wall");

        gv_Part_AmountObjectivesMax = 4;
    
        gv_Part_Areas_Open[c_Areas_PBottom1] = true;
        gv_Part_Areas_Open[c_Areas_PTop1] = true;

        gv_Part_Areas_Spawners[c_Areas_PBottom1] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mech_First"));
        gv_Part_Areas_Spawners[c_Areas_PBottom2] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mech_Second"));
        gv_Part_Areas_Spawners[c_Areas_PTop1]    = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Psi_First"));
        gv_Part_Areas_Spawners[c_Areas_PTop2]    = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Psi_Second"));
        gv_Part_Areas_Spawners[c_Areas_PTop3]    = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Psi_Third"));
        gv_Part_Areas_Spawners[c_Areas_PMid1]    = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mix_First"));

        
        gv_Atlantis_PylonColossus = UnitFromId(2133672802);
        
        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PBottom1]);
        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_PTop1]);

        tmpInt = -1;
        while (true) {
            tmpInt = PlayerGroupNextPlayer(PlayerGroupAll(), tmpInt);
            if (tmpInt < 0) { break; }
            VisFillArea(tmpInt, RegionFromName(namePrefix + "_Mix_First"), c_fillTypeFogged, false);
        }

        NydusWorm_Init();
        PartProtoss_TriggerCreate();
    }
    else if (gv_Part_ActivePart == c_Part_Zerg) {
        namePrefix = "PartZerg";

        gv_Part_AmountObjectivesMax = 6;
        gv_Part_Areas_Open[c_Areas_ZMid1] = true;
        
        gv_Part_Areas_Spawners[c_Areas_ZMid1] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mix_First"));
        gv_Part_Areas_Spawners[c_Areas_ZMid2] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mix_Second"));
        gv_Part_Areas_Spawners[c_Areas_ZMid3] = Part_Spawners_GetSpawnerFromRegion(RegionFromName(namePrefix+"_Mix_Third"));
        UnitGroupAddUnitGroup(gv_Part_ActiveSpawners, gv_Part_Areas_Spawners[c_Areas_ZMid1]);

        PartZerg_TriggerCreate();
    }
    
    gv_Part_AmountObjectivesDefeated = 0;
    gv_Part_EnemyRegion = RegionFromName(namePrefix);
    gv_Part_BaseRegion = RegionFromName(namePrefix+"_Base");
    gv_Part_BoundsRegion = RegionFromName(namePrefix+"_Bounds");
    gv_Part_AttackPoint = PointFromName(namePrefix+"_AttackPoint");
    for(tmpInt=1; tmpInt <= gv_MaxAmountPlayers; tmpInt+=1){
        gv_Part_PlayerSpawnPoints[tmpInt] = PointFromName(namePrefix+"_HeroSpawn"+IntToString(tmpInt));
    }
    GameSetLighting("Part" + IntToString(gv_Part_ActivePart) , 0.0);
    gv_Part_AllStructures = UnitGroup(null, gv_EnemyPlayer, gv_Part_EnemyRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_Hive_Position = PointFromName(namePrefix+ "_Hive");
    CameraSetBounds(gv_StartingPG, gv_Part_BoundsRegion, true);
    tmpInt = -1;
    while (true) {
        tmpInt = PlayerGroupNextPlayer(gv_StartingPG, tmpInt);
        if (tmpInt < 0) { break; }

        if(gv_Part_BaseRevealer[tmpInt] != null){
            VisRevealerDestroy(gv_Part_BaseRevealer[tmpInt]);
        }
        gv_Part_BaseRevealer[tmpInt] = VisRevealerCreate(tmpInt, gv_Part_BaseRegion);
        CameraPan(tmpInt, gv_Hive_Position, 0.0, -1, 10.0, false);
    }
}

